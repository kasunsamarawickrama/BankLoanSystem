
@model BankLoanSystem.Models.User


@{
    ViewBag.Title = "Join Dealer Account";
    if (ViewBag.AjaxRequest == null)
    {
        Layout = "~/Views/Shared/_DashBoardLayout.cshtml";
    }
}

<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js?version=@((new Random()).Next(1,10000))."></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js?version=@((new Random()).Next(1,10000))."></script>

<script src="~/scripts/jquery.unobtrusive-ajax.min.js"></script>
@section AddToHead{
    <style>
        .body-content {
            float: none;
            width: auto;
            margin: 0;
        }

        .err_msg_box {
            text-align: left;
        }

        #page-wrapper {
            min-height: 568px;
            padding: 0 36px;
            float: none !important;
            /* position: relative !important; */
            margin: auto !important;
        }
        #rights > input{
             float:unset;
             margin-right:10px;

             width:17px;
             height:17px;
         }

        #rights{
            text-align:left;
            font-size:14px;
            font-weight:normal;
            color:#545454;
            width:400%;
        }
    </style>
    }
<script src="~/scripts/jquery-1.10.2.min.js"></script>

@*<script src="~/scripts/bootstrap.min.js"></script>*@

@*<link href="~/Content/pikaday.css" rel="stylesheet" />
<link href="~/Content/theme.css" rel="stylesheet" />
<link href="~/Content/triangle.css" rel="stylesheet" />
<script src="~/scripts/moment.js"></script>
<script src="~/scripts/pikaday.js"></script>*@



@{Html.RenderAction("LoanInfo", "Unit", new { title = @ViewBag.Title, msg = @ViewBag.Msg });
}


<div id="page-wrapper" class="gray-bg sidebar-content companySetupWrapper usersetup_border">
    <div class="ibox float-e-margins">
        <div class="ibox-title">
            <div class="container body-content">

                <div class="row">
                    <div class="container body-content new_container">
                        @*<div class="setupImage"><img src="~/Images/UserSetupImage.png" width="100" alt=""></div>*@
                        @*<div >
                            <h2>Join Dealer Account</h2>
                        </div>*@
                        <div style="clear:both;"></div>
                        <div class="form-horizontal new_form_horizontal">
                            @*<div class="topErrors">
                                <p class="err_msg">@Html.ValidationSummary(true, "", new { @class = "text-danger" })</p>
                            </div>*@
                            <div class="topErrors">
                                <p class="err_msg">@Html.ValidationSummary(true, "", new { @class = "text-danger" })</p>
                                <div id="errSpn" class="text-danger"><span>@ViewBag.ErrorMsg</span></div>
                                @*<div class="text-danger">@ViewBag.Error</div>*@
                            </div>
                           
                            <div class="form-horizontal">
                                
                                <div style="clear:both"></div>
                                @if (ViewBag.SuccessMsg != null && ViewBag.SuccessMsg.ToString().Equals("User Successfully Created"))
                                {
                                    <div id="successSpn" class="text-success"><span>@ViewBag.SuccessMsg</span></div>
                                        @*<span class="text-success">@ViewBag.SuccessMsg</span>*@                                       
                                }

                               
                                    @using(Html.BeginForm("LinkDealer", "CreateDealer" , FormMethod.Post , new { @id= "form" }))
                                    {
                                        @Html.AntiForgeryToken()
                                        
                                        <div class="form-horizontal">
                                          
                                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                            <div class="form-group new_form_group">
                                                <div class="control-label col-sm-2 lable_style">
                                                    <label>Role</label>
                                                </div>
                                                <div class="control-label col-sm-2 lable_style">
                                                    @*@Html.DropDownListFor(model => model.RoleId, null, "--Select Role--", htmlAttributes: new { @class = "form-control text_field_input", id = "RoleId" })*@
                                                    @*@Html.LabelFor(model => model.RoleName, htmlAttributes: new { })*@
                                                    <label>Dealer User </label>
                                                </div>
                                                <div class="err_msg_box">
                                                    <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.RoleId, "", new { @class = "text-danger", @id = "RoleIdValidate" })</p>
                                                </div>
                                            </div>
                                            <div class="form-group new_form_group">
                                                <div class="control-label col-sm-2 lable_style">
                                                    <label>Company </label>
                                                </div>
                                                <div class="control-label col-sm-2 lable_style" style="width:70% ! important;">
                                                    @Html.Label((string)ViewBag.nonRegCompany)
                                                </div>


                                            </div>

                                            <div class="form-group new_form_group">
                                                <div class="control-label col-sm-2 lable_style">
                                                    <label>Branch </label>
                                                </div>
                                                <div class="control-label col-sm-2 lable_style" style="width:70% ! important;">
                                                    @Html.Label((string)ViewBag.nonRegBranches)

                                                    @*@Html.LabelFor(model => model.RoleName, htmlAttributes: new { })*@
                                                    @*@if (ViewBag.NonRegBranch != "")
                {
                    @Html.HiddenFor(model => model.NonRegBranch, new { @Value = (int)ViewBag.NonRegBranch.Items[0].CompanyId })
                    @Html.LabelFor(model => model.NonRegBranch, (string)ViewBag.NonRegBranch.Items[0].CompanyName, htmlAttributes: new { @class = "form-control text_field_input", style = "border:none;border-radius:none;-webkit-box-shadow:nonr;box-shadow:none;margin-top: 3px;display: block;" })
                }
                else
                {

                    @Html.DropDownListFor(model => model.NonRegBranch, null, "--Select company--", htmlAttributes: new { @class = "form-control text_field_input", id = "RegisteredBranchId", @onchange = "javascript:GetNonRegisteredBranches(this.value);" })
                }*@


                                                </div>


                                            </div>
                                      
                                            <div class="form-group new_form_group">
                                                <div class="control-label col-sm-2 lable_style">
                                                    <label>First Name</label>
                                                </div>
                                                <div class="col-xs-8 text_field short_text_field">
                                                    @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control text-box single-line text_field_input first_letter_capital", @id = "txtFirstName" } })
                                                </div>
                                                <div class="err_msg_box">
                                                    <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })</p>
                                                </div>
                                            </div>
                                            <div class="form-group new_form_group">
                                                <div class="control-label col-sm-2 lable_style">
                                                    <label>Last Name</label>
                                                </div>
                                                <div class="col-xs-8 text_field short_text_field">
                                                    @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control text-box single-line text_field_input first_letter_capital", @id = "txtLastName" } })
                                                </div>
                                                <div class="err_msg_box">
                                                    <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })</p>
                                                </div>
                                            </div>
                                            <div class="form-group new_form_group">
                                                <div class="control-label col-sm-2 lable_style">
                                                    <label>Email</label>
                                                </div>
                                                <div class="col-xs-8 text_field">
                                                    @Html.EditorFor(model => model.NewEmail, new { htmlAttributes = new { @class = "form-control text-box single-line text_field_input", @id = "txtNewEmail" } })
                                                </div>
                                                <div class="err_msg_box">
                                                    <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.NewEmail, "", new { @class = "text-danger" })</p>
                                                </div>
                                            </div>
                                            <div class="form-group new_form_group">
                                                <div class="control-label col-sm-2 lable_style">
                                                    <label>
                                                        Phone Number<br>
                                                        <span class="optional">(Optional)</span>
                                                    </label>
                                                </div>
                                                <div class="col-xs-8 text_field short_text_field">
                                                    @Html.EditorFor(model => model.PhoneNumber2, new { htmlAttributes = new { @class = "form-control text-box single-line text_field_input", @id = "txtPhoneNumber" } })
                                                </div>
                                                <div class="err_msg_box">
                                                    <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.PhoneNumber2, "", new { @class = "text-danger" })</p>
                                                </div>
                                            </div>
                                            <div class="form-group new_form_group">
                                                <div class="control-label col-sm-2 lable_style">
                                                    <label>Username</label>
                                                </div>
                                                <div class="col-xs-8 text_field short_text_field">
                                                    @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control text-box single-line text_field_input", @id = "txtUserName" } })

                                                </div>
                                                <div class="err_msg_box">
                                                    <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })</p>
                                                </div>
                                            </div>
                                            <div class="form-group new_form_group">
                                                <div class="control-label col-sm-2 lable_style">
                                                    <label>Password</label>
                                                </div>
                                                <div class="col-xs-8 text_field short_text_field">
                                                    @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control text-box single-line password text_field_input", @id = "txtPassword" } })
                                                </div>
                                                <div class="err_msg_box">
                                                    <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })</p>
                                                </div>
                                            </div>
                                            <div class="form-group new_form_group">
                                                <div class="control-label col-sm-2 lable_style">
                                                    <label>Confirm Password</label>
                                                </div>
                                                <div class="col-xs-8 text_field short_text_field">
                                                    @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "form-control text-box single-line password text_field_input", @id = "txtConfirmPassword" } })
                                                </div>
                                                <div class="err_msg_box">
                                                    <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })</p>
                                                </div>
                                            </div>
                                            <div id="rightDiv">
                                                <div class="form-group new_form_group">
                                                    <div class="control-label col-sm-2 lable_style">
                                                        <label>Select Reports Rights</label>
                                                    </div>
                                                    <div class="col-xs-8 ">
                                                        @if (Model.ReportRightsList.Count > 0)
                                                        {
                                                            @*<table style="width: 100%;" class="table_style">*@
                                                                <div class="col-sm-7">

                                                                    <div id="rights">
                                                                        @Html.CheckBox("selectAll", new { @class = "All", @id = "CheckAll" })
                                                                        @Html.Label("All")
                                                                        <br />
                                                                        @for (var i = 0; i < Model.ReportRightsList.Count; i++)
                    {
                                                                            <div id="rights">

                                                                                @Html.HiddenFor(x => x.ReportRightsList[i].rightId)
                                                                                @Html.CheckBoxFor(x => x.ReportRightsList[i].active, new { @class = "All", @id = i + 1 })
                                                                                @Html.Label(Model.ReportRightsList[i].name)
                                                                                <a onclick="ViewDetails(@i)" id="Description">View Details</a>
                                                                                
                                                                            </div>
                                                                            
                                                                        }
                                                                    </div>
                                                                    <div id="checkBoxMessage" class="text-danger"><span></span></div>
                                                                </div>
                                                                @*</table>*@
                                                                }
                                                    </div>
                                                </div>

                                            </div>
                                          
                                            <hr />

                                            <div class="form-group new_form_group">
                                                <div class="control-label col-sm-2 lable_style">
                                                    <label>Select which of your users will receive the Dealer's advance requests</label>
                                                </div>
                                               
                                                @if (ViewBag.UserIdForSendReq!=null && ViewBag.UserIdForSendReq.Items.Count == 1)
                                                {
                                                    <div class="col-xs-8 text_field">
                                                        @Html.HiddenFor(model => model.UserIdForSendReq, new { Value = (int)ViewBag.UserIdForSendReq.Items[0].UserId, id = "JDUser1" })
                                                        @Html.LabelFor(model => model.UserIdForSendReq, (string)ViewBag.UserIdForSendReq.Items[0].UserName, htmlAttributes: new { @class = "form-control text_field_input", id = "JDUserLbl", style = "border:none;border-radius:none;-webkit-box-shadow:nonr;box-shadow:none;margin-top:3px;display:block;width:100%;text-align:left" })
                                                    </div>
                                                }
                                                else if (ViewBag.UserIdForSendReq != null && ViewBag.UserIdForSendReq.Items.Count > 1)
                                                {
                                                    <div class="col-xs-8 text_field short_text_field">
                                                        @Html.DropDownListFor(model => model.UserIdForSendReq, null, "--Select User--", htmlAttributes: new { @class = "form-control text_field_input", @id = "JDUser" })
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div class="col-xs-8 text_field short_text_field" id="divSingleBranch" style="text-align:left;font-weight:normal;color:#545454;font-size:14px;" hidden>
                                                        @*<input type="hidden" id="hdnUserId2" />*@

                                                        <label>No users found</label>
                                                    </div>
                                                }
                                                <div class="err_msg_box">
                                                    <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.UserIdForSendReq, "", new { @class = "text-danger" })</p>
                                                </div>
                                            </div>
                                            @if (ViewBag.UserIdForSendReq != null && ViewBag.UserIdForSendReq.Items.Count == 1 && ViewBag.UserIdForSendReq.Items[0].NewEmail != "")
                                            {
                                            <div class="form-group new_form_group">
                                               

                                               
                                                    <div class="control-label col-sm-2 lable_style">
                                                        <label>Specifiy which email address the advance request notices wlll be sent to</label>
                                                    </div>
                                                    <div class="col-xs-8 text_field">
                                                        @Html.EditorFor(model => model.UserEmailForSendReq, new { htmlAttributes = new { @class = "form-control text-box single-line password text_field_input", @id = "txtEmailForSendReq",@value= ViewBag.UserIdForSendReq.Items[0].NewEmail } })
                                                    </div>
                                                
                                               
                                                <div class="err_msg_box">
                                                    <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.UserEmailForSendReq, "", new { @class = "text-danger" })</p>
                                                </div>
                                            </div>
                                            }
                                            else if(ViewBag.UserIdForSendReq != null && ViewBag.UserIdForSendReq.Items.Count > 1)
                                            {
                                                <div class="form-group new_form_group" id="DivEmailJD">
                                                    <div class="control-label col-sm-2 lable_style">
                                                        <label>Specifiy which email address the advance request notices wlll be sent to</label>
                                                    </div>
                                                    <div class="col-xs-8 text_field">
                                                        @Html.EditorFor(model => model.UserEmailForSendReq, new { htmlAttributes = new { @class = "form-control text-box single-line password text_field_input", @id = "txtEmailForSendReq" } })
                                                    </div>

                                                    <div class="err_msg_box">
                                                        <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.UserEmailForSendReq, "", new { @class = "text-danger" })</p>
                                                    </div>
                                                </div>
                                            }
                                            
                                            <div class="form-group new_form_group clear_next clear_next_bordr">
                                                <div>
                                                    <nav>
                                                        <div class="pager new_pager">
                                                            <div class="button_box algn_left">
                                                                <input value="Dashboard" name="subBack" id="btnPreStep3" class="btn btn-primary m-b cancel next_clear_button back_back" tabindex="-1" style="margin-left: 10px" type="button" onclick="window.location.href='/UserManagement/UserDetails'">
                                                            </div>
                                                            <div class="button_box algn_center">
                                                                <input value="Create" class="btn btn-primary m-b next_clear_button next_back" style="margin-left:10px" type="submit" id="btnCreateDealer">
                                                            </div>
                                                            <div class="button_box algn_right">
                                                                <input id="clear" value="Clear" class="btn btn-primary m-b next_clear_button clear_back" style="margin-left: 10px" type="button">
                                                            </div>
                                                            <div style="clear:both"></div>
                                                        </div>
                                                    </nav>
                                                </div>
                                            </div>
                                        </div>

                                    }

                                    <div>
                                    </div>

                                


                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="~/scripts/CommonFunctions.js"></script>
<script language="javascript">

    $(document).ready(function () {

        $('.nav li.active ul').removeClass('in');
        $('.nav li').removeClass('active');
        $('.nav li.user').addClass('active');
        $('.nav li.active ul').addClass('in');
    });
    $(document).ready(function () {
        
        @if (ViewBag.UserIdForSendReq != null && ViewBag.UserIdForSendReq.Items.Count == 1)
      {
           <text> var ind =@ViewBag.UserIdForSendReq.Items[0].UserId;</text>
           <text> GetEmail(ind);</text>
      
        



      }
    });

</script>



<script src="~/scripts/CommonFunctions.js"></script>

<script>
    $('#btnCreateDealer').click(function(){
        checked = $("input[type=checkbox]:checked").length;

        if (!checked) {
            //alert("You must check at least one checkbox.");
            $('#checkBoxMessage span').text("please select at least one right.");
            e.preventDefault();
        }
    });
    function ViewDetails(rightId){
        //alert(rightId);
        var model = @Html.Raw(Json.Encode(Model));
        $('#PopupDiv').show();
        showPopup('Rpt');
        $('#textForPopup').text(model.ReportRightsList[rightId].name);
        $('#desLbl').text(model.ReportRightsList[rightId].description);

    };
    $('#JDUser').change(function () {
        var ind = $('#JDUser').val();
        if(ind>0){
            var url = "/CreateDealer/GetUserEmailByUserId/";
        $.ajax({
            url: url,
            data: { userId: ind },
            cache: false,
            type: "POST",
            success: function (data) {
                var email = data.NewEmail;
                if(email!=""){
                    $('#txtEmailForSendReq').val(email);
                }
                //else{
                //   // $('#DivEmailJD').hide();
                //}

            },
            error: function (jqXHR, textStatus, errorThrown) {
                // Your handler here...

                // if session expires
                if (jqXHR.status == "404") {
                    window.location.href = '/Login/UserLogin?lbl=Due to inactivity your session has timed out, please log in again.';
                }
            }
        });
        }

    });
    function GetEmail(ind) {
        if (ind > 0) {
            var url = "/CreateDealer/GetUserEmailByUserId/";
            $.ajax({
                url: url,
                data: { userId: ind },
                cache: false,
                type: "POST",
                success: function (data) {
                    var email = data.NewEmail;
                    if (email != "") {
                        $('#txtEmailForSendReq').val(email);
                    }
                    //else{
                    //   // $('#DivEmailJD').hide();
                    //}

                },
                error: function (jqXHR, textStatus, errorThrown) {
                    // Your handler here...

                    // if session expires
                    if (jqXHR.status == "404") {
                        window.location.href = '/Login/UserLogin?lbl=Due to inactivity your session has timed out, please log in again.';
                    }
                }
            });
        }
    };
    $("#clear").click(function () {
        document.getElementsByTagName("form")[0].reset();
        $(".text-danger").html("");
        $(".text-success").html("");
        //$('#txtUserName').next('span').children().text('');
        $('#txtUserName').closest("div").siblings('div').children("p").children("span").text("");
        $('#txtUserName').next("div").children("p").children("span").text("");
        $('#txtPassword').closest("div").siblings('div').children("p").children("span").text("");
        $('#txtPassword').next("div").children("p").children("span").text("");
        $('#txtConfirmPassword').closest("div").siblings('div').children("p").children("span").text("");
        $('#txtConfirmPassword').next("div").children("p").children("span").text("");
        $('#txtFirstName').closest("div").siblings('div').children("p").children("span").text("");
        $('#txtFirstName').next("div").children("p").children("span").text("");
        $('#txtLastName').closest("div").siblings('div').children("p").children("span").text("");
        $('#txtLastName').next("div").children("p").children("span").text("");
        $('#txtNewEmail').closest("div").siblings('div').children("p").children("span").text("");
        $('#txtNewEmail').next("div").children("p").children("span").text("");
        $('#txtEmailForSendReq').closest("div").siblings('div').children("p").children("span").text("");
        $('#txtEmailForSendReq').next("div").children("p").children("span").text("");
        $('#txtPhoneNumber').closest("div").siblings('div').children("p").children("span").text("");
        $('#txtPhoneNumber').next("div").children("p").children("span").text("");

        //clear check box values
        $('.All').prop('checked',false);
        $('#checkBoxMessage span').text("");
        $('#successSpn span').text("");
        $('#errSpn span').text("");


    });
</script>
@*<script>
    $(document).ready(function () {
        if(@ViewBag.UserIdForSendReq.Items.Count===1){
            var a = @ViewBag.UserIdForSendReq.Items[0].NewEmail;
            alert('gh');
            
        }
    });
</script>*@
<script type="text/javascript">

    // for input mask
   
    new InputMask().Initialize(document.querySelectorAll('#txtPhoneNumber'),
    {
        mask: InputMaskDefaultMask.Phone,
        placeHolder: "(___) ___-____"
    });

    $('#txtPhoneNumber').focusout(function (e) {


        $(this).attr("placeholder", "(___) ___-____");

    });


    //Validation

    // User name validate
    $('#txtUserName').keypress(function (e) {
        if (e.which != 8 && e.keyCode != 46 && e.keyCode != 9) {
            var code = e.which;
            if (this.value.length === 0 && (48 <= code && code <= 57)) {
                //$("#customError span[id^='spnUserName']").text("User name can't be start with numbers");
                this.focus();
                e.preventDefault();
                return;
            }

            var res = BlockText(e.which);
            if (res === 1) {
                //$("#customError span[id^='spnUserName']").text("Please use only letters (a-z) and numbers.");
                e.preventDefault();
                return;
            }
        }

    });

    // change to title case

    $('#txtFirstName, #txtLastName').blur(function (e) {
        //ToTitleCase(this.id, this.value);
        if (e.which !== 37 && e.which !== 8 && e.which !== 32)
            ToTitleCase(this.id, this.value);
    });


    //Check maximum length
    $('#txtUserName, #txtFirstName, #txtLastName, #txtPassword, #txtConfirmPassword').keypress(function (e) {
        if (e.which != 8 && e.keyCode != 46 && e.keyCode != 9) {
            var res = CheckMaxLenth(this, this.value, 30);
            if (res === 0) {
                e.preventDefault();
                return;
            }
        }

    });

    $('#txtPassword, #txtConfirmPassword').keypress(function (e) {
        if (e.which != 8 && e.keyCode != 46 && e.keyCode != 9) {
            if (this.value.length === 0 && e.which === 32) {
                e.preventDefault();
                return;
            }
            var array = ['`', '*', '&', '=', '|', ';', '"', '<', '>'];
            var res = InvalidCharacters(this, array, e.which);

            if (res === 1) {
                e.preventDefault();
                return;
            }
            else if (e.which === 92) {
                //$(this).siblings('div').children('span').text("Invalid character.");
                e.preventDefault();
                return;
            }
        }

    });

    //Check maximum length for email address and valid characters
    $('#txtNewEmail,#txtEmailForSendReq').keypress(function (e) {
        if (e.which != 8 && e.keyCode != 46 && e.keyCode != 9) {
            var res = CheckMaxLenth(this, this.value, 100);
            if (res === 0) {
                e.preventDefault();
                return;
            }

            var array = ['~', '`', '!', '#', '$', '%', '*', '(', ')', '+', '-', '/', '=', '?', '^', '{', '|', '}', '[', ']', ':', ';', '"', '<', '>', '', ' ', ','];
            res = InvalidCharacters(this, array, e.which);

            if (res === 1) {
                e.preventDefault();
                return;
            }
            else if (e.which === 92 || e.which === 39) {
                //$(this).siblings('div').children('span').text("Invalid character.");
                e.preventDefault();
                return;
            }
        }

    });

    $('#txtFirstName, #txtLastName').keypress(function (e) {
        if (e.which != 8 && e.keyCode != 46 && e.keyCode != 9) {
            //var array = [' ', '/', '`', '~', '!'];
            var array = ['~', '`', '!', '#', '$', '%', '&', '*', '(', ')', '+', '-', '/', '=', '?', '^', '{', '|', '}', '[', ']', ':', ';', '"', '<', '>', ''];
            var res = InvalidCharacters(this, array, e.which);

            if (res === 1) {
                e.preventDefault();
                return;
            }

            if (e.which === 92) {
                //$(this).siblings('div').children('span').text("Invalid character.");
                e.preventDefault();
                return;
            }
        }

    });

    $('#txtPhoneNumber').keypress(function (e) {
        if (e.which != 8 && e.keyCode != 46 && e.keyCode != 9) {
            var res = PhoneNumber(this, e.which);
            if (res === 0) {
                e.preventDefault();
                return;
            }

            res = CheckMaxLenth(this, this.value, 15);
            if (res === 0) {
                e.preventDefault();
                return;
            }
        }

    });

    $('#txtUserName').click(function () {
        clearTopMessages();
    });

    $('#txtPassword').click(function () {
        clearTopMessages();
    });

    $('#txtConfirmPassword').click(function () {
        clearTopMessages();
    });

    $('#txtFirstName').click(function () {
        clearTopMessages();
    });

    $('#txtLastName').click(function () {
        clearTopMessages();
    });

    $('#txtNewEmail').click(function () {
        clearTopMessages();
    });
    $('#txtEmailForSendReq').click(function () {
        clearTopMessages();
    });
    $('#txtPhoneNumber').click(function () {
        clearTopMessages();
    });

    function clearTopMessages() {
        //$(".text-danger").html("");
        //$(".text-success").html("");
        $('#successSpn span').text("");
        $('#errSpn span').text("");
    }
    $(function () {
        $('#CheckAll').on('change', function () {
            $('#checkBoxMessage span').text("");
            if ($(this).is(':checked')) {
                //alert('checked');
                $('#checkBoxMessage span').text("");
                $('.All').prop('checked', true);

            }
            else {
                //alert('unchecked');
                $('.All').prop('checked', false);
            }
        });
        //$('.All').on('change', function () {
        //    $('#checkBoxMessage span').text("");

        //});
    });
    $(function () {
        $('.All').on('change', function () {
            $('#checkBoxMessage span').text("");
            checkAll();
        });
    });
    function checkAll(){
        var model = @Html.Raw(Json.Encode(Model));
        var len = model.ReportRightsList.length;
        var count =0;
        for (var j = 0 ; j < model.ReportRightsList.length; j++){
            var str = '#'+(j+1);
            if ($(str).is(':checked')) {
                //alert('checked');
                count++;
            }
        }
        if( count === len){
            $('#CheckAll').prop('checked', true);
        }
        
        else{
            $('#CheckAll').prop('checked', false);
        }
        $('#successSpn span').text("");
        $('#errSpn span').text("");
    };
</script>

<div id="PopupDiv">
    <div class="overlay-bg">
    </div>
    <div class="overlay-content popupRpt" style="width:auto;text-align:center;margin-left: -160px;">
        <h3 id="textForPopup"></h3>
        <div style="padding:10px;">
            <label>Description</label>
        </div>
        <div style="padding:10px;">
            <label id="desLbl"></label>
        </div>
        <div style="padding:10px;">
            <label>Example</label>
        </div>
        <div style="padding: 10px;">
            <img src="@Url.Content("../Reports/SampleReports/AdvanceFeeInv.JPG")" onclick="window.open(this.src)" alt="Image" style="max-width: 1500px;max-height: 500px;width:1225px" /><p>AdvanceFeeInv.JPG</p>@Html.ActionLink("download", "Download", new { imagePath = "../Reports/SampleReports/AdvanceFeeInv.JPG" })
        </div>
        <button class="close-btn btn btn-info" style="margin-left: 1161px;">Close</button>
    </div>

</div>

<script>

    // function to show our popups
    function showPopup(whichpopup) {
        var docHeight = $(document).height(); //grab the height of the page
        var scrollTop = $(window).scrollTop(); //grab the px value from the top of the page to where you're scrolling
        $('.overlay-bg').show().css({ 'height': docHeight }); //display your popup background and set height to the page height
        $('.popup' + whichpopup).show().css({ 'top': scrollTop + 20 + 'px' }); //show the appropriate popup and set the content 20px from the window top
    }

    // function to close our popups
    function closePopup() {
        $('.overlay-bg, .overlay-content').hide(); //hide the overlay
    }

    // timer if we want to show a popup after a few seconds.
    //get rid of this if you don't want a popup to show up automatically
    // setTimeout(function() {
    // Show popup3 after 2 seconds
    //    showPopup(3);
    // }, 2000);


    // show popup when you click on the link
    $('.show-popup').click(function (event) {
        //event.preventDefault(); // disable normal link function so that it doesn't refresh the page
        var selectedPopup = $(this).data('showpopup'); //get the corresponding popup to show

        showPopup(selectedPopup); //we'll pass in the popup number to our showPopup() function to show which popup we want
    });

    // hide popup when user clicks on close button or if user clicks anywhere outside the container
    $('.close-btn, .overlay-bg').click(function () {
        closePopup();
    });

    // hide the popup when user presses the esc key
    $(document).keyup(function (e) {
        if (e.keyCode == 27) { // if user presses esc key
            closePopup();
        }
    });



</script>