@model BankLoanSystem.Models.CompanyBranchModel
@{
    ViewBag.Title = "Create Branch";
    if (ViewBag.AjaxRequest == null)
    {
        Layout = "~/Views/Shared/_DashBoardLayout.cshtml";
    }    
}

<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
@section AddToHead{
<style>
    .body-content {
        float: unset;
        width: unset;
        margin: unset;
    }

    .err_msg_box {
        text-align: left;
    }

    #page-wrapper {
        min-height: 568px;
        padding: 0 36px;
        float: unset !important;
        /* position: relative !important; */
        margin: auto !important;
    }
</style>}

    <div id="page-wrapper" class="gray-bg sidebar-content companySetupWrapper companysetup_border">
        <div class="ibox float-e-margins">
            <div class="ibox-title">
                <div class="container body-content">

                    <div class="row">
                        <div class="container body-content new_container">
                           
                            <div style="clear:both;"></div>
                            @if (ViewBag.SuccessMsg != null && ViewBag.SuccessMsg.ToString().Equals("Branch Successfully Created"))
                            {

                            <span id="successSpn" class="text-success">@ViewBag.SuccessMsg</span>
                            }

                            else if (ViewBag.ErrorMsg != null && ViewBag.ErrorMsg.ToString().Equals("Failed To Create Branch"))
                            {

                            <span id="errSpn" class="text-danger">@ViewBag.ErrorMsg</span>
                            }

                            @using (Html.BeginForm("CreateDashboardBranch", "UserManagement", FormMethod.Post, new { @id = "form" }))
                            {
                            @Html.AntiForgeryToken()

                            <div class="form-horizontal new_form_horizontal">
                                <div class="topErrors">
                                    <p class="err_msg">@Html.ValidationSummary(true, "", new { @class = "text-danger" })</p>
                                    <div class="text-danger">@ViewBag.Error</div>
                                </div>
                               
                                <div class="form-horizontal">
                                    
                                    <div class="form-group new_form_group">
                                        <div class="control-label col-sm-2 lable_style">
                                            <label>Name</label>
                                        </div>
                                        <div class="col-xs-8 text_field">
                                            @Html.EditorFor(model => model.MainBranch.BranchName, new { htmlAttributes = new { @class = "form-control text-box single-line text_field_input first_letter_capital", @id = "branchName" } })
                                        </div>
                                        <div class="err_msg_box">
                                            <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.MainBranch.BranchName, "", new { @class = "text-danger" })</p>
                                        </div>
                                    </div>
                                    <div class="form-group new_form_group">
                                        <div class="control-label col-sm-2 lable_style">
                                            <label>Street Address 1</label>
                                        </div>
                                        <div class="col-xs-8 text_field">
                                            @Html.EditorFor(model => model.MainBranch.BranchAddress1, new { htmlAttributes = new { @class = "form-control text-box single-line text_field_input first_letter_capital", @id = "branchAddress1" } })
                                        </div>
                                        <div class="err_msg_box">
                                            <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.MainBranch.BranchAddress1, "", new { @class = "text-danger" })</p>
                                        </div>
                                    </div>
                                    <div class="form-group new_form_group">
                                        <div class="control-label col-sm-2 lable_style">
                                            <label>
                                                Street Address 2<br>
                                                <span class="optional">(Optional)</span>
                                            </label>
                                        </div>
                                        <div class="col-xs-8 text_field">
                                            @Html.EditorFor(model => model.MainBranch.BranchAddress2, new { htmlAttributes = new { @class = "form-control text-box single-line text_field_input first_letter_capital", @id = "branchAddress2" } })
                                        </div>
                                        <div class="err_msg_box">
                                            <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.MainBranch.BranchAddress2, "", new { @class = "text-danger" })</p>
                                        </div>
                                    </div>
                                    <div class="form-group new_form_group">
                                        <div class="control-label col-sm-2 lable_style">
                                            <label>City</label>
                                        </div>
                                        <div class="col-xs-8 text_field short_text_field">
                                            @Html.EditorFor(model => model.MainBranch.BranchCity, new { htmlAttributes = new { @class = "form-control text-box single-line text_field_input first_letter_capital", @id = "branchCity" } })
                                        </div>
                                        <div class="err_msg_box">
                                            <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.MainBranch.BranchCity, "", new { @class = "text-danger" })</p>
                                        </div>
                                    </div>
                                    <div class="form-group new_form_group">
                                        <div class="control-label col-sm-2 lable_style">
                                            <label>State</label>
                                        </div>
                                        <div class="col-xs-8 text_field short_text_field">
                                            @Html.DropDownListFor(model => model.StateId, null, "--Select State--", htmlAttributes: new { @class = "form-control text_field_input", id = "StateId" })
                                        </div>
                                        <div class="err_msg_box">
                                            <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.StateId, "", new { @class = "text-danger" })</p>
                                        </div>
                                    </div>
                                    <div class="form-group new_form_group">
                                        <div class="control-label col-sm-2 lable_style">
                                            <label>Zip Code</label>
                                        </div>
                                        <div class="col-xs-4 text_field new_zip">
                                            @Html.EditorFor(model => model.MainBranch.ZipPre, new { htmlAttributes = new { @class = "form-control text-box single-line text_field_input", @id = "branchZipPre", placeholder = "Zip Code", style = "width: 80px;" } })
                                        </div>
                                        <span class="glyphicons glyphicon-minus" style="float:left;margin-top:6px;margin-left:-5px;margin-right:5px;"></span>
                                        <div class="col-xs-4 text_field new_zip">
                                            @Html.EditorFor(model => model.MainBranch.Extention, new { htmlAttributes = new { @class = "form-control text-box single-line text_field_input", @id = "branchZipExten", placeholder = "Extension", style = "width: 83px;" } })
                                        </div>
                                        <div class="err_msg_box">
                                            <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.MainBranch.ZipPre, "", new { @class = "text-danger" }) &nbsp;&nbsp;@Html.ValidationMessageFor(model => model.MainBranch.Extention, "", new { @class = "text-danger" }) </p>
                                        </div>
                                    </div>
                                    <div class="form-group new_form_group">
                                        <div class="control-label col-sm-2 lable_style">
                                            <label>
                                                Email<br>
                                                <span class="optional">(Optional)</span>
                                            </label>
                                        </div>
                                        <div class="col-xs-8 text_field">
                                            @Html.EditorFor(model => model.MainBranch.BranchEmail, new { htmlAttributes = new { @class = "form-control text-box single-line text_field_input", @id = "branchEmail" } })
                                        </div>
                                        <div class="err_msg_box">
                                            <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.MainBranch.BranchEmail, "", new { @class = "text-danger" })</p>
                                        </div>
                                    </div>
                                    <div class="form-group new_form_group">
                                        <div class="control-label col-sm-2 lable_style">
                                            <label>Phone Number 1</label>
                                        </div>
                                        <div class="col-xs-8 text_field short_text_field">
                                            @Html.EditorFor(model => model.MainBranch.BranchPhoneNum1, new { htmlAttributes = new { @class = "form-control text-box single-line text_field_input", @id = "branchPhoneNum1" } })

                                        </div>
                                        <div class="err_msg_box">
                                            <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.MainBranch.BranchPhoneNum1, "", new { @class = "text-danger" })</p>
                                        </div>
                                    </div>
                                    <div class="form-group new_form_group">
                                        <div class="control-label col-sm-2 lable_style">
                                            <label>
                                                Phone Number 2<br>
                                                <span class="optional">(Optional)</span>
                                            </label>
                                        </div>
                                        <div class="col-xs-8 text_field short_text_field">
                                            @Html.EditorFor(model => model.MainBranch.BranchPhoneNum2, new { htmlAttributes = new { @class = "form-control text-box single-line text_field_input", @id = "branchPhoneNum2" } })
                                        </div>
                                        <div class="err_msg_box">
                                            <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.MainBranch.BranchPhoneNum2, "", new { @class = "text-danger" })</p>
                                        </div>
                                    </div>
                                    <div class="form-group new_form_group">
                                        <div class="control-label col-sm-2 lable_style">
                                            <label>
                                                Phone Number 3<br>
                                                <span class="optional">(Optional)</span>
                                            </label>
                                        </div>
                                        <div class="col-xs-8 text_field short_text_field">
                                            @Html.EditorFor(model => model.MainBranch.BranchPhoneNum3, new { htmlAttributes = new { @class = "form-control text-box single-line text_field_input", @id = "branchPhoneNum3" } })
                                        </div>
                                        <div class="err_msg_box">
                                            <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.MainBranch.BranchPhoneNum3, "", new { @class = "text-danger" })</p>
                                        </div>
                                    </div>
                                    <div class="form-group new_form_group">
                                        <div class="control-label col-sm-2 lable_style">
                                            <label>
                                                Fax Number<br>
                                                <span class="optional">(Optional)</span>
                                            </label>
                                        </div>
                                        <div class="col-xs-8 text_field short_text_field">
                                            @Html.EditorFor(model => model.MainBranch.BranchFax, new { htmlAttributes = new { @class = "form-control text-box single-line text_field_input", @id = "branchFax" } })
                                        </div>
                                        <div class="err_msg_box">
                                            <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.MainBranch.BranchFax, "", new { @class = "text-danger" })</p>
                                        </div>
                                    </div>
                                    <div class="form-group new_form_group clear_next">
                                        <div>
                                            <nav>
                                                <div class="pager new_pager">
                                                    <div class="button_box algn_left">
                                                        <input value="Dashboard" name="subBack" id="btnPreStep3" class="btn btn-primary m-b cancel next_clear_button back_back" style="margin-left: 10px" type="button" onclick="window.location.href='/UserManagement/UserDetails'">
                                                    </div>
                                                    <div class="button_box algn_center">
                                                        <input id="btnNext" value="Create" class="btn btn-primary m-b next_clear_button next_back" style="margin-left: 10px" type="submit">
                                                    </div>
                                                    <div class="button_box algn_right">
                                                        <input id="clear" value="Clear" class="btn btn-primary m-b next_clear_button clear_back" style="margin-left: 10px" type="button">
                                                    </div>
                                                    <div style="clear:both"></div>
                                                </div>
                                            </nav>
                                        </div>
                                    </div>

                                </div>
                            </div>

                            }


                        </div>
                    </div>


                </div>
            </div>
        </div>
    </div>

<script src="~/scripts/CommonFunctions.js"></script>
<script>

    // Capitalize first letter
    $('#branchName, #branchAddress1, #branchAddress2, #branchCity').blur(function (e) {

            ToTitleCase(this.id, this.value);
    });


    $('#branchAddress1, #branchAddress2').keypress(function (e) {
        var res = CheckMaxLenth(this, this.value, 50);
        if (res === 0) {
            e.preventDefault();
            return;
        }

        var array = ['~', '`', '!', '#', '$', '%', '*', '(', ')', '+', '=', '?', '^', '{', '|', '}', '[', ']', ':', ';', '"', '<', '>'];
        res = InvalidCharacters(this, array, e.which);

        if (res === 1) {
            e.preventDefault();
            return;
        }
        else if (e.which === 92) {
            //$(this).siblings('div').children('span').text("Invalid character.");
            e.preventDefault();
            return;
        }
    });
    //Check maximum length
    $('#branchName, #branchAddress1, #branchAddress2, #branchCity').keypress(function (e) {
        var res = CheckMaxLenth(this, this.value, 50);
        if (res === 0) {
            e.preventDefault();
            return;
        }

        var array = ['~', '`', '!', '#', '$', '%', '*', '(', ')', '+', '/', '=', '?', '^', '{', '|', '}', '[', ']', ':', ';', '"', '<', '>'];
        res = InvalidCharacters(this, array, e.which);

        if (res === 1) {
            e.preventDefault();
            return;
        }
        else if (e.which === 92) {
            //$(this).siblings('div').children('span').text("Invalid character.");
            e.preventDefault();
            return;
        }
    });
    //Check maximum Email
    $('#branchEmail').keypress(function (e) {
        var res = CheckMaxLenth(this, this.value, 100);
        if (res === 0) {
            e.preventDefault();
            return;
        }

        var array = ['~', '`','&', '!', '#', '$', '%', '*', '(', ')', '+', '-', '/', '=', '?', '^', '{', '|', '}', '[', ']', ':', ';', '"', '<', '>', '', ' ', ','];
        res = InvalidCharacters(this, array, e.which);

        if (res === 1) {
            e.preventDefault();
            return;
        }
        else if (e.which === 92 || e.which === 39) {
            //$(this).siblings('div').children('span').text("Invalid character.");
            e.preventDefault();
            return;
        }
    });
    //Check maximum PhoneNumbers
    $('#branchPhoneNum1,#branchPhoneNum2,#branchPhoneNum3,#branchFax').keypress(function (e) {
        var res = CheckMaxLenth(this, this.value, 15);
        if (res === 0) {
            e.preventDefault();
            return;
        }
        res = PhoneNumber(this, e.which);
        if (res === 0) {
            e.preventDefault();
            return;
        }
    });

    //Check maximum ZipExtension
    $('#branchZipExten').keypress(function (e) {
        var res = CheckMaxLenth(this, this.value, 4);
        if (res === 0) {
            e.preventDefault();
            return;
        }

        res = AllowNumbers(this, e.which);
        if (res === 0) {
            e.preventDefault();
            return;
        }
    });
    //Check maximum ZipCode
    $('#branchZipPre').keypress(function (e) {
        var res = CheckMaxLenth(this, this.value, 4);
        if (res === 0) {
            $("#branchZipExten").focus();
        }
        res = AllowNumbers(this, e.which);
        if (res === 0) {
            e.preventDefault();
            return;
        }
    });
</script>
<script type="text/javascript">
    $(function () {
        $(document).ready(function () {
            var c = $('#branchTable').children('tbody').children('tr').length;
            if(c>0){
                $('#branchDiv').hide();
            }
            else{
                $('#branchDiv').show();
            }
           // $('#branchDiv').hide();
        });
        $('#Previous').on('change', function () {
            $('input').parent('div').siblings('div').children('p').children("span").text("");
            $('select').parent('div').siblings('div').children('p').children("span").text("");
            $('.input-validation-error').removeClass('input-validation-error');
            //text-danger field-validation-valid
            if ($(this).is(':checked')) {
                var model = @Html.Raw(Json.Encode(Model));
                document.getElementById("branchName").value = model.Company.CompanyName;
                document.getElementById("branchAddress1").value = model.Company.CompanyAddress1;
                document.getElementById("branchAddress2").value = model.Company.CompanyAddress2;
                document.getElementById("StateId").value = model.Company.StateId;
                document.getElementById("branchCity").value = model.Company.City;
                document.getElementById("branchZipPre").value = model.Company.ZipPre;
                document.getElementById("branchZipExten").value = model.Company.Extension;
                document.getElementById("branchEmail").value = model.Company.Email;
                document.getElementById("branchPhoneNum1").value = model.Company.PhoneNum1;
                document.getElementById("branchPhoneNum2").value = model.Company.PhoneNum2;
                document.getElementById("branchPhoneNum3").value = model.Company.PhoneNum3;
                document.getElementById("branchFax").value = model.Company.Fax;
            }
            else {
                document.getElementById("branchName").value = "";
                document.getElementById("branchAddress1").value = "";
                document.getElementById("branchAddress2").value = "";
                document.getElementById("StateId").value = "";
                document.getElementById("branchCity").value = "";
                document.getElementById("branchZipPre").value = "";
                document.getElementById("branchZipExten").value = "";
                document.getElementById("branchEmail").value = "";
                document.getElementById("branchPhoneNum1").value = "";
                document.getElementById("branchPhoneNum2").value = "";
                document.getElementById("branchPhoneNum3").value = "";
                document.getElementById("branchFax").value = "";
            }
        });
    });


    $('#clear').click(function () {
        if($('#btnNext').val() === "Update")
        {
            $('#btnNext').val('Next');
        }
        document.getElementsByTagName("form")[0].reset();
        $('#lnkCreateNewBranch').hide();
    });

</script>

<script type="text/javascript">
    $(function () {
        $('#btnPreStep2').click(function () {

            $('#loadingDiv').show();
            $.ajax({
                url: '@Url.Action("step1", "SetupProcess")',
                type: 'GET',
                data: { edit: 1},

                success: function (partialView) {
                    $('#loadingDiv').hide();
                    $('#changeContainer').html(partialView);
                    $('#changeContainer').show();

                },
                error: function (request, status, error) {
                    handleErrorMsg(request.responseText);

                }
            });
        });
    });

    $('#branchZipPre').focusout(function () {
        $(this).attr('placeholder', 'Zip Code');
    });
    $('#branchZipExten').focusout(function () {
        $(this).attr('placeholder', 'Extension');
    });
</script>


