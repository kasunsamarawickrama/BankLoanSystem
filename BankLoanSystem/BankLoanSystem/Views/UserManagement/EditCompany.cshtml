@model BankLoanSystem.Models.Company


@{
    ViewBag.Title = "Edit Company";
    if (ViewBag.AjaxRequest == null)
    {
        Layout = "~/Views/Shared/_DashBoardLayout.cshtml";
    }
}

<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js?version=@((new Random()).Next(1,10000))."></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js?version=@((new Random()).Next(1,10000))."></script>

<script src="~/scripts/jquery.unobtrusive-ajax.min.js"></script>
<script src="~/scripts/CommonFunctions.js"></script>

@section AddToHead{
    <style>
        .body-content {
            float: none;
            width: auto;
            margin: 0;
        }

        .err_msg_box {
            text-align: left;
        }

        #page-wrapper {
            min-height: 568px;
            padding: 0 36px;
            float: none !important;
            /* position: relative !important; */
            margin: auto !important;
        }
    </style>}

<script src="~/scripts/jquery-1.10.2.min.js"></script>
<div id="page-wrapper" class="gray-bg sidebar-content companySetupWrapper usersetup_border">
    <div class="ibox float-e-margins">
        <div class="ibox-title">
            <div class="container body-content">

                <div class="row">
                    <div class="container body-content new_container">

                        <div style="clear:both;"></div>
                        <div class="form-horizontal new_form_horizontal">

                            <div class="topErrors">
                                <p class="err_msg">@Html.ValidationSummary(true, "", new { @class = "text-danger" })</p>
                                <div class="text-danger">@ViewBag.Error</div>
                            </div>

                            <div class="form-horizontal">

                                <div style="clear:both"></div>
                                @if (ViewBag.SuccessMsg != null && ViewBag.SuccessMsg.ToString().Equals("Company is updated successfully"))
                                {
                                    <div id="successSpn" class="text-success"><span>@ViewBag.SuccessMsg</span></div>


                                }

                                else if (ViewBag.ErrorMsg != null && ViewBag.ErrorMsg.ToString().Equals("Failed to update company"))
                                {
                                    <div id="errorSpn" class="text-danger"><span>@ViewBag.ErrorMsg</span></div>

                                }

                                @using (Html.BeginForm("EditCompany", "UserManagement", FormMethod.Post, new { @id = "form" }))
                                {

                                    @Html.AntiForgeryToken()

                                    <div class="form-horizontal">

                                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    
                                        <div class="form-group new_form_group">
                                            <div class="control-label col-sm-2 lable_style">
                                                <label>Company Name</label>
                                            </div>
                                            <div class="col-xs-8 text_field">
                                                @Html.HiddenFor(model=>model.CompanyId)
                                                @Html.EditorFor(model => model.CompanyName, new { htmlAttributes = new { @class = "form-control text-box single-line text_field_input first_letter_capital", @id = "txtCompanyName",@style="width:100%" } })
                                            </div>
                                            <div class="err_msg_box">
                                                <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.CompanyName, "", new { @class = "text-danger", @id = "RoleIdValidate" })</p>
                                            </div>
                                        </div>
                                        <div class="form-group new_form_group">
                                            <div class="control-label col-sm-2 lable_style">
                                                <label>Street Address 1</label>
                                            </div>
                                            <div class="col-xs-8 text_field">
                                                @Html.EditorFor(model => model.CompanyAddress1, new { htmlAttributes = new { @class = "form-control text-box single-line text_field_input first_letter_capital", @id = "txtCompanyAddress1", @style = "width:100%" } })
                                            </div>
                                            <div class="err_msg_box">
                                                <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.CompanyAddress1, "", new { @class = "text-danger" })</p>
                                            </div>
                                        </div>
                                        <div class="form-group new_form_group">
                                            <div class="control-label col-sm-2 lable_style">
                                                <label>Street Address 2<br><span class="optional">(Optional)</span></label>
                                            </div>
                                            <div class="col-xs-8 text_field">
                                                @Html.EditorFor(model => model.CompanyAddress2, new { htmlAttributes = new { @class = "form-control text-box single-line text_field_input first_letter_capital", @id = "txtCompanyAddress2", @style = "width:100%" } })
                                            </div>
                                            <div class="err_msg_box">
                                                <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.CompanyAddress2, "", new { @class = "text-danger" })</p>
                                            </div>
                                        </div>
                                        <div class="form-group new_form_group">
                                            <div class="control-label col-sm-2 lable_style">
                                                <label>City</label>
                                            </div>
                                            <div class="col-xs-8 text_field short_text_field">
                                                @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control text-box single-line text_field_input first_letter_capital", @id = "txtCity" } })
                                            </div>
                                            <div class="err_msg_box">
                                                <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })</p>
                                            </div>
                                        </div>
                                        <div class="form-group new_form_group">
                                            <div class="control-label col-sm-2 lable_style">
                                                <label>State</label>
                                            </div>
                                            <div class="col-xs-8 text_field short_text_field">
                                                @Html.DropDownListFor(model => model.StateId, null, "--Select State--", htmlAttributes: new { @class = "form-control text-box single-line text_field_input", id = "StateId" })
                                            </div>
                                            <div class="err_msg_box">
                                                <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.StateId, "", new { @class = "text-danger" })</p>
                                            </div>
                                        </div>
                                        <div class="form-group new_form_group">
                                            <div class="control-label col-sm-2 lable_style">
                                                <label>Zip Code</label>
                                            </div>
                                            <div class="col-xs-4 text_field new_zip">
                                                @Html.EditorFor(model => model.ZipPre, new { htmlAttributes = new { @class = "form-control text-box single-line text_field_input", placeholder = "Zip Code", @id = "txtZipPre", style = "width: 80px;" , maxlength=5 } })
                                            </div>
                                            <span class="glyphicons glyphicon-minus" style="float:left;margin-top:6px;margin-left:-5px;margin-right:5px;"></span>
                                            <div class="col-xs-4 text_field new_zip">
                                                @Html.EditorFor(model => model.Extension, new { htmlAttributes = new { @class = "form-control text-box single-line text_field_input", placeholder = "Extension", @id = "txtExtension", style = "width: 83px;" , maxlength = 4 } })
                                            </div>
                                            <div class="err_msg_box">
                                                <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.ZipPre, "", new { @class = "text-danger" }) &nbsp;&nbsp;@Html.ValidationMessageFor(model => model.Extension, "", new { @class = "text-danger" })</p>
                                            </div>
                                        </div>
                                        <div class="form-group new_form_group">
                                            <div class="control-label col-sm-2 lable_style">
                                                <label for="PhoneNum1">Phone Number 1</label>
                                            </div>
                                            <div class="col-xs-8 text_field short_text_field">
                                                @Html.EditorFor(model => model.PhoneNum1, new { htmlAttributes = new { @class = "form-control text-box single-line text_field_input", @id = "txtPhoneNum1" } })
                                            </div>
                                            <div class="err_msg_box">
                                                <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.PhoneNum1, "", new { @class = "text-danger" })</p>
                                            </div>
                                        </div>
                                        <div class="form-group new_form_group">
                                            <div class="control-label col-sm-2 lable_style">
                                                <label for="PhoneNum2">
                                                    Phone Number 2<br>
                                                    <span class="optional">(Optional)</span>
                                                </label>
                                            </div>
                                            <div class="col-xs-8 text_field short_text_field">
                                                @Html.EditorFor(model => model.PhoneNum2, new { htmlAttributes = new { @class = "form-control text-box single-line text_field_input", @id = "txtPhoneNum2" } })
                                            </div>
                                            <div class="err_msg_box">
                                                <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.PhoneNum2, "", new { @class = "text-danger" })</p>
                                            </div>
                                        </div>
                                        <div class="form-group new_form_group">
                                            <div class="control-label col-sm-2 lable_style">
                                                <label for="PhoneNum3">
                                                    Phone Number 3<br>
                                                    <span class="optional">(Optional)</span>
                                                </label>
                                            </div>
                                            <div class="col-xs-8 text_field short_text_field">
                                                @Html.EditorFor(model => model.PhoneNum3, new { htmlAttributes = new { @class = "form-control text-box single-line text_field_input", @id = "txtPhoneNum3" } })
                                            </div>
                                            <div class="err_msg_box">
                                                <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.PhoneNum3, "", new { @class = "text-danger" })</p>
                                            </div>
                                        </div>
                                        <div class="form-group new_form_group">
                                            <div class="control-label col-sm-2 lable_style">
                                                <label for="Fax">
                                                    Fax Number <br>
                                                    <span class="optional">(Optional)</span>
                                                </label>
                                            </div>
                                            <div class="col-xs-8 text_field short_text_field">
                                                @Html.EditorFor(model => model.Fax, new { htmlAttributes = new { @class = "form-control text-box single-line text_field_input", @id = "txtFax" } })
                                            </div>
                                            <div class="err_msg_box">
                                                <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.Fax, "", new { @class = "text-danger" })</p>
                                            </div>
                                        </div>
                                        
                                        <div class="form-group new_form_group">
                                            <div class="control-label col-sm-2 lable_style">
                                                <label for="Email">
                                                    email <br>
                                                    <span class="optional">(Optional)</span>
                                                </label>
                                            </div>
                                            <div class="col-xs-8 text_field">
                                                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control text-box single-line text_field_input", @id = "txtEmail",@style = "width:100%" } })
                                            </div>
                                            <div class="err_msg_box">
                                                <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })</p>
                                            </div>
                                        </div>
                                        <div class="form-group new_form_group">
                                            <div class="control-label col-sm-2 lable_style">
                                                <label for="WebsiteUrl">
                                                    Website<br>
                                                    <span class="optional">(Optional)</span>
                                                </label>
                                            </div>
                                            <div class="col-xs-8 text_field">
                                                @Html.EditorFor(model => model.WebsiteUrl, new { htmlAttributes = new { @class = "form-control text-box single-line text_field_input", @id = "txtWebsiteUrl", @style = "width:100%" } })
                                            </div>
                                            <div class="err_msg_box">
                                                <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.WebsiteUrl, "", new { @class = "text-danger" })</p>
                                            </div>
                                        </div>
                             
                                        <div class="form-group new_form_group clear_next clear_next_bordr">
                                            <div>
                                                <nav>
                                                    <div class="pager new_pager">
                                                        <div class="button_box algn_left">
                                                            <input value="Dashboard" name="subBack" id="btnDashbrd" class="btn btn-primary m-b cancel next_clear_button back_back" style="margin-left: 10px" type="button" onclick="window.location.href='/UserManagement/UserDetails'">
                                                        </div>
                                                        <div class="button_box algn_right" style="margin-right:25px;float:right" >
                                                            <input value="Update" class="btn btn-primary m-b next_clear_button next_back" type="submit" id="btnUpdateCompany">
                                                        </div>
                                                        @*<div class="button_box algn_right">
                                                            <input id="btnClear" value="Clear" class="btn btn-primary m-b next_clear_button clear_back" style="margin-left: 10px" type="button">
                                                        </div>*@
                                                        <div style="clear:both"></div>
                                                    </div>
                                                </nav>
                                            </div>
                                        </div>
                                    </div>

                                }

                                <div>
                                </div>




                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>

    // for input mask

    new InputMask().Initialize(document.querySelectorAll("#txtPhoneNum1,#txtPhoneNum2, #txtPhoneNum3"),
    {
        mask: InputMaskDefaultMask.Phone,
        placeHolder: "(___) ___-____"
    });

    $("#txtPhoneNum1,#txtPhoneNum2, #txtPhoneNum3").focusout(function (e) {


        $(this).attr("placeholder", "(___) ___-____");

    });



    $("input[type=text]").click(function () {

        $('#successSpn').text("");
        $('#errorSpn').text("");

    });
    $('#StateId').change(function () {

        $('#successSpn').text("");
        $('#errorSpn').text("");
    });

    $('#btnClear').click(function () {
        //alert($('#txtCompanyName').val());
        //document.getElementsByTagName("form")[0].reset();
        $('#successSpn').text("");
        $('#errorSpn').text("");
        $('#txtCompanyName').val('');
        $('#txtCompanyAddress1').val('');
        $('#txtCompanyAddress2').val('');
        $('#txtCity').val('');
        $('#txtZipPre').val('');
        $('#txtExtension').val('');
        $('#txtEmail').val('');
        $('#txtPhoneNum1').val('');
        $('#txtPhoneNum2').val('');
        $('#txtPhoneNum3').val('');
        $('#txtFax').val('');
        $('#txtWebsiteUrl').val('');
        $('#StateId').val('');

        $('#txtCompanyName').closest("div").siblings('div').children("p").children("span").text("");
        $('#txtCompanyName').next("div").children("p").children("span").text("");
        $('#txtCompanyName').removeClass('input-validation-error');
        $('#txtCompanyAddress1').closest("div").siblings('div').children("p").children("span").text("");
        $('#txtCompanyAddress1').next("div").children("p").children("span").text("");
        $('#txtCompanyAddress1').removeClass('input-validation-error');
        $('#txtCompanyAddress2').closest("div").siblings('div').children("p").children("span").text("");
        $('#txtCompanyAddress2').next("div").children("p").children("span").text("");
        $('#txtCompanyAddress2').removeClass('input-validation-error');
        $('#txtCity').closest("div").siblings('div').children("p").children("span").text("");
        $('#txtCity').next("div").children("p").children("span").text("");
        $('#txtCity').removeClass('input-validation-error');
        $('#txtZipPre').closest("div").siblings('div').children("p").children("span").text("");
        $('#txtZipPre').next("div").children("p").children("span").text("");
        $('#txtZipPre').removeClass('input-validation-error');
        $('#txtEmail').closest("div").siblings('div').children("p").children("span").text("");
        $('#txtEmail').next("div").children("p").children("span").text("");
        $('#txtEmail').removeClass('input-validation-error');
        $('#txtPhoneNum1').closest("div").siblings('div').children("p").children("span").text("");
        $('#txtPhoneNum1').next("div").children("p").children("span").text("");
        $('#txtPhoneNum1').removeClass('input-validation-error');
        $('#txtPhoneNum2').closest("div").siblings('div').children("p").children("span").text("");
        $('#txtPhoneNum2').next("div").children("p").children("span").text("");
        $('#txtPhoneNum2').removeClass('input-validation-error');
        $('#txtPhoneNum3').closest("div").siblings('div').children("p").children("span").text("");
        $('#txtPhoneNum3').next("div").children("p").children("span").text("");
        $('#txtPhoneNum3').removeClass('input-validation-error');
        $('#txtFax').closest("div").siblings('div').children("p").children("span").text("");
        $('#txtFax').next("div").children("p").children("span").text("");
        $('#txtFax').removeClass('input-validation-error');
        $('#txtWebsiteUrl').closest("div").siblings('div').children("p").children("span").text("");
        $('#txtWebsiteUrl').next("div").children("p").children("span").text("");
        $('#txtWebsiteUrl').removeClass('input-validation-error');
        $('#StateId').closest("div").siblings('div').children("p").children("span").text("");
        $('#StateId').next("div").children("p").children("span").text("");
        $('#StateId').removeClass('input-validation-error');
    });

    //$(".tab.1").parent("li").addClass("active").siblings().removeClass('active');


    // change to title case

    $('#txtCompanyAddress1, #txtCompanyAddress2, #txtCity , #txtCompanyName').blur(function (e) {

        ToTitleCase(this.id, this.value);
    });



    $('#txtCompanyAddress1, #txtCompanyAddress2').keypress(function (e) {
        if (e.which !== 8 && e.which !== 0) {
            var res = CheckMaxLenth(this, this.value, 50);
            if (res === 0) {
                e.preventDefault();
                return;
            }
        }
        var array = ['~', '`', '!', '#', '$', '%', '*', '(', ')', '+', '=', '?', '^', '{', '|', '}', '[', ']', ':', ';', '"', '<', '>'];
        res = InvalidCharacters(this, array, e.which);

        if (res === 1) {
            e.preventDefault();
            return;
        }
        else if (e.which === 92) {
            //$(this).siblings('div').children('span').text("Invalid character.");
            e.preventDefault();
            return;
        }
    });
    //Check maximum length
    $('#txtCompanyName').keypress(function (e) {
        //alert(e.which);
        if (e.which !== 8 && e.which !== 0)
        {            
            var res = CheckMaxLenth(this, this.value, 50);
            if (res === 0) {
                e.preventDefault();
                return;
            }
        }

        

        var array = ['~', '`', '!', '#', '$', '%', '*','+', '/', '=', '?', '^', '{', '|', '}', '[', ']', ':', ';', '"', '<', '>', '@@', '.'];
        res = InvalidCharacters(this, array, e.which);

        if (res === 1) {
            e.preventDefault();
            return;
        }
        else if (e.which === 92) {
            //$(this).siblings('div').children('span').text("Invalid character.");
            e.preventDefault();
            return;
        }
    });
    $(' #txtCity').keypress(function (e) {
        //alert(e.which);
        if (e.which !== 8 && e.which !== 0) {
            var res = CheckMaxLenth(this, this.value, 50);
            if (res === 0) {
                e.preventDefault();
                return;
            }
        }



        var array = ['~', '`', '!', '#', '$', '%', '*', '(', ')', '+', '/', '=', '?', '^', '{', '|', '}', '[', ']', ':', ';', '"', '<', '>', '@@', '.'];
        res = InvalidCharacters(this, array, e.which);

        if (res === 1) {
            e.preventDefault();
            return;
        }
        else if (e.which === 92) {
            //$(this).siblings('div').children('span').text("Invalid character.");
            e.preventDefault();
            return;
        }
    });
    //$('#txtWebsiteUrl').keypress(function (e) {
    //    //alert('CheckMaxLenth');
    //    //var res = CheckMaxLenth(this, this.value, 50);
    //    //if (res === 0) {
    //    //    e.preventDefault();
    //    //    return;
    //    //}

    //    var array = ['~', '`', '!', '#', '$', '%', '*', '(', ')', '+', '/', '=', '?', '^', '{', '|', '}', '[', ']', ':', ';', '"', '<', '>', '@@', '.'];
    //    res = InvalidCharacters(this, array, e.which);

    //    if (res === 1) {
    //        e.preventDefault();
    //        return;
    //    }
    //    else if (e.which === 92) {
    //        //$(this).siblings('div').children('span').text("Invalid character.");
    //        e.preventDefault();
    //        return;
    //    }
    //});
    $('#txtZipPre').keypress(function (e) {
        //alert(e.which);
        //var res = CheckMaxLenth(this, this.value, 4);
        //if (res === 0) {
        //    $("#txtExtension").focus();
        //}
        var res = AllowNumbers(this, e.which);
        if (res === 0) {
            e.preventDefault();
            return;
        }
    });

    $('#txtExtension').keypress(function (e) {

        if (e.which !== 8 && e.which !== 0) {
            var res = CheckMaxLenth(this, this.value, 4);
            if (res === 0) {
                e.preventDefault();
                return;
            }
        }
        res = AllowNumbers(this, e.which);
        if (res === 0) {
            e.preventDefault();
            return;
        }
    });



    //Check maximum length for email address and valid characters
    $('#txtEmail').keypress(function (e) {
        if (e.which !== 8 && e.which !== 0) {
            var res = CheckMaxLenth(this, this.value, 100);
            if (res === 0) {
                e.preventDefault();
                return;
            }
        }
        var array = ['~', '`', '!', '#', '$', '%', '*', '(', ')', '+', '-', '/', '=', '?', '^', '{', '|', '}', '[', ']', ':', ';', '"', '<', '>', '', ' ', ','];
        res = InvalidCharacters(this, array, e.which);

        if (res === 1) {
            e.preventDefault();
            return;
        }
        else if (e.which === 92 || e.which === 39) {
            //$(this).siblings('div').children('span').text("Invalid character.");
            e.preventDefault();
            return;
        }
    });

    $('#txtPhoneNum1, #txtPhoneNum2, #txtPhoneNum3').keypress(function (e) {
        var res = PhoneNumber(this, e.which);
        if (res === 0) {
            e.preventDefault();
            return;
        }
        if (e.which !== 8 && e.which !== 0) {
            res = CheckMaxLenth(this, this.value, 14);
            if (res === 0) {
                e.preventDefault();
                return;
            }
        }
    });

    $('#txtFax').keypress(function (e) {
        var res = PhoneNumber(this, e.which);
        if (res === 0) {
            e.preventDefault();
            return;
        }
        if (e.which !== 8 && e.which !== 0) {
            res = CheckMaxLenth(this, this.value, 15);
            if (res === 0) {
                e.preventDefault();
                return;
            }
        }
    });

    //$('#txtFirstName, #txtLastName').keypress(function (e) {
    //    //var array = [' ', '/', '`', '~', '!'];
    //    var array = ['~', '`', '!', '#', '$', '%', '*', '(', ')', '+', '-', '/', '=', '?', '^', '{', '|', '}', '[', ']', ':', ';', '"', '<', '>', ' '];
    //    var res = InvalidCharacters(this, array, e.which);

    //    if (res === 1) {
    //        e.preventDefault();
    //        return;
    //    }
    //});

    $('input').keypress(function (e) {
        var array = [' '];
        if (this.value.length === 0) {
            var res = InvalidCharacters(this, array, e.which);

            if (res === 1) {
                e.preventDefault();
                return;
            }
        }
    });

    $('input').prop('autocomplete', 'off');

    

    $('#txtZipPre').focusout(function () {
        $(this).attr('placeholder', 'Zip Code');
    });
    $('#txtExtension').focusout(function () {
        $(this).attr('placeholder', 'Extension');
    });
</script>