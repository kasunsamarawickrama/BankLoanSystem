@model BankLoanSystem.Models.Unit

@{
    ViewBag.Title = "Add Unit Page";
    Layout = "~/Views/Shared/_UnitAdvance.cshtml";
}

<style type="text/css">
    .validation-summary {
        display: none;
    }

        .validation-summary.validation-summary-errors {
            display: block;
        }

    .ui-state-default {
        background-color: white;
    }
</style>

<link href="~/Content/pikaday.css" rel="stylesheet" />
<link href="~/Content/theme.css" rel="stylesheet" />
<link href="~/Content/triangle.css" rel="stylesheet" />
<script src="~/scripts/pikaday.js"></script>
<script src="~/scripts/moment.js"></script>

<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>

<link rel="stylesheet" href="//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css">
<script src="//code.jquery.com/jquery-1.10.2.js"></script>
<script src="//code.jquery.com/ui/1.11.4/jquery-ui.js"></script>
<link rel="stylesheet" href="/resources/demos/style.css">

<link href="~/Content/combo.css" rel="stylesheet" />
<script src="~/scripts/combo.js"></script>

@using (Ajax.BeginForm("AddUnit", null, new AjaxOptions()
{

    OnFailure = "handleError",
    HttpMethod = "POST",
    InsertionMode = InsertionMode.Replace,
    UpdateTargetId = "changeContainer",
    LoadingElementId = "loadingDiv"
}, new { enctype = "multipart/form-data", id = "form" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "validation-summary" })

        @*UNIT MODEL START*@
        <div>
            <div class="form-group">
                @Html.LabelFor(model => model.UnitTypeId, htmlAttributes: new { @class = "control-label col-md-2" })
                @Html.HiddenFor(model => model.LoanId)
                <div class="col-md-10">
                    @{
                        List<SelectListItem> ListOfUnitTypes = new List<SelectListItem>();

                        var id = 0;
                        var name = "";
                        foreach (var type in ViewBag.loanDetails.selectedUnitTypes)
                        {

                            id = type.unitTypeId;
                            name = type.unitTypeName;

                            if (id == ViewBag.loanDetails.defaultUnitType)
                            {
                                ListOfUnitTypes.Add(new SelectListItem
                                {
                                    Value = id.ToString(),
                                    Text = name,
                                    Selected = true
                                });
                            }
                            else
                            {
                                ListOfUnitTypes.Add(new SelectListItem
                                {
                                    Value = id.ToString(),
                                    Text = name
                                });
                            }
                            id = 0;
                            name = "";
                        }
                    }
                    @if (ViewBag.loanDetails.selectedUnitTypes.Count == 1)
                {
                        @Html.DropDownListFor(model => model.UnitTypeId, ListOfUnitTypes, new { @id = "unitType", @class = "form-control col-sm-2", @Style = "width: 17%;", @disabled = "disabled" })
                    }
                    else
                    {
                        @Html.DropDownListFor(model => model.UnitTypeId, ListOfUnitTypes, new { @id = "unitType", @class = "form-control col-sm-2", @Style = "width: 17%;", onChange = "changeUnitType();" })
                    }
                    @Html.ValidationMessageFor(model => model.UnitTypeId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="info-unit" id="vehicle">
                <div class="form-group">
                    @Html.LabelFor(model => model.IdentificationNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-sm-4">
                        @Html.EditorFor(model => model.IdentificationNumber, new { htmlAttributes = new { @class = "form-control", @id = "vehicleVin" } })
                        @Html.ValidationMessageFor(model => model.IdentificationNumber, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Year, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.Year, new { htmlAttributes = new { @id = "editor1-1", @Style = "display: none;" } })
                    <div class="col-sm-4" id="div-combobox1-1">
                        @{
                            List<SelectListItem> yearlist = new List<SelectListItem>();
                            for (var i = @DateTime.Now.AddYears(+1).Year; i >= 1980; i--)
                            {
                                yearlist.Add(new SelectListItem { Text = i.ToString(), Value = i.ToString() });
                            }
                        }

                        @Html.DropDownList("year", yearlist, "-- select a date --", new { @class = "form-control", @id = "combobox1-1" })
                        @Html.ValidationMessageFor(model => model.Year, "", new { @class = "text-danger" })
                    </div>

                    @Html.LabelFor(model => model.Make, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.Make, new { htmlAttributes = new { @id = "editor1-2", @Style = "display: none;" } })
                    <div class="col-sm-2" onmouseover="GetMakes($('#combobox1-1'),'#combobox1-2');" id="div-combobox1-2">
                        <div>
                            @Html.DropDownListFor(model => model.Make, new SelectList(""), "-- select model make --", new { @class = "form-control", @id = "combobox1-2" })
                        </div>
                        @Html.ValidationMessageFor(model => model.Make, "", new { @class = "text-danger col-md-2" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Model, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.Model, new { htmlAttributes = new { @id = "editor1-3", @Style = "display: none;" } })
                    <div class="col-sm-4" onmouseover="GetModels($('#combobox1-1'),$('#combobox1-2'),'#combobox1-3');" id="div-combobox1-3">
                        <div>
                            @Html.DropDownListFor(model => model.Model, new SelectList(""), "-- select a model --", new { @class = "form-control", @id = "combobox1-3" })
                        </div>
                        @Html.ValidationMessageFor(model => model.Model, "", new { @class = "text-danger" })
                    </div>

                    @Html.LabelFor(model => model.Trim, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-sm-2">
                        @Html.EditorFor(model => model.Trim, new { htmlAttributes = new { @class = "form-control", @Style = "width: 223%;" } })
                        @Html.ValidationMessageFor(model => model.Trim, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Miles, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-sm-4">
                        @Html.EditorFor(model => model.Miles, new { htmlAttributes = new { @class = "form-control", @id = "miles1", @Style = "width: 98%;" } })
                        @Html.ValidationMessageFor(model => model.Miles, "", new { @class = "text-danger" })
                    </div>

                    @Html.LabelFor(model => model.Color, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-sm-2">
                        @{
                            List<SelectListItem> Colourlist = new List<SelectListItem>();

                            Colourlist.Add(new SelectListItem
                            {
                                Text = "Black",
                                Value = "Black"
                            });
                            Colourlist.Add(new SelectListItem
                            {
                                Text = "Blue",
                                Value = "Blue"
                            });
                            Colourlist.Add(new SelectListItem
                            {
                                Text = "Brown",
                                Value = "Brown"
                            });
                            Colourlist.Add(new SelectListItem
                            {
                                Text = "Gray",
                                Value = "Gray"
                            });
                            Colourlist.Add(new SelectListItem
                            {
                                Text = "Green",
                                Value = "Green"
                            });
                            Colourlist.Add(new SelectListItem
                            {
                                Text = "Silver",
                                Value = "Silver"
                            });
                            Colourlist.Add(new SelectListItem
                            {
                                Text = "White",
                                Value = "White"
                            });
                            Colourlist.Add(new SelectListItem
                            {
                                Text = "Yellow",
                                Value = "Yellow"
                            });
                        }
                        @Html.DropDownListFor(model => model.Color, Colourlist, "-- select type --", new { @class = "form-control", @Style = "width: 223%;" })
                        @Html.ValidationMessageFor(model => model.Color, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.NewOrUsed, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-sm-4">
                        <div class="checkbox">
                            @Html.EditorFor(model => model.NewOrUsed)
                            @Html.ValidationMessageFor(model => model.NewOrUsed, "", new { @class = "text-danger", @Style = "margin-left: 0px;" })
                        </div>
                    </div>
                </div>

            </div>

            <div class="info-unit" id="rv">
                <div class="form-group">
                    @Html.LabelFor(model => model.IdentificationNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.IdentificationNumber, new { htmlAttributes = new { @class = "form-control", @id = "rvVin" } })
                        @Html.ValidationMessageFor(model => model.IdentificationNumber, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Year, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.Year, new { htmlAttributes = new { @id = "editor2-1", @Style = "display: none;" } })
                    <div class="col-md-10" id="div-combobox2-1">

                        @Html.DropDownListFor(model => model.Year, yearlist, "-- select a date --", new { @class = "form-control", @id = "combobox2-1" })
                        @Html.ValidationMessageFor(model => model.Year, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Make, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.Make, new { htmlAttributes = new { @id = "editor2-2", @Style = "display: none;" } })
                    <div class="col-md-10">
                        <div onmouseover="GetMakes($('#combobox2-1'),'#combobox2-2');" id="div-combobox2-2">
                            @Html.DropDownListFor(model => model.Make, new SelectList(""), "-- select model make --", new { @class = "form-control", @id = "combobox2-2" })
                        </div>
                        @Html.ValidationMessageFor(model => model.Make, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Model, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.Make, new { htmlAttributes = new { @id = "editor2-3", @Style = "display: none;" } })
                    <div class="col-md-10">
                        <div onmouseover="GetModels($('#combobox2-1'),$('#combobox2-2'),'#combobox2-3');" id="div-combobox2-3">
                            @Html.DropDownListFor(model => model.Model, new SelectList(""), "-- select a model --", new { @class = "form-control", @id = "combobox2-3" })
                        </div>
                        @Html.ValidationMessageFor(model => model.Model, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Miles, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Miles, new { htmlAttributes = new { @class = "form-control", @id = "miles2" } })
                        @Html.ValidationMessageFor(model => model.Miles, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Length, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Length, new { htmlAttributes = new { @class = "form-control", @id = "lenghth2" } })
                        @Html.ValidationMessageFor(model => model.Length, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.NewOrUsed, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <div class="checkbox">
                            @Html.EditorFor(model => model.NewOrUsed)
                            @Html.ValidationMessageFor(model => model.NewOrUsed, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>

            <div class="info-unit" id="camper">
                <div class="form-group">
                    @Html.LabelFor(model => model.IdentificationNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.IdentificationNumber, new { htmlAttributes = new { @class = "form-control", @id = "camperVin" } })
                        @Html.ValidationMessageFor(model => model.IdentificationNumber, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Year, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.Year, new { htmlAttributes = new { @id = "editor3-1", @Style = "display: none;" } })
                    <div class="col-md-10" id="div-combobox3-1">

                        @Html.DropDownListFor(model => model.Year, yearlist, "-- select a date --", new { @class = "form-control", @id = "combobox3-1" })
                        @Html.ValidationMessageFor(model => model.Year, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Make, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.Make, new { htmlAttributes = new { @id = "editor3-2", @Style = "display: none;" } })
                    <div class="col-md-10">
                        <div onmouseover="GetMakes($('#combobox3-1'),'#combobox3-2');" id="div-combobox3-2">
                            @Html.DropDownListFor(model => model.Make, new SelectList(""), "-- select model make --", new { @class = "form-control", @id = "combobox3-2" })
                        </div>
                        @Html.ValidationMessageFor(model => model.Make, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Model, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.Make, new { htmlAttributes = new { @id = "editor3-3", @Style = "display: none;" } })
                    <div class="col-md-10">
                        <div onmouseover="GetModels($('#combobox3-1'),$('#combobox3-2'),'#combobox3-3');" id="div-combobox3-3">
                            @Html.DropDownListFor(model => model.Model, new SelectList(""), "-- select a model --", new { @class = "form-control", @id = "combobox3-3" })
                        </div>
                        @Html.ValidationMessageFor(model => model.Model, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Length, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Length, new { htmlAttributes = new { @class = "form-control", @id = "length3" } })
                        @Html.ValidationMessageFor(model => model.Length, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.HitchStyle, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.HitchStyle, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.HitchStyle, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.NewOrUsed, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <div class="checkbox">
                            @Html.EditorFor(model => model.NewOrUsed)
                            @Html.ValidationMessageFor(model => model.NewOrUsed, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>

            <div class="info-unit" id="atv">
                <div class="form-group">
                    @Html.LabelFor(model => model.IdentificationNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.IdentificationNumber, new { htmlAttributes = new { @class = "form-control", @id = "atvVin" } })
                        @Html.ValidationMessageFor(model => model.IdentificationNumber, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Year, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.Year, new { htmlAttributes = new { @id = "editor4-1", @Style = "display: none;" } })
                    <div class="col-md-10" id="div-combobox4-1">

                        @Html.DropDownListFor(model => model.Year, yearlist, "-- select a date --", new { @class = "form-control", @id = "combobox4-1" })
                        @Html.ValidationMessageFor(model => model.Year, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Make, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.Make, new { htmlAttributes = new { @id = "editor4-2", @Style = "display: none;" } })
                    <div class="col-md-10">
                        <div onmouseover="GetMakes($('#combobox4-1'),'#combobox4-2');" id="div-combobox4-2">
                            @Html.DropDownListFor(model => model.Make, new SelectList(""), "-- select model make --", new { @class = "form-control", @id = "combobox4-2" })
                        </div>
                        @Html.ValidationMessageFor(model => model.Make, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Model, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.Make, new { htmlAttributes = new { @id = "editor4-3", @Style = "display: none;" } })
                    <div class="col-md-10">
                        <div onmouseover="GetModels($('#combobox4-1'),$('#combobox4-2'),'#combobox4-3');" id="div-combobox4-3">
                            @Html.DropDownListFor(model => model.Model, new SelectList(""), "-- select a model --", new { @class = "form-control", @id = "combobox4-3" })
                        </div>
                        @Html.ValidationMessageFor(model => model.Model, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Miles, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Miles, new { htmlAttributes = new { @class = "form-control", @id = "miles4" } })
                        @Html.ValidationMessageFor(model => model.Miles, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.NewOrUsed, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <div class="checkbox">
                            @Html.EditorFor(model => model.NewOrUsed)
                            @Html.ValidationMessageFor(model => model.NewOrUsed, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>

            <div class="info-unit" id="boat">
                <div class="form-group">
                    @Html.LabelFor(model => model.IdentificationNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.IdentificationNumber, new { htmlAttributes = new { @class = "form-control", @id = "boatVin" } })
                        @Html.ValidationMessageFor(model => model.IdentificationNumber, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Year, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.Year, new { htmlAttributes = new { @id = "editor5-1", @Style = "display: none;" } })
                    <div class="col-md-10" id="div-combobox5-1">

                        @Html.DropDownListFor(model => model.Year, yearlist, "-- select a date --", new { @class = "form-control", @id = "combobox5-1" })
                        @Html.ValidationMessageFor(model => model.Year, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Make, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.Make, new { htmlAttributes = new { @id = "editor5-2", @Style = "display: none;" } })
                    <div class="col-md-10">
                        <div onmouseover="GetMakes($('#combobox5-1'),'#combobox5-2');" id="div-combobox5-2">
                            @Html.DropDownListFor(model => model.Make, new SelectList(""), "-- select model make --", new { @class = "form-control", @id = "combobox5-2" })
                        </div>
                        @Html.ValidationMessageFor(model => model.Make, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.TrailerId, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.TrailerId, new { htmlAttributes = new { @class = "form-control", @id = "trailer5" } })
                        @Html.ValidationMessageFor(model => model.TrailerId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.EngineSerial, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.EngineSerial, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.EngineSerial, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.NewOrUsed, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <div class="checkbox">
                            @Html.EditorFor(model => model.NewOrUsed)
                            @Html.ValidationMessageFor(model => model.NewOrUsed, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>

            <div class="info-unit" id="motorcycle">
                <div class="form-group">
                    @Html.LabelFor(model => model.IdentificationNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.IdentificationNumber, new { htmlAttributes = new { @class = "form-control", @id = "motorcycleVin" } })
                        @Html.ValidationMessageFor(model => model.IdentificationNumber, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Year, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.Year, new { htmlAttributes = new { @id = "editor6-1", @Style = "display: none;" } })
                    <div class="col-md-10" id="div-combobox6-1">

                        @Html.DropDownListFor(model => model.Year, yearlist, "-- select a date --", new { @class = "form-control", @id = "combobox6-1" })
                        @Html.ValidationMessageFor(model => model.Year, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Make, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.Make, new { htmlAttributes = new { @id = "editor6-2", @Style = "display: none;" } })
                    <div class="col-md-10">
                        <div onmouseover="GetMakes($('#combobox6-1'),'#combobox6-2');" id="div-combobox6-2">
                            @Html.DropDownListFor(model => model.Make, new SelectList(""), "-- select model make --", new { @class = "form-control", @id = "combobox6-2" })
                        </div>
                        @Html.ValidationMessageFor(model => model.Make, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Model, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.Make, new { htmlAttributes = new { @id = "editor6-3", @Style = "display: none;" } })
                    <div class="col-md-10">
                        <div onmouseover="GetModels($('#combobox6-1'),$('#combobox6-2'),'#combobox6-3');" id="div-combobox6-3">
                            @Html.DropDownListFor(model => model.Model, new SelectList(""), "-- select a model --", new { @class = "form-control", @id = "combobox6-3" })
                        </div>
                        @Html.ValidationMessageFor(model => model.Model, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Miles, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Miles, new { htmlAttributes = new { @class = "form-control", id = "miles6" } })
                        @Html.ValidationMessageFor(model => model.Miles, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Color, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.Color, Colourlist, "-- select type --", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Color, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.NewOrUsed, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <div class="checkbox">
                            @Html.EditorFor(model => model.NewOrUsed)
                            @Html.ValidationMessageFor(model => model.NewOrUsed, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>

            <div class="info-unit" id="snowmobile">
                <div class="form-group">
                    @Html.LabelFor(model => model.IdentificationNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.IdentificationNumber, new { htmlAttributes = new { @class = "form-control", @id = "snowmobileVin" } })
                        @Html.ValidationMessageFor(model => model.IdentificationNumber, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Year, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.Year, new { htmlAttributes = new { @id = "editor7-1", @Style = "display: none;" } })
                    <div class="col-md-10" id="div-combobox7-1">

                        @Html.DropDownListFor(model => model.Year, yearlist, "-- select a date --", new { @class = "form-control", @id = "combobox7-1" })
                        @Html.ValidationMessageFor(model => model.Year, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Make, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.Make, new { htmlAttributes = new { @id = "editor7-2", @Style = "display: none;" } })
                    <div class="col-md-10">
                        <div onmouseover="GetMakes($('#combobox7-1'),'#combobox7-2');" id="div-combobox7-2">
                            @Html.DropDownListFor(model => model.Make, new SelectList(""), "-- select model make --", new { @class = "form-control", @id = "combobox7-2" })
                        </div>
                        @Html.ValidationMessageFor(model => model.Make, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Model, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.Make, new { htmlAttributes = new { @id = "editor7-3", @Style = "display: none;" } })
                    <div class="col-md-10">
                        <div onmouseover="GetModels($('#combobox7-1'),$('#combobox7-2'),'#combobox7-3');" id="div-combobox7-3">
                            @Html.DropDownListFor(model => model.Model, new SelectList(""), "-- select a model --", new { @class = "form-control", @id = "combobox7-3" })
                        </div>
                        @Html.ValidationMessageFor(model => model.Model, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.NewOrUsed, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <div class="checkbox">
                            @Html.EditorFor(model => model.NewOrUsed)
                            @Html.ValidationMessageFor(model => model.NewOrUsed, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>

            <div class="info-unit" id="heavyequipment">
                <div class="form-group">
                    @Html.LabelFor(model => model.SerialNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.SerialNumber, new { htmlAttributes = new { @class = "form-control", @id = "heavyequipmentSerial" } })
                        @Html.ValidationMessageFor(model => model.SerialNumber, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Year, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.Year, new { htmlAttributes = new { @id = "editor8-1", @Style = "display: none;" } })
                    <div class="col-md-10" id="div-combobox8-1">

                        @Html.DropDownListFor(model => model.Year, yearlist, "-- select a date --", new { @class = "form-control", @id = "combobox8-1" })
                        @Html.ValidationMessageFor(model => model.Year, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Make, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.Make, new { htmlAttributes = new { @id = "editor8-2", @Style = "display: none;" } })
                    <div class="col-md-10">
                        <div onmouseover="GetMakes($('#combobox8-1'),'#combobox8-2');" id="div-combobox8-2">
                            @Html.DropDownListFor(model => model.Make, new SelectList(""), "-- select model make --", new { @class = "form-control", @id = "combobox8-2" })
                        </div>
                        @Html.ValidationMessageFor(model => model.Make, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>
        @*UNIT MODEL END*@

        @*PAYMENT DETAILS START*@
        <div class="info-unit" style="margin-top:20px">
            <div class="form-group">
                @Html.LabelFor(model => model.Cost, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-3">
                    @Html.EditorFor(model => model.Cost, new { htmlAttributes = new { @class = "form-control", @id = "txtCost", autocomplete = "off" } })
                    @Html.ValidationMessageFor(model => model.Cost, "", new { @class = "text-danger" })
                    <div id="tagscloud"><span class="text-danger"></span></div>
                </div>

                @Html.LabelFor(model => model.AdvanceAmount, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-3">
                    @if (ViewBag.Editable == "Yes")
                {
                        @Html.EditorFor(model => model.AdvanceAmount, new { htmlAttributes = new { @class = "form-control", @id = "txtAdvanceAmount" } })
                    }
                    else
                    {
                        @Html.EditorFor(model => model.AdvanceAmount, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @id = "txtAdvanceAmount" } })
                    }
                    @Html.ValidationMessageFor(model => model.AdvanceAmount, "", new { @class = "text-danger" })
                    <div id="tagscloudAdvance"><span class="text-danger"></span></div>
                </div>
            </div>



            <div class="form-group">
                @Html.LabelFor(model => model.Note, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextAreaFor(model => model.Note, 5, 85, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Note, "", new { @class = "text-danger" })
                </div>
            </div>

            @if (ViewBag.CompabyType == 2 && ViewBag.Upload == "Yes")
            {
                <div class="form-group">
                    @Html.LabelFor(model => model.TitleReceived, htmlAttributes: new { @class = "control-label col-md-4", style = "width:28%" })
                    <div class="col-md-2">
                        <div class="checkbox">
                            @Html.RadioButtonFor(model => model.TitleReceived, "Yes", new { @id = "rdYes", @class = "titleReceived" }) Yes @*, @checked = "checked"*@
                            @Html.RadioButtonFor(model => model.TitleReceived, "No", new { @id = "rdNo", @class = "titleReceived" }) No
                            @Html.ValidationMessageFor(model => model.TitleReceived, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div hidden id="fileUploader">
                        @Html.HiddenFor(i => i.FileName)
                        <label for="file" class="control-label col-md-3" style="width:22%">Upload Image:</label>

                        <div class="col-md-3" id="fileUploaderInsideDiv" style="padding-left:0px;margin-top:10px">
                            <input type="file" id="fileToUpload" name="fileUpload" multiple="multiple" style="float: left;" />
                            <br />
                            <span id="spnFile" style="float: left; color: #FF0000"></span>
                            @Html.ValidationMessage("File")
                            @Html.Hidden("hdnFileUpload")

                            <div class="control-section" style="padding: 0px;">
                                <div id="selectedFiles"></div>
                            </div>
                        </div>
                    </div>
                </div>


            }
        </div>
        @*PAYMENT DETAILS END*@

        <div class="form-group" style="margin-top:15px;">
            @Html.LabelFor(model => model.AdvanceNow, htmlAttributes: new { @class = "control-label col-md-5", style = "text-align:right" })
            <div class="col-md-2">
                @Html.RadioButtonFor(model => model.AdvanceNow, "Yes", new { @id = "rdAdvanceYes", @class = "advanceNow" }) Yes
                @Html.RadioButtonFor(model => model.AdvanceNow, "No", new { @id = "rdAdvanceNo", @class = "advanceNow" }) No
                @Html.ValidationMessageFor(model => model.AdvanceNow, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group" id="advanceDate" hidden>
                @Html.LabelFor(model => model.AdvanceDate, htmlAttributes: new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    @Html.TextBox("StartDate", DateTime.Today, new {@class = "datepicker", @type = "date"})
                    @Html.ValidationMessageFor(model => model.AdvanceDate, "", new {@class = "text-danger"})
                </div>
            </div>*@

        <div class="form-group" id="advanceDateFormDiv" hidden>

            <div class="control-label col-sm-2">
                @Html.LabelFor(model => model.AdvanceDate, htmlAttributes: new { })<span style="color:red"> *</span>
            </div>


            <div class="col-xs-8" id="advanceDateDiv" style="display:none">
                @Html.EditorFor(model => model.AdvanceDate, new { htmlAttributes = new { @class = "form-control", placeholder = "MM/DD/YYYY", @id = "advanceDate", autocomplete = "off" } })
                @Html.ValidationMessageFor(model => model.AdvanceDate, "", new { @class = "text-danger" })
            </div>

            <div class="col-xs-8" id="advanceDivDisplay">
                @Html.EditorFor(model => model.DisplayAdvanceDate, new { htmlAttributes = new { placeholder = "MM/DD/YYYY", @class = "form-control", onclick = "$('#advanceDivDisplay').hide();$('#advanceDateDiv').show();$('#advanceDateDiv').children('input').val('').focus();" } })
                @Html.ValidationMessageFor(model => model.DisplayAdvanceDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div>
                <nav>
                    <ul class="pager">
                        <li>
                            <input type="submit" value="Add" name="btnAdd" id="btnSubmit" class="btn btn-info" />
                        </li>
                        <li>
                            <input type="button" value="Cancel" id="btnCancel" class="btn btn-default cancel" style="margin-left:30px" />
                        </li>
                    </ul>
                </nav>
            </div>
        </div>
    </div>
                            }

<script type="text/javascript">
    _previousMakeYear = "";
    _previousMake     = "";


    function GetModels(var1,var2,var3)
    {
        var checkYear = var1.val();
        var checkMake = var2.val();
        checkYear = var1.next().children('input').val();
        checkMake = var2.next().children('input').val();

        var markup = "";
        if(checkYear != "" && checkMake != ""){
            if(_previousMakeYear != checkYear|| _previousMake != checkMake){
                $.ajax({
                    url: '/Unit/GetModels',
                    type: 'POST',
                    contentType: 'application/json;',
                    data: JSON.stringify({ make: checkMake, year: checkYear }),
                    success: function (data) {
                        //var markup = "<option value='0'>-- select a model --</option>";
                        for (var x = 0; x < data.length; x++) {
                            markup += "<option value=" + data[x].Value + ">" + data[x].Text + "</option>";
                        }
                        $(var3).html(markup);
                        _previousMakeYear = checkYear;
                        _previousMake     = checkMake;
                    },
                    error: function (reponse) {
                    }
                });
            }
        }
        else{
            markup="";
            $(var3).html(markup);
        }
    }

    function GetMakes(var1,var2)
    {
        var checkYear = var1.val();
        checkYear = var1.next().children('input').val();
        var markup = "";
        if(checkYear != ""){
            if(_previousMakeYear != checkYear){
                $.ajax({
                    url: '/Unit/GetMakes',
                    type: 'POST',
                    contentType: 'application/json;',
                    data: JSON.stringify({year: checkYear }),
                    success: function (data) {
                        //var markup = "<option value='0'>-- select a model --</option>";
                        for (var x = 0; x < data.length; x++) {
                            markup += "<option value=" + data[x].Value + ">" + data[x].Text + "</option>";
                        }
                        $(var2).html(markup);
                        _previousMakeYear = checkYear;
                        _previousMake= "";
                    },
                    error: function (reponse) {
                    }
                });
            }
        }
        else{
            markup="";
            $(var2).html(markup);
        }
    }
    // focusout functions Start
    // --------------------------
    $('#div-combobox1-1').focusout(function(){
        var yearmakemodel = $('#combobox1-1').next().children('input').val();
        document.getElementById('editor1-1').value = yearmakemodel;

    });
    $('#div-combobox1-2').focusout(function(){
        var yearmakemodel = $('#combobox1-2').next().children('input').val();
        document.getElementById('editor1-2').value = yearmakemodel;

    });
    $('#div-combobox1-3').focusout(function(){
        var yearmakemodel = $('#combobox1-3').next().children('input').val();
        document.getElementById('editor1-3').value = yearmakemodel;

    });
    $('#div-combobox2-1').focusout(function(){
        var yearmakemodel = $('#combobox2-1').next().children('input').val();
        document.getElementById('editor2-1').value = yearmakemodel;

    });
    $('#div-combobox2-2').focusout(function(){
        var yearmakemodel = $('#combobox2-2').next().children('input').val();
        document.getElementById('editor2-2').value = yearmakemodel;

    });
    $('#div-combobox2-3').focusout(function(){
        var yearmakemodel = $('#combobox2-3').next().children('input').val();
        document.getElementById('editor2-3').value = yearmakemodel;

    });
    $('#div-combobox3-1').focusout(function(){
        var yearmakemodel = $('#combobox3-1').next().children('input').val();
        document.getElementById('editor3-1').value = yearmakemodel;

    });
    $('#div-combobox3-2').focusout(function(){
        var yearmakemodel = $('#combobox3-2').next().children('input').val();
        document.getElementById('editor3-2').value = yearmakemodel;

    });
    $('#div-combobox3-3').focusout(function(){
        var yearmakemodel = $('#combobox3-3').next().children('input').val();
        document.getElementById('editor3-3').value = yearmakemodel;

    });
    $('#div-combobox4-1').focusout(function(){
        var yearmakemodel = $('#combobox4-1').next().children('input').val();
        document.getElementById('editor4-1').value = yearmakemodel;

    });
    $('#div-combobox4-2').focusout(function(){
        var yearmakemodel = $('#combobox4-2').next().children('input').val();
        document.getElementById('editor4-2').value = yearmakemodel;

    });
    $('#div-combobox4-3').focusout(function(){
        var yearmakemodel = $('#combobox4-3').next().children('input').val();
        document.getElementById('editor4-3').value = yearmakemodel;

    });
    $('#div-combobox5-1').focusout(function(){
        var yearmakemodel = $('#combobox5-1').next().children('input').val();
        document.getElementById('editor5-1').value = yearmakemodel;

    });
    $('#div-combobox5-2').focusout(function(){
        var yearmakemodel = $('#combobox5-2').next().children('input').val();
        document.getElementById('editor5-2').value = yearmakemodel;

    });
    $('#div-combobox6-1').focusout(function(){
        var yearmakemodel = $('#combobox6-1').next().children('input').val();
        document.getElementById('editor6-1').value = yearmakemodel;

    });
    $('#div-combobox6-2').focusout(function(){
        var yearmakemodel = $('#combobox6-2').next().children('input').val();
        document.getElementById('editor6-2').value = yearmakemodel;

    });
    $('#div-combobox6-3').focusout(function(){
        var yearmakemodel = $('#combobox6-3').next().children('input').val();
        document.getElementById('editor6-3').value = yearmakemodel;

    });
    $('#div-combobox7-1').focusout(function(){
        var yearmakemodel = $('#combobox7-1').next().children('input').val();
        document.getElementById('editor7-1').value = yearmakemodel;

    });
    $('#div-combobox7-2').focusout(function(){
        var yearmakemodel = $('#combobox7-2').next().children('input').val();
        document.getElementById('editor7-2').value = yearmakemodel;

    });
    $('#div-combobox7-3').focusout(function(){
        var yearmakemodel = $('#combobox7-3').next().children('input').val();
        document.getElementById('editor7-3').value = yearmakemodel;

    });
    $('#div-combobox8-1').focusout(function(){
        var yearmakemodel = $('#combobox8-1').next().children('input').val();
        document.getElementById('editor8-1').value = yearmakemodel;

    });
    $('#div-combobox8-2').focusout(function(){
        var yearmakemodel = $('#combobox8-2').next().children('input').val();
        document.getElementById('editor8-2').value = yearmakemodel;

    });
    // -------------------------
    //focusout functions End


    // drop down combo boxes
    $(function() {
        $( "#combobox1-1" ).combobox();
        $( "#combobox1-2" ).combobox();
        $( "#combobox1-3" ).combobox();
        $( "#combobox2-1" ).combobox();
        $( "#combobox2-2" ).combobox();
        $( "#combobox2-3" ).combobox();
        $( "#combobox3-1" ).combobox();
        $( "#combobox3-2" ).combobox();
        $( "#combobox3-3" ).combobox();
        $( "#combobox4-1" ).combobox();
        $( "#combobox4-2" ).combobox();
        $( "#combobox4-3" ).combobox();
        $( "#combobox5-1" ).combobox();
        $( "#combobox5-2" ).combobox();
        $( "#combobox6-1" ).combobox();
        $( "#combobox6-2" ).combobox();
        $( "#combobox6-3" ).combobox();
        $( "#combobox7-1" ).combobox();
        $( "#combobox7-2" ).combobox();
        $( "#combobox7-3" ).combobox();
        $( "#combobox8-1" ).combobox();
        $( "#combobox8-2" ).combobox();
    });

    unitTypeInitialLoad();

    //Initial page load
    //hide panels
    function unitTypeInitialLoad() {
        $("#vehicle").hide();
        $("#rv").hide();
        $("#camper").hide();
        $("#atv").hide();
        $("#boat").hide();
        $("#motorcycle").hide();
        $("#snowmobile").hide();
        $("#heavyequipment").hide();
    }


    //key up for bind child text box value to hidden box
    $('#vehicleVin').keyup(function () {
        if($('#vehicleVin').val().length == 17){
            var vin =document.getElementById('vehicleVin').value;
            $.ajax({
                url: '/Unit/GetYearByVin',
                type: 'POST',
                contentType: 'application/json;',
                data: JSON.stringify({vin: vin }),
                success: function (data) {
                    var year = data;
                    $('#combobox1-1').next().children('input').val(year);
                    document.getElementById('editor1-1').value = year;
                },
                error: function (reponse) {
                }
            });
        }
    });
    $('#rvVin').keyup(function () {
        if($('#rvVin').val().length == 17){
            var vin =document.getElementById('rvVin').value;
            $.ajax({
                url: '/Unit/GetYearByVin',
                type: 'POST',
                contentType: 'application/json;',
                data: JSON.stringify({vin: vin }),
                success: function (data) {
                    var year = data;
                    $('#combobox2-1').next().children('input').val(year);
                    document.getElementById('editor2-1').value = year;
                },
                error: function (reponse) {
                }
            });
        }
    });
    $('#camperVin').keyup(function () {
        if($('#camperVin').val().length == 17){
            var vin =document.getElementById('camperVin').value;
            $.ajax({
                url: '/Unit/GetYearByVin',
                type: 'POST',
                contentType: 'application/json;',
                data: JSON.stringify({vin: vin }),
                success: function (data) {
                    var year = data;
                    $('#combobox3-1').next().children('input').val(year);
                    document.getElementById('editor3-1').value = year;
                },
                error: function (reponse) {
                }
            });
        }
    });
    $('#atvVin').keyup(function () {
        if($('#atvVin').val().length == 17){
            var vin =document.getElementById('atvVin').value;
            $.ajax({
                url: '/Unit/GetYearByVin',
                type: 'POST',
                contentType: 'application/json;',
                data: JSON.stringify({vin: vin }),
                success: function (data) {
                    var year = data;
                    $('#combobox4-1').next().children('input').val(year);
                    document.getElementById('editor4-1').value = year;
                },
                error: function (reponse) {
                }
            });
        }
    });
    $('#boatVin').keyup(function () {
        if($('#boatVin').val().length == 17){
            var vin =document.getElementById('boatVin').value;
            $.ajax({
                url: '/Unit/GetYearByVin',
                type: 'POST',
                contentType: 'application/json;',
                data: JSON.stringify({vin: vin }),
                success: function (data) {
                    var year = data;
                    $('#combobox5-1').next().children('input').val(year);
                    document.getElementById('editor5-1').value = year;
                },
                error: function (reponse) {
                }
            });
        }
    });
    $('#motorcycleVin').keyup(function () {
        if($('#motorcycleVin').val().length == 17){
            var vin =document.getElementById('motorcycleVin').value;
            $.ajax({
                url: '/Unit/GetYearByVin',
                type: 'POST',
                contentType: 'application/json;',
                data: JSON.stringify({vin: vin }),
                success: function (data) {
                    var year = data;
                    $('#combobox6-1').next().children('input').val(year);
                    document.getElementById('editor6-1').value = year;
                },
                error: function (reponse) {
                }
            });
        }
    });
    $('#snowmobileVin').keyup(function () {
        if($('#snowmobileVin').val().length == 17){
            var vin =document.getElementById('snowmobileVin').value;
            $.ajax({
                url: '/Unit/GetYearByVin',
                type: 'POST',
                contentType: 'application/json;',
                data: JSON.stringify({vin: vin }),
                success: function (data) {
                    var year = data;
                    $('#combobox7-1').next().children('input').val(year);
                    document.getElementById('editor7-1').value = year;
                },
                error: function (reponse) {
                }
            });
        }
    });

    changeUnitType();

    //hide the panels
    //show one panel at a time
    function changeUnitType() {

        @*var model = @Html.Raw(Json.Encode(Model));*@

        var unitType = document.getElementById("unitType").value;
        document.getElementById("form").reset();
        _previousMakeYear = "";
        _previousMake     = "";

        if (unitType == "1") {
            unitTypeInitialLoad();
            document.getElementById("unitType").value = "1";
            $("#vehicle").show();
        } else if (unitType == "2") {
            unitTypeInitialLoad();
            document.getElementById("unitType").value = "2";
            $("#rv").show();
        } else if (unitType == "3") {
            unitTypeInitialLoad();
            document.getElementById("unitType").value = "3";
            $("#camper").show();
        } else if (unitType == "4") {
            unitTypeInitialLoad();
            document.getElementById("unitType").value = "4";
            $("#atv").show();
        } else if (unitType == "5") {
            unitTypeInitialLoad();
            document.getElementById("unitType").value = "5";
            $("#boat").show();
        } else if (unitType == "6") {
            unitTypeInitialLoad();
            document.getElementById("unitType").value = "6";
            $("#motorcycle").show();
        } else if (unitType == "7") {
            unitTypeInitialLoad();
            document.getElementById("unitType").value = "7";
            $("#snowmobile").show();
        } else if (unitType == "8") {
            unitTypeInitialLoad();
            document.getElementById("unitType").value = "8";
            $("#heavyequipment").show();
        } else {
            unitTypeInitialLoad();
        }

    }

    $('.titleReceived').change(function() {
        var isUpload = $(this).filter(':checked').val();

        if (isUpload === "Yes") {
            $('#fileUploader').show();
        } else {
            $('#fileUploader').hide();
        }
        //alert(isUpload);
    });

    //
    $('.advanceNow').change(function() {
        var isAdvance = $(this).filter(':checked').val();

        if (isAdvance === "Yes") {
            $('#advanceDateFormDiv').show();
            $('#btnSubmit').prop('value', 'Add and Advance');
        } else {
            $('#advanceDateFormDiv').hide();
            $('#btnSubmit').prop('value', 'Add');
        }
    });


    //Reset the data and clear just the form
    $('#btnCancel').click(function() {
        document.getElementById("form").reset();
        _previousMakeYear = "";
        _previousMake     = "";

    });

    var model = @Html.Raw(Json.Encode(Model));
    var advancePt = model.AdvancePt;
    //var maxCost = model.LoanAmount * 100 / advancePt;
    var maxCost = model.Balance * 100 / advancePt;

    //calculate advance
    $('#txtCost').keypress(function(e) {
        $("#tagscloud span").text("");
        if ((e.which >= 48 && e.which <= 57) || e.which === 46) {
            var val = this.value + (e.which - 48);
            if (e.which !== 46) {
                if (val <= maxCost) {
                    var advanceAmount = (advancePt * val) / 100;
                    document.getElementById('txtAdvanceAmount').value = advanceAmount;
                } else {
                    $("#tagscloud span").fadeIn();
                    $("#tagscloud span").text("Cost must be less than balance");
                    $("#tagscloud span").delay(1000).fadeOut();
                    e.preventDefault();
                }
            }

        } else {
            $("#tagscloud span").fadeIn();
            $("#tagscloud span").text("Invalid character");
            $("#tagscloud span").delay(1000).fadeOut();
            e.preventDefault();
        }
    });

    //claculate advance when click back-space
    $('#txtCost').keyup(function(e) {
        if (e.keyCode === 8) {
            var val = this.value;
            var advanceAmount = (advancePt * val) / 100;
            document.getElementById('txtAdvanceAmount').value = advanceAmount;
            $("#tagscloud span").text("");
        }
    });

    $('#txtCost').blur(function () {
        var val = $.trim($(this).val());
        if (val.indexOf(',') > -1) {
            val = val.replace(',', '');
        }

        var num = parseFloat(val);
        num = num.toFixed(2);
        if (isNaN(num)) {
            num = '';
        }

        if (isNaN(num)) {

            $("#tagscloud span").fadeIn();
            $("#tagscloud span").text("Cost must be a positive number");

        }
        else if (Number(num) > Number(maxCost)) {
            $("#tagscloud span").fadeIn();
            $("#tagscloud span").text("Cost must be less than balance");
        }
        else if (Number(num) <= 0) {
            $("#tagscloud span").fadeIn();
            $("#tagscloud span").text("Cost must be greater than zero");
        } else {
            $("#tagscloud span").fadeOut();
            $("#tagscloud span").text("");
        }

        $(this).val(num);

        var advanceAmount = (advancePt * num) / 100;

        advanceAmount = parseFloat(advanceAmount);
        advanceAmount = advanceAmount.toFixed(2);

        document.getElementById('txtAdvanceAmount').value = advanceAmount;
    });

    $('#txtAdvanceAmount').keypress(function(e) {
        var cost = document.getElementById('txtCost').value;
        //alert(e.which);
        if ((e.which >= 48 && e.which <= 57) || e.which === 46 || e.which === 8) {
            var val = this.value + (e.which - 48);
            //alert(cost + ' ' + val);
            if (e.which !== 46 || e.which !== 8) {
                if (val > model.LoanAmount || cost === 0.00 || Number(val) > Number(cost)) {
                    $("#tagscloudAdvance span").fadeIn();
                    $("#tagscloudAdvance span").text("Advance amount must be less than cost");
                    $("#tagscloudAdvance span").delay(1000).fadeOut();
                    e.preventDefault();
                }
            }

        } else {
            $("#tagscloudAdvance span").fadeIn();
            $("#tagscloudAdvance span").text("Invalid character");
            $("#tagscloudAdvance span").delay(1000).fadeOut();
            e.preventDefault();
        }
    });

    //claculate advance when click back-space
    $('#txtAdvanceAmount').keyup(function(e) {
        //alert(e.keyCode);
        if (e.keyCode === 8) {
            var val = this.value;
            //document.getElementById('txtAdvanceAmount').value = val;
            $("#tagscloud span").text("");
        }
    });

    $('#txtAdvanceAmount').blur(function () {
        var cost = document.getElementById('txtCost').value;
        var val = $.trim($(this).val());

        if (val.indexOf(',') > -1) {
            val = val.replace(',', '');
        }

        var num = parseFloat(val);
        num = num.toFixed(2);
        if (isNaN(num)) {
            num = '';
        }

        if (isNaN(num)) {

            $("#tagscloudAdvance span").fadeIn();
            $("#tagscloudAdvance span").text("Advance amount must be a positive number");

        }
        else if (Number(num) > Number(cost)) {
            $("#tagscloudAdvance span").fadeIn();
            $("#tagscloudAdvance span").text("Advance amount must be less than cost");
        }
        else if (Number(num) <= 0) {
            $("#tagscloudAdvance span").fadeIn();
            $("#tagscloudAdvance span").text("Advance must be greater than zero");
        } else {
            $("#tagscloudAdvance span").fadeOut();
            $("#tagscloudAdvance span").text("");
        }

        $(this).val(num);
    });

    $('input').blur(function() {

    });

</script>

<script>
    var files;
    var storedFiles = [];
    var upc = 0;



    $("input[id^='fileToUpload']").change(function (e) {
        doReCreate(e);
    });

    var selDiv = $("#selectedFiles");


    function doReCreate(e) {
        if(upc < 9)
        {
            upc = upc + 1;
            handleFileSelect(e);
            $("input[id^='fileToUpload']").hide();

            $('<input>').attr({
                type: 'file',
                multiple: 'multiple',
                id: 'fileToUpload' + upc,
                class: 'fUpload',
                name: 'fileUpload',
                style: 'float: left',
                title: '  ',
                onchange: "doReCreate(event)"

            }).appendTo('#fileUploaderInsideDiv');
        }
    }


    function handleFileSelect(e) {

        //selDiv.innerHTML = ""; storedFiles = [];
        var selDiv = document.querySelector("#selectedFiles");

        if (!e.target.files) return;

        //selDiv.innerHTML = "";
        files = e.target.files;

        for (var i = 0; i < files.length; i++) {
            //if (i == 0) { selDiv.innerHTML = ""; storedFiles = []; }
            var f = files[i];
            selDiv.innerHTML += "<div>" + f.name + "<a onclick='removeAtt(this)'> X </a></div>";
            storedFiles.push(f.name);
        }
        $('#@Html.IdFor(i => i.FileName)').val(storedFiles);
    }

    function removeAtt(t) {
        var serEle = $(t).parent().text().slice(0, -3);
        var index = storedFiles.indexOf(serEle);
        if (index !== -1) {
            storedFiles.splice(index, 1);
        }
        $(t).parent().remove();

        $('#@Html.IdFor(i => i.FileName)').val(storedFiles);
        upc = upc - 1;
    }

    //Add date picker
    var startPicker = new Pikaday({
        field: document.getElementById('advanceDate'),
        format: 'l'
    });

    //Set min date and max date
    startPicker.setMinDate(new Date("@Model.StartDate"));
    startPicker.setMaxDate(new Date("@Model.EndDate"));
</script>
<style>
    .info-unit {
        margin-left: 0px;
        margin-right: 20px;
        border-radius: 15px;
        border: 2px solid #8D987E;
        padding: 20px 20px 20px 20px;
    }

    .form-horizontal .control-label {
        text-align: left;
        padding-left: 60px;
    }
</style>