@model BankLoanSystem.Models.NonRegCompanyBranchModel

@{
    ViewBag.Title = "Step5";

}



@*<script>
        progress(5);


    </script>*@

<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>


<div class="row">
    <div class="container body-content">
        <h2>@ViewBag.compType</h2>

        @if (ViewBag.SuccessMsg != null)
            {
            @ViewBag.SuccessMsg
        }
        else if (@ViewBag.ErrorMsg != null)
        {
            @ViewBag.ErrorMsg
        }

        @using (Ajax.BeginForm("Step5", "SetupProcess", new AjaxOptions()
            {
                OnSuccess = "Progress(6)",
                OnFailure = "handleErrorMsg",
                HttpMethod = "POST",
                InsertionMode = InsertionMode.Replace,
                UpdateTargetId = "changeContainer",
                LoadingElementId = "loadingDiv"
            }, new { id = "form" }))
            {

            @Html.AntiForgeryToken()

            <div class="form-horizontal">

                <div class="form-group">
                    @if (Model.NonRegBranches.Count > 0)
                    {
                        <table>
                            <tr>
                                <td class="control-label col-sm-2">
                                    @Html.Label("Branch Name")
                                </td>
                                <td class="control-label col-sm-2">
                                    @Html.Label("Branch Address1")
                                </td>

                            </tr>

                            @for (var i = 0; i < Model.NonRegBranches.Count; i++)
                            {
                                <tr>
                                    <td class="control-label col-sm-2">
                                        @Html.DisplayFor(x => x.NonRegBranches[i].BranchName)
                                    </td>
                                    <td class="control-label col-sm-2">
                                        @Html.DisplayFor(x => x.NonRegBranches[i].BranchAddress1)
                                    </td>

                                    <td class="control-label col-sm-2">
                                        <a onclick="EditBranch(@i)" id="CompanyIndex">Edit</a>
                                    </td>
                                    <td class="control-label col-sm-2">
                                        <a>Delete</a>
                                    </td>
                                </tr>
                            }
                        </table>
                    }
                </div>

                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">

                    @if (Model.NonRegBranches.Count > 0)
                    {
                        <div class="control-label col-sm-2">
                            <a onclick="CreateNewBranch()">create new branch</a>
                        </div>
                    }
                    else
                    {
                        <div class="control-label col-sm-2">
                            @Html.Label("Same details as company", htmlAttributes: new { })
                        </div>
                        <div class="control-label col-sm-2">
                            @Html.CheckBox("Previous", new { @id = "Previous" })
                        </div>
                    }
                </div>

                <input id="branchCode" name="branchCode" type="hidden" value="" />
                @if (ViewBag.CurrUserRoleType != 2)
                {
                    <div class="form-group">
                        <div class="control-label col-sm-2">
                            @Html.LabelFor(model => model.RegBranchId, htmlAttributes: new { })<span style="color: red">*</span>
                        </div>
                        <div class="col-xs-8">
                            @Html.DropDownListFor(model => model.RegBranchId, null, "Select branch", new { htmlAttributes = new { @class = "form-control", @id = "RegBranchId" } })
                            @Html.ValidationMessageFor(model => model.RegBranchId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                }

                <div class="form-group">
                    <div class="control-label col-sm-2">
                        @Html.LabelFor(model => model.NonRegCompanyId, htmlAttributes: new { })<span style="color: red">*</span>
                    </div>
                    <div class="col-xs-8">
                        @Html.DropDownListFor(model => model.NonRegCompanyId, null, "Select non registered comapny", new { htmlAttributes = new { @class = "form-control", @id = "NonRegCompanyId" } })
                        @Html.ValidationMessageFor(model => model.NonRegCompanyId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="control-label col-sm-2">
                        @Html.LabelFor(model => model.CompanyBranch.MainBranch.BranchName, htmlAttributes: new { })<span style="color: red">*</span>
                    </div>
                    <div class="col-xs-8">
                        @Html.EditorFor(model => model.CompanyBranch.MainBranch.BranchName, new { htmlAttributes = new { @class = "form-control", @id = "branchName" } })
                        @Html.ValidationMessageFor(model => model.CompanyBranch.MainBranch.BranchName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="control-label col-sm-2">
                        @Html.LabelFor(model => model.CompanyBranch.MainBranch.BranchAddress1, htmlAttributes: new { })<span style="color: red">*</span>
                    </div>

                    <div class="col-xs-8">
                        @Html.EditorFor(model => model.CompanyBranch.MainBranch.BranchAddress1, new { htmlAttributes = new { @class = "form-control", @id = "branchAddress1" } })
                        @Html.ValidationMessageFor(model => model.CompanyBranch.MainBranch.BranchAddress1, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">

                    <div class="control-label col-sm-2">
                        @Html.LabelFor(model => model.CompanyBranch.MainBranch.BranchAddress2, htmlAttributes: new { })
                    </div>

                    <div class="col-xs-8">
                        @Html.EditorFor(model => model.CompanyBranch.MainBranch.BranchAddress2, new { htmlAttributes = new { @class = "form-control", @id = "branchAddress2" } })
                        @Html.ValidationMessageFor(model => model.CompanyBranch.MainBranch.BranchAddress2, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="control-label col-sm-2">
                        @Html.LabelFor(model => model.CompanyBranch.MainBranch.BranchCity, htmlAttributes: new { })<span style="color: red">*</span>
                    </div>

                    <div class="col-xs-8">
                        @Html.EditorFor(model => model.CompanyBranch.MainBranch.BranchCity, new { htmlAttributes = new { @class = "form-control", @id = "branchCity" } })
                        @Html.ValidationMessageFor(model => model.CompanyBranch.MainBranch.BranchCity, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="control-label col-sm-2">
                        @Html.LabelFor(model => model.StateId, htmlAttributes: new { })<span style="color: red">*</span>
                    </div>
                    <div class="col-xs-8">
                        @Html.DropDownList("StateId", null, "Select state", htmlAttributes: new { @class = "form-control", id = "StateId" })
                        @Html.ValidationMessageFor(model => model.StateId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="control-label col-sm-2">
                        @Html.LabelFor(model => model.CompanyBranch.MainBranch.ZipPre, htmlAttributes: new { })<span style="color: red">*</span>
                    </div>

                    <div class="col-xs-4" style="width: 32.2%">
                        @Html.EditorFor(model => model.CompanyBranch.MainBranch.Extention, new { htmlAttributes = new { @class = "form-control", @id = "branchZipExten", placeholder = "Extension" } })
                        @Html.ValidationMessageFor(model => model.CompanyBranch.MainBranch.Extention, "", new { @class = "text-danger" })
                    </div>
                    <span class="glyphicons glyphicon-minus" style="float: right; margin-top: 20px"></span>
                    <div class="col-xs-4">
                        @Html.EditorFor(model => model.CompanyBranch.MainBranch.ZipPre, new { htmlAttributes = new { @class = "form-control", @id = "branchZipPre", placeholder = "Zip Code" } })
                        @Html.ValidationMessageFor(model => model.CompanyBranch.MainBranch.ZipPre, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="control-label col-sm-2">
                        @Html.LabelFor(model => model.CompanyBranch.MainBranch.BranchEmail, htmlAttributes: new { })
                    </div>

                    <div class="col-xs-8">
                        @Html.EditorFor(model => model.CompanyBranch.MainBranch.BranchEmail, new { htmlAttributes = new { @class = "form-control", @id = "branchEmail" } })
                        @Html.ValidationMessageFor(model => model.CompanyBranch.MainBranch.BranchEmail, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="control-label col-sm-2">
                        @Html.LabelFor(model => model.CompanyBranch.MainBranch.BranchPhoneNum1, htmlAttributes: new { })<span style="color: red">*</span>
                    </div>

                    <div class="col-xs-8">
                        @Html.EditorFor(model => model.CompanyBranch.MainBranch.BranchPhoneNum1, new { htmlAttributes = new { @class = "form-control", @id = "branchPhoneNum1" } })
                        @Html.ValidationMessageFor(model => model.CompanyBranch.MainBranch.BranchPhoneNum1, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="control-label col-sm-2">
                        @Html.LabelFor(model => model.CompanyBranch.MainBranch.BranchPhoneNum2, htmlAttributes: new { })
                    </div>

                    <div class="col-xs-8">
                        @Html.EditorFor(model => model.CompanyBranch.MainBranch.BranchPhoneNum2, new { htmlAttributes = new { @class = "form-control", @id = "branchPhoneNum2" } })
                        @Html.ValidationMessageFor(model => model.CompanyBranch.MainBranch.BranchPhoneNum2, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="control-label col-sm-2">
                        @Html.LabelFor(model => model.CompanyBranch.MainBranch.BranchPhoneNum3, htmlAttributes: new { })
                    </div>

                    <div class="col-xs-8">
                        @Html.EditorFor(model => model.CompanyBranch.MainBranch.BranchPhoneNum3, new { htmlAttributes = new { @class = "form-control", @id = "branchPhoneNum3" } })
                        @Html.ValidationMessageFor(model => model.CompanyBranch.MainBranch.BranchPhoneNum3, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="control-label col-sm-2">
                        @Html.LabelFor(model => model.CompanyBranch.MainBranch.BranchFax, htmlAttributes: new { })
                    </div>

                    <div class="col-xs-8">
                        @Html.EditorFor(model => model.CompanyBranch.MainBranch.BranchFax, new { htmlAttributes = new { @class = "form-control", @id = "branchFax" } })
                        @Html.ValidationMessageFor(model => model.CompanyBranch.MainBranch.BranchFax, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="form-group">
                    <div>
                        <nav>
                            <ul class="pager">
                                <li>
                                    <input type="submit" value="Next" class="btn btn-primary m-b" style="float: right; margin-left: 10px" />
                                </li>

                                <li>
                                    <input type="button" value="Back" name="subBack" id="btnPreStep5" class="btn btn-primary m-b cancel" style="float: right; margin-left: 10px" />
                                </li>

                                <li>
                                    <input type="button" id="clear" value="Clear" class="btn btn-primary m-b" style="float: right; margin-left: 10px" />
                                </li>

                            </ul>
                        </nav>
                    </div>
                </div>

            </div>

        }
    </div>
</div>


<script type="text/javascript">
    $(function () {
        $('#btnPreStep5').click(function () {

            $('#loadingDiv').show();
            $.ajax({
                url: '@Url.Action("step4", "SetupProcess")',
                type: 'GET',
                data: { edit: 1},

                success: function (partialView) {
                    $('#loadingDiv').hide();
                    $('#changeContainer').html(partialView);
                    $('#changeContainer').show();

                },
                error: function (request, status, error) {
                    handleErrorMsg(request.responseText);

                }
            });
        });
    });
</script>



<script type="text/javascript">
    $(function() {
        $('#Previous').on('change', function() {
            if ($(this).is(':checked')) {
                var model = @Html.Raw(Json.Encode(Model));
                document.getElementById("branchName").value = model.CompanyBranch.Company.City;
                document.getElementById("branchAddress1").value = model.CompanyBranch.Company.CompanyAddress1;
                document.getElementById("branchAddress2").value = model.CompanyBranch.Company.CompanyAddress2;
                document.getElementById("StateId").value = model.CompanyBranch.Company.StateId;
                document.getElementById("branchCity").value = model.CompanyBranch.Company.City;
                document.getElementById("branchZipPre").value = model.CompanyBranch.Company.ZipPre;
                document.getElementById("branchZipExten").value = model.CompanyBranch.Company.Extension;
                document.getElementById("branchEmail").value = model.CompanyBranch.Company.Email;
                document.getElementById("branchPhoneNum1").value = model.CompanyBranch.Company.PhoneNum1;
                document.getElementById("branchPhoneNum2").value = model.CompanyBranch.Company.PhoneNum2;
                document.getElementById("branchPhoneNum3").value = model.CompanyBranch.Company.PhoneNum3;
                document.getElementById("branchFax").value = model.CompanyBranch.Company.Fax;
            } else {
                document.getElementById("branchName").value = "";
                document.getElementById("branchAddress1").value = "";
                document.getElementById("branchAddress2").value = "";
                document.getElementById("StateId").value = "";
                document.getElementById("branchCity").value = "";
                document.getElementById("branchZipPre").value = "";
                document.getElementById("branchZipExten").value = "";
                document.getElementById("branchEmail").value = "";
                document.getElementById("branchPhoneNum1").value = "";
                document.getElementById("branchPhoneNum2").value = "";
                document.getElementById("branchPhoneNum3").value = "";
                document.getElementById("branchFax").value = "";
            }
        });
    });


    $('#clear').click(function() {
        document.getElementsByTagName("form")[0].reset();
    });

</script>

<script type="text/javascript">
    function EditBranch(index) {

        var model = @Html.Raw(Json.Encode(Model));
        console.log(model);
        console.log(index);
        document.getElementById("branchName").value = model.NonRegBranches[index].BranchName;
        document.getElementById("branchAddress1").value = model.NonRegBranches[index].BranchAddress1;
        document.getElementById("branchAddress2").value = model.NonRegBranches[index].BranchAddress2;
        document.getElementById("StateId").value = model.NonRegBranches[index].StateId;
        document.getElementById("branchCity").value = model.NonRegBranches[index].BranchCity;
        document.getElementById("branchZipPre").value = model.NonRegBranches[index].ZipPre;
        document.getElementById("branchZipExten").value = model.NonRegBranches[index].Extention;
        document.getElementById("branchEmail").value = model.NonRegBranches[index].BranchEmail;
        document.getElementById("branchPhoneNum1").value = model.NonRegBranches[index].BranchPhoneNum1;
        document.getElementById("branchPhoneNum2").value = model.NonRegBranches[index].BranchPhoneNum2;
        document.getElementById("branchPhoneNum3").value = model.NonRegBranches[index].BranchPhoneNum3;
        document.getElementById("branchFax").value = model.NonRegBranches[index].BranchFax;
        document.getElementById("branchCode").value = model.NonRegBranches[index].BranchCode;
        document.getElementById("RegBranchId").value = model.NonRegBranches[index].BranchId;
        document.getElementById("NonRegCompanyId").value = model.NonRegBranches[index].BranchCompany;

    };

    function CreateNewBranch(){
        document.getElementById("branchName").value = "";
        document.getElementById("branchAddress1").value = "";
        document.getElementById("branchAddress2").value = "";
        document.getElementById("StateId").value = "";
        document.getElementById("branchCity").value = "";
        document.getElementById("branchZipPre").value = "";
        document.getElementById("branchZipExten").value = "";
        document.getElementById("branchEmail").value = "";
        document.getElementById("branchPhoneNum1").value = "";
        document.getElementById("branchPhoneNum2").value = "";
        document.getElementById("branchPhoneNum3").value = "";
        document.getElementById("branchFax").value = "";
        document.getElementById("branchCode").value = "";
        document.getElementById("RegBranchId").value = "";
        document.getElementById("NonRegCompanyId").value = "";
    }
</script>

