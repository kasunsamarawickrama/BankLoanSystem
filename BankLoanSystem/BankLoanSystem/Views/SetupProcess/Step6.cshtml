@using BankLoanSystem.Models

@model BankLoanSystem.Models.LoanSetupStep1
<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>






@using (Ajax.BeginForm("Step6", "SetupProcess", new AjaxOptions()
{
    OnSuccess = "Progress(7) ;",
    OnFailure = "handleErrorMsg",
    HttpMethod = "POST",
    InsertionMode = InsertionMode.Replace,
    UpdateTargetId = "changeContainer",
    LoadingElementId = "loadingDiv"
}, new { id = "form" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h2>Step 1 - Loan Setup</h2>
       
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
       <div class="text-danger">@ViewBag.Error</div> 
        <div class="form-group">
            <div class="control-label col-sm-2">

               
                <label for="RegisteredBranchId">@ViewBag.ThisCompanyType Branch</label>

                @if (ViewBag.RegisteredBranchId.Items.Count != 1) {
                <span style="color:red">*</span>
                }
                
            </div>

            <div class="col-xs-8">

                @if (ViewBag.userroleName == "Admin")
                {
                    @Html.HiddenFor(model => model.RegisteredBranchId)
                    @Html.LabelFor(model => model.RegisteredBranchId, (string)ViewBag.RegisteredBranchId.Items[0].BranchName, htmlAttributes: new { @class = "form-control", id = "RegisteredBranchId" })
                    @*@Html.DropDownListFor(model => model.RegisteredBranchId, null, htmlAttributes: new { @class = "form-control", id = "RegisteredBranchId", @style = "disabled:disabled" })*@
                }
                else {

                    if (ViewBag.RegisteredBranchId.Items.Count == 1)
                    {
                        @Html.HiddenFor(model => model.RegisteredBranchId)
                        @Html.LabelFor(model => model.RegisteredBranchId, (string)ViewBag.RegisteredBranchId.Items[0].BranchName, htmlAttributes: new { @class = "form-control", style= "border:none;border-radius:none;-webkit-box-shadow:nonr;box-shadow:none;" })
                        @*@Html.DropDownListFor( model => model.RegisteredBranchId, null, htmlAttributes: new { @class = "form-control", id = "RegisteredBranchId" })*@
                   }
                    else
                    {
                                        @Html.DropDownListFor(model => model.RegisteredBranchId, null, "--Select branch--", htmlAttributes: new { @class = "form-control", id = "RegisteredBranchId", @onchange = "javascript:GetNonRegisteredBranches(this.value);" })
                    }



                                    @Html.ValidationMessageFor(model => model.RegisteredBranchId, "", new { @class = "text-danger" })

                }
            </div>
        </div>

        <div class="form-group">
            <div class="control-label col-sm-2">


                @if (ViewBag.ThisCompanyType == "Lender")
                            {
                    <label for="RegisteredBranchId">Dealer Branch</label>
                }
                else {
                    <label for="RegisteredBranchId">Lender Branch</label>
                }
@if (ViewBag.nonRegisteredBranchId.Items.Count != 1)
                        {
    <span style="color:red">*</span>
} 

                
            </div>

            <span id="loadingSpan" style="display:none">

                <img src="~/Images/small_loading.gif" />
            </span>
            <div class="col-xs-8">

                @if (ViewBag.nonRegisteredBranchId.Items.Count == 1)
                        {
                            @Html.HiddenFor(model => model.nonRegisteredBranchId)
                @Html.LabelFor(model => model.nonRegisteredBranchId, (string)ViewBag.nonRegisteredBranchId.Items[0].CompanyNameBranchName, htmlAttributes: new { @class = "form-control" , style = "border:none;border-radius:none;-webkit-box-shadow:nonr;box-shadow:none;" })
                @*@Html.DropDownListFor( model => model.RegisteredBranchId, null, htmlAttributes: new { @class = "form-control", id = "RegisteredBranchId" })*@
                } else {
                @Html.DropDownListFor(model => model.nonRegisteredBranchId, null, "--Select branch--", htmlAttributes: new { @class = "form-control", id = "NonRegisteredBranchId" })
                @Html.ValidationMessageFor(model => model.nonRegisteredBranchId, "", new { @class = "text-danger" })

                }
            </div>
        </div>


        <div class="form-group">

            <div class="control-label col-sm-2">
                @Html.LabelFor(model => model.loanNumber, htmlAttributes: new { })<span style="color:red"> *</span>
            </div>

            <div class="col-xs-8" id="loanNumber" style="display:none">
                @Html.EditorFor(model => model.loanNumber, new { htmlAttributes = new { @class = "form-control", @id = "loanNumber", maxlength = 30 } })
                @Html.ValidationMessageFor(model => model.loanNumber, "", new { @class = "text-danger" })
            </div>

            <div class="col-xs-8" id="loanNumberDisplay">
                @Html.HiddenFor(model => model.loanNumber)
                @Html.EditorFor(model => model.loanNumberForDisplay, new { htmlAttributes = new { @class = "form-control", @id = "loanNumber", onclick = "$('#loanNumberDisplay').hide();$('#loanNumberForDisplayError').hide();$('#loanNumber').show();$('#loanNumber').children('input').focus();$('#loanNumber').children('input').val($('#loanNumber').children('input').val());" } })
                @Html.ValidationMessageFor(model => model.loanNumber, "", new { @class = "text-danger" })
                @Html.ValidationMessageFor(model => model.loanNumberForDisplay, "", new { @class = "text-danger", id = "loanNumberForDisplayError" })
            </div>
        </div>

        <div class="form-group">

            <div class="control-label col-sm-2">
                @Html.LabelFor(model => model.startDate, htmlAttributes: new { })<span style="color:red"> *</span>
            </div>


            <div class="col-xs-3" id="startDateDiv" style="float:left;margin-left: 170px;" >
                @Html.EditorFor(model => model.startDate, new { htmlAttributes = new { @class = "form-control", placeholder = "MM/DD/YYYY", @id = "startDate" , autocomplete = "off" } })
                @Html.ValidationMessageFor(model => model.startDate, "", new { @class = "text-danger" })
            </div>

           
            
        </div>

        <div class="form-group">

            <div class="control-label col-sm-2">
                @Html.LabelFor(model => model.maturityDate, htmlAttributes: new { })<span style="color:red"> *</span>
            </div>

            <div class="col-xs-3" id="maturityDateDiv" style="float:left;margin-left: 146px;">
                @Html.EditorFor(model => model.maturityDate, new { htmlAttributes = new { @class = "form-control", @id = "maturityDate", placeholder = "MM/DD/YYYY", autocomplete = "off" } })
                @Html.ValidationMessageFor(model => model.maturityDate, "", new { @class = "text-danger" })
            </div>


          
        </div>

    <div class="form-group">
        <div class="control-label col-sm-2">
            @Html.LabelFor(model => model.payOffPeriod, htmlAttributes: new { })<span style="color:red"> *</span>
        </div>
      @{
          List<SelectListItem> listItems = new List<SelectListItem>();

          listItems.Add(new SelectListItem
          {
              Text = "--Select--",
              Value = "-1",
              Selected = true

          });
          listItems.Add(new SelectListItem
          {
              Text = "Months",
              Value = "1"
          });
          listItems.Add(new SelectListItem
          {
              Text = "Days",
              Value = "0"

          });

    }

    <div class="col-xs-3" style="float:left;margin-left: 140px;">



        @Html.DropDownListFor(model => model.payOffPeriodType, listItems, htmlAttributes: new {@id= "payOffPeriodType", @class = "form-control",onchange = "setPayOffPeriod()" })
        @Html.ValidationMessageFor(model => model.payOffPeriodType, "", new { @class = "text-danger" })



    </div>

    <div class="col-xs-3" style="float:left">
            @Html.EditorFor(model => model.payOffPeriod, new { htmlAttributes = new { @class = "form-control" ,min =1, @id= "payOffPeriod" ,@onblur="checkTheRange(this.value)"} })
            @Html.ValidationMessageFor(model => model.payOffPeriod, "", new { @class = "text-danger" })
            
        <span id="outOffRangeError" class="text-danger field-validation-error" style="display:none" >The pay off period is out of Range.</span>
        </div>




    </div>



    <div class="form-group">
        <div class="control-label col-sm-2">
            @Html.LabelFor(model => model.loanAmount, htmlAttributes: new { })<span style="color:red"> *</span>
        </div>

        <span style="float:left;margin-left: 130px;margin-top: 10px;font-size: 26px;">$</span>
        <div class="col-xs-4" style="float:left;">
            @Html.EditorFor(model => model.loanAmount, new { htmlAttributes = new { @class = "form-control", placeholder="0.00", @id = "loanAmount" , maxlength = 15 , style="text-align:right"} })
            @Html.ValidationMessageFor(model => model.loanAmount, "", new { @class = "text-danger" })
        </div>
        
    </div>

    <div class="form-group">
        <div class="control-label col-sm-2">
            @Html.LabelFor(model => model.advancePercentage, htmlAttributes: new { })<span style="color:red"> *</span>
        </div>

        <div class="col-xs-2" style="float:left;margin-left: 98px;">
            @Html.EditorFor(model => model.advancePercentage, new { htmlAttributes = new { @class = "form-control" , max = 100, maxlength = 3 ,min=1, @id= "advancePercentage"  } })
            @Html.ValidationMessageFor(model => model.advancePercentage, "", new { @class = "text-danger" })
        </div>
        <span style="float:left;margin-top: 10px;font-size: 26px;">%</span>
    </div>

        
        <div class="form-group">
            <div class="control-label col-sm-2">
                @Html.LabelFor(model => model.paymentMethod, htmlAttributes: new { })<span style="color:red"> *</span>
            </div>

            <div class="col-xs-8">
                @Html.DropDownListFor(model => model.paymentMethod, new SelectList(ViewBag.paymentMethods), "--Select a Payment Method--", htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.paymentMethod, "", new { @class = "text-danger" })
            </div>
        </div>



        <div class="form-group">
            <div class="control-label col-sm-2">
                @Html.LabelFor(model => model.allUnitTypes, htmlAttributes: new { })<span style="color:red"> *</span>
            </div>



            <div class="col-xs-8" style="margin-top: 20px;">

                @for (int i = 0; i < Model.allUnitTypes.Count; i++)
                {
                   
                    <div class="col-xs-7">
                        @Html.HiddenFor(m => m.allUnitTypes[i].unitTypeId)
                        @Html.CheckBoxFor(m => m.allUnitTypes[i].isSelected, htmlAttributes: new {@id="checkedBox_"+ i, @onchange = "javascript:showDefaultUnitOption(this.checked," + i + ")" })
                        @Html.LabelFor(m => m.allUnitTypes[i].unitTypeName, Model.allUnitTypes[i].unitTypeName)

                        <div class="col-xs-5">
                            <div class="btn btn-warning option" style="display:none;float:right;" id="radioStyle-@i">
                                @Html.RadioButtonFor(model => model.defaultUnitType, Model.allUnitTypes[i].unitTypeId, htmlAttributes: new { @style = "display:none;", @id = "radio-" + i }) Make Default
                            </div>

                        </div>
                    </div>



                }




                @Html.ValidationMessageFor(model => model.defaultUnitType, "", new { @class = "text-danger", @id="unitTypeError" })
            </div>
          

        </div>


       
            @{
                List<SelectListItem> yesOrNoList = new List<SelectListItem>();

                yesOrNoList.Add(new SelectListItem
                {
                    Text = "--Select--",
                    Value = ""
                });
                yesOrNoList.Add(new SelectListItem
                {
                    Text = "Yes",
                    Value = "true"
                });
                yesOrNoList.Add(new SelectListItem
                {
                    Text = "No",
                    Value = "false"
                });

                List<SelectListItem> yesOrNoList2 = yesOrNoList;
                List<SelectListItem> yesOrNoList3 = new List<SelectListItem>();
                yesOrNoList3.Add(new SelectListItem
                {
                    Text = "--Select--",
                    Value = ""
                });
                yesOrNoList3.Add(new SelectListItem
                {
                    Text = "Yes",
                    Value = "true"
                });
                yesOrNoList3.Add(new SelectListItem
                {
                    Text = "No",
                    Value = "false"
                });
            }
    


        <div class="form-group">
            <div class="col-xs-9" style="margin-top: 18px;float:left;">

                @Html.LabelFor(m => m.isEditAllowable, new { style = "display: initial;" })<span style="color:red;"> *</span>

            </div>
            <div class="control-label col-sm-2" >
               
                
               @Html.DropDownListFor(model => model.isEditAllowable, yesOrNoList, htmlAttributes: new { @class = "form-control", @id = "isEditAllowable" })
                @Html.ValidationMessageFor(model => model.isEditAllowable, "", new { @class = "text-danger" })

            </div>

            
        </div>

        <div class="form-group">
        <div class="col-xs-9" style="margin-top: 18px;float:left">

            @Html.LabelFor(model => model.isInterestCalculate, htmlAttributes: new { })<span style="color:red"> *</span>

        </div>
        <div class="control-label col-sm-2">


            @Html.DropDownListFor(model => model.isInterestCalculate, yesOrNoList2, htmlAttributes: new { @class = "form-control",@id= "isInterestCalculate" })
            @Html.ValidationMessageFor(model => model.isInterestCalculate, "", new { @class = "text-danger" })




        </div>


    </div>
        
    <div class="form-group">
        <div class="col-xs-9" style="margin-top: 18px;float:left">

           @Html.Label("Do you want auto reminder for renewal")<span style="color:red"> *</span>

        </div>
        <div class="control-label col-sm-2">

            @Html.DropDownListFor(model => model.autoReminder, yesOrNoList3, htmlAttributes: new { @class = "form-control", @id = "autoRem", @onchange = "javascript:showAutoReminderEmail(this.value)" })
            @*@Html.DropDownList("auto reminder", yesOrNoList3, htmlAttributes: new {@id="autoRem", @class = "form-control", @onchange = "javascript:showAutoReminderEmail(this.value)" })*@

            @Html.ValidationMessageFor(model => model.autoReminder, "", new { @class = "text-danger" })


        </div>


    </div>

        

        <div id="AutoReminderEmail" class="internal-panel" style="display:none">
            <div class="form-group">
                <div class="control-label col-sm-2">
                    @Html.LabelFor(model => model.autoReminderPeriod, htmlAttributes: new { })
                </div>

                <div class="col-xs-4" style="float:right;margin-left: 28px;">
                    @Html.EditorFor(model => model.autoReminderPeriod, new { htmlAttributes = new {@id= "emailPeriod", @class = "form-control" , @onblur = "checkTheEmailRange(this.value)" } })
                    @Html.ValidationMessageFor(model => model.autoReminderPeriod, "", new { @class = "text-danger"})

                    @Html.ValidationMessage("Out of Range", "Out of Range", new { @class = "text-danger hidden", @id = "emailReminderError" })
                </div>
               
            </div>
            <div class="form-group">
                <div class="control-label col-sm-2">
                    @Html.LabelFor(model => model.autoReminderEmail, htmlAttributes: new { })<span style="color:red">*</span>
                </div>

                <div class="col-xs-8">
                    @Html.EditorFor(model => model.autoReminderEmail, new { htmlAttributes = new { @class = "form-control", @id = "AutoEmail" } })
                    @Html.ValidationMessageFor(model => model.autoReminderEmail, "", new { @class = "text-danger", @id = "errorAutoEmail" })
                    
                </div>
            </div>

        </div>

        

        <div class="form-group">
            <div>
                <nav>
                    <ul class="pager">

                        <li>
                            <input type="submit" value="Next" class="btn btn-primary m-b" id="Next" style="float: right; margin-left: 10px" />
                        </li>
                        <li>
                            <input type="button" id="clear" value="Clear" class="btn btn-primary m-b" style="float: right; margin-left: 10px" />
                        </li>

                    </ul>
                </nav>
            </div>
        </div>
    </div>
}

<script>

    $("#Next").click(function (e) {

        var valid = 0;
        $('.form-horizontal :input[type="text"]').each(function () {
            if ($(this).val() != "") valid += 1;
        });

        $('.form-horizontal :input[type="datetime"]').each(function () {
            if ($(this).val() != "") valid += 1;
        });

        $('.form-horizontal :input[type="number"]').each(function () {
            if ($(this).val() != "") valid += 1;
        });

        $('.form-horizontal select').each(function () {
            if (($(this).val() == "" || $(this).val() < 0)) {} else valid += 1;
        });
        

        if (valid >= 11) {
            if ($("input:checked").length == 0 ) {
                $("#unitTypeError").text('Select Atleast One unit type');
                e.preventDefault();
            }
        } else {
            if ($("input:checked").length == 0) {
                $("#unitTypeError").text('Select Atleast One unit type');
                
            }
        }
       
        
        
    });

    $('#advancePercentage').keypress(function(evt){
    // preventing to type 'e' or 'E'
        if (evt.keyCode == 101 || evt.keyCode == 69 || $(this).val() > 100 ) {
            evt.preventDefault();
        }
        
      
    });

   
    $('#clear').click(function () {

        document.getElementsByTagName("form")[0].reset();
        for (var i = 0 ; i < 8; i++) {

            if ($("#checkedBox_" + i).is(':checked')) {

                $("#radioStyle-" + i).show();
                $("#radio-" + i).show();
            } else {
                $("#radio-" + i).prop("checked", false);
                $("#radio-" + i).hide();
                $("#radioStyle-" + i).hide();

            }
            $('input').next('span').children('span').text('');
            $('select').next('span').children('span').text('');
            $("#unitTypeError").text('');
            $('#loanNumberForDisplayError').hide(); 
            $("#outOffRangeError").text('');
            $("#payOffPeriod").removeClass('input-validation-error');
            @if(Model.loanNumber == null){
                <text>
            $('#loanAmount').val('');
            $('#advancePercentage').val('');
            $('#startDate').val('');
            $('#maturityDate').val('');
            $('#payOffPeriod').val('');
            $('#payOffPeriodType').val('-1');
            $('#isEditAllowable').val(''); 
            $('#isInterestCalculate').val(''); 
            $('#autoRem').val(''); 

            </text>
            }
        }



        @if(Model.autoReminderEmail == null || Model.autoReminderEmail == "")
        {

             <text>$("#AutoEmail").val("");</text>
            <text>$("#AutoReminderEmail").hide();</text>
            <text>$("#emailPeriod").val("");</text>
        <text>$("#errorAutoEmail").text("");</text>

        }
        else
        {
             <text>$('#autoRem').val("true");</text>
        <text> showAutoReminderEmail("true");</text>
        }


    });
</script>





<style type="text/css">
    .webGrid {
        margin: 4px;
        border-collapse: collapse;
        width: 500px;
        font-family: Tahoma;
        font-size: small;
    }

    .grid-header {
        background-color: #990000;
        font-weight: bold;
        color: White !important;
    }

    .webGrid th a {
        color: White;
        text-decoration: none;
    }

    .webGrid th, .webGrid td {
        border: 1px solid black;
        padding: 5px;
    }

    .alt {
        background-color: #F4EFEF;
    }

    .webGrid th a:hover {
        text-decoration: underline;
    }

    .to-the-right {
        text-align: right;
    }
</style>




<script>


    var startDate,
        endDate,
        updateStartDate = function () {
            startPicker.setStartRange(startDate);
            endPicker.setStartRange(startDate);
            var minNextDate = new Date(startDate);
            //alert(minNextDate);
            minNextDate.setDate(startDate.getDate() + 1);
            endPicker.setMinDate(minNextDate);
        },
 updateEndDate = function () {
     startPicker.setEndRange(endDate);
     
     var maxNextDate = new Date(endDate);
     //alert(minNextDate);
     maxNextDate.setDate(endDate.getDate() - 1);
     startPicker.setMaxDate(maxNextDate);
     endPicker.setEndRange(endDate);
 },
 startPicker = new Pikaday({
     field: document.getElementById('startDate'),
     format: 'l',
     bound: true,

     onSelect: function () {
         startDate = this.getDate();
         $("#payOffPeriod").val("");
         $("#outOffRangeError").hide();
         $("#payOffPeriod").removeClass('input-validation-error');
         updateStartDate();
         endPicker.enableDayFn();

     }
 }),
 endPicker = new Pikaday({
     field: document.getElementById('maturityDate'),
     format: 'l',

     onSelect: function () {
         endDate = this.getDate();
         $("#payOffPeriod").val("");
         $("#outOffRangeError").hide();
         $("#payOffPeriod").removeClass('input-validation-error');
         updateEndDate();
     }
 }),
 _startDate = startPicker.getDate(),
        _endDate = endPicker.getDate();

        if (_startDate) {
            startDate = _startDate;
            updateStartDate();
        }

        if (_endDate) {
            endDate = _endDate;
            updateEndDate();
        }


        //function changeToTwoDecimal(number) {
        //    var val = $.trim(number);
        //    if (val.indexOf(',') > -1) {
        //        val = val.replace(',', '.');
        //    }
        //    var num = parseFloat(val);
        //    var num = num.toFixed(2);
        //    if (isNaN(num)) {
        //        num = '';
        //    }
        //    $(this).val(num);
        //}



        $(function () {

            $('#loanAmount').blur(function () {

                var val = $.trim($(this).val());

                if (val.indexOf(',') > -1) {
                    val = val.replace(',', '');
                }
                //if (val.indexOf('$') > -1) {
                //    val = val.replace('$', '');
                //}
                var num = parseFloat(val);
                var num = num.toFixed(2);
                if (isNaN(num)) {
                    num = '';
                }


                $(this).val( num);
            });

        });

        function showDefaultUnitOption(checked,value) {
            if (checked) {
                $("#radioStyle-" + value).show();
                $("#radio-" + value).show();

                // if($(this).children().length == 1))

                //  $("#radio-" + value).closest('.col-xs-7').siblings().children('.col-xs-5').find('input')
                if ($("input:checked").length == 1) {
                    $("#radio-" + value).prop("checked", true);
                    $("#unitTypeError").text('');
                }

            } else {
                $("#radio-" + value).prop("checked", false);
                $("#radio-" + value).hide();
                $("#radioStyle-" + value).hide();

                if ($("input:checked").length == 1) {
                    $("input:checked").parent().children('.col-xs-5').find('input').prop("checked", true);
                }

            }
            

        }

        function showAutoReminderEmail(value) {
            if (value == "true") {
                $("#AutoReminderEmail").show();
                $("#emailPeriod").val("");




            } else {
                $("#AutoEmail").val("");
                $("#AutoReminderEmail").hide();
                $("#emailPeriod").val("");
                $("#errorAutoEmail").text("");
            }

        }

        function setPayOffPeriod() {
            
            $("#payOffPeriod").val("");
            $("#outOffRangeError").hide();
            $("#payOffPeriod").removeClass('input-validation-error');
        }

        function checkTheRange(value) {
            

            var oneDay = 24 * 60 * 60 * 1000;	// hours*minutes*seconds*milliseconds
            var firstDate = new Date($("#startDate").val());
            var secondDate = new Date($("#maturityDate").val());
            var type = $("#payOffPeriodType").val();

            if (type == 0) {
                var diffDays = Math.abs((firstDate.getTime() - secondDate.getTime()) / (oneDay));
                if (value > diffDays) {
                    $("#outOffRangeError").show();
                    $("#payOffPeriod").addClass('input-validation-error');
                    
                } else {
                    $("#outOffRangeError").hide();
                    $("#payOffPeriod").removeClass('input-validation-error');
                }
                
            } else {
                var diffMonths = (secondDate.getMonth() - firstDate.getMonth()
       + (12 * (secondDate.getFullYear() - firstDate.getFullYear())));
                if (value > diffMonths) {
                    $("#outOffRangeError").show();
                    $("#payOffPeriod").addClass('input-validation-error');
                    
                } else {
                    $("#outOffRangeError").hide();
                    $("#payOffPeriod").removeClass('input-validation-error');
                }
            }
            

        }

        function checkTheEmailRange(value) {


            var oneDay = 24 * 60 * 60 * 1000;	// hours*minutes*seconds*milliseconds
            var firstDate = new Date($("#startDate").val());
            var secondDate = new Date($("#maturityDate").val());
            

            
                var diffDays = Math.abs((firstDate.getTime() - secondDate.getTime()) / (oneDay));
                if (value > diffDays) {
                    $("#emailReminderError").removeClass("hidden"); 
                    $("#emailPeriod").addClass("input-validation-error");

                } else {
                    $("#emailReminderError").addClass("hidden");
                    $("#emailPeriod").removeClass("input-validation-error");

                   

                }

            


        }







        $(".tab").parent("li").removeClass("active");
        $(".tab.6").parent("li").addClass("active").siblings().removeClass('active');
        $(".main-tab.1").addClass('collapsed');
        $("#demo").removeClass("in");
        $(".main-tab.2").removeClass('collapsed');
        $("#demo2").addClass("in");

</script>

@if (ViewBag.userroleName != "Admin")
{
    <script>
        $("#loanNumber").attr("disabled", "disabled");

        function GetNonRegisteredBranches(_regBranchId) {
            if (_regBranchId == 0) {
                $("#loanNumber").attr("disabled", "disabled");
                return;
            }
            $('#loadingSpan').show();
            var procemessage = "<option value='0'> Please wait...</option>";
            $("#ddlcity").html(procemessage).show();
            var url = "/SetupProcess/getNonRegBranchesByRegBranchId/";

            $.ajax({
                url: url,
                data: { regBranchId: _regBranchId },
                cache: false,
                type: "POST",
                success: function (data) {
                    var markup = "<option value='0'>--Select Branch--</option>";
                    for (var x = 0; x < data.length; x++) {
                        markup += "<option value=" + data[x].Value + ">" + data[x].Text + "</option>";
                    }
                    $("#NonRegisteredBranchId").html(markup).show();
                    $('#loadingSpan').hide();
                    $("#loanNumber").removeAttr("disabled");
                },
                error: function (reponse) {
                    $('#loadingSpan').hide();
                    alert("error : " + reponse);
                }
            });
           

        }
    </script>
}
@{ 
    if(Model.loanNumber != null)
    {
       <script>
           $('#clear').prop('value', 'Reset');
       </script>

   
    if (Model.autoReminderEmail != "")
    {
        <script>
            $('#autoRem').val("true");
            showAutoReminderEmail("true");
        </script>
    }

    foreach (UnitType UnitType in (List<UnitType>)Model.selectedUnitTypes)
    {
        <script>
            $("#radioStyle-@(UnitType.unitTypeId-1)").show();
        $("#radio-@(UnitType.unitTypeId - 1)").show();

        </script>
        }
    }
    else
    {
        <script>
            $('#loanAmount').val('');
            $('#advancePercentage').val('');
            $('#startDate').val('');
            $('#maturityDate').val('');
            $('#payOffPeriod').val('');
            $('#payOffPeriodType').val('-1');
            $('#isEditAllowable').val(''); 
            $('#isInterestCalculate').val(''); 
            $('#autoRem').val(''); 
            $('#emailPeriod').val('');
        </script>
    }

}
<script src="~/scripts/commonFunctions.js"></script>