@using BankLoanSystem.Models
@if (ViewBag.AjaxRequest == null)
{
    ViewBag.Title = "Step9";
    Layout = "~/Views/Shared/_SetupProcess.cshtml";
}
@model BankLoanSystem.Models.LoanSetupStep1

<style>
    .form-horizontal .control-label{
        text-align:left;
    }
    .lable_style{
        width:132px !important;
    }
    .control-label.col-sm-2.lable_style > label{
        width:100% !important;
    }
    .col-xs-8 {
    width: 66.66666667%;
}
    .short_text_field {
    width: 180px;
}

</style>
<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js?version=@((new Random()).Next(1,10000))."></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js?version=@((new Random()).Next(1,10000))."></script>
<script src="~/scripts/CommonFunctions.js"></script>

<div class="form-horizontal">

    <div id="page-wrapper" class="gray-bg sidebar-content companySetupWrapper lonesetup_border">
        <div class="ibox float-e-margins">
            <div class="ibox-title">
                <div class="container body-content">

                    <div class="row">
                        <div class="container body-content new_container">
                            <div class="setupImage"><img src="~/Images/loanSetupImage.png" width="100" alt=""></div>
                            <div class="setupTitle">
                                <h2>Loan Setup</h2>
                            </div>
                            <div style="clear:both;"></div>

                            @using (Ajax.BeginForm("Step6", "SetupProcess", new AjaxOptions()
                            {

                                OnFailure = "handleErrorMsg",
                                HttpMethod = "POST",
                                InsertionMode = InsertionMode.Replace,
                                UpdateTargetId = "changeContainer",
                                LoadingElementId = "loadingDiv"
                            }, new { id = "form" }))
                            {
                                @Html.AntiForgeryToken()

                                <div class="form-horizontal new_form_horizontal">
                                    <div class="topErrors">
                                        <p class="err_msg">@Html.ValidationSummary(true, "", new { @class = "text-danger" })</p>
                                        <div class="text-danger">@ViewBag.Error</div>
                                    </div>

                                    <div class="form-group new_form_group">
                                        <div class="control-label col-sm-2 lable_style">
                                            <label>@ViewBag.ThisCompanyType Branch</label>
                                        </div>
                                        <div class="col-xs-8 text_field">
                                            @if (ViewBag.userroleName == "Admin")
                {
                                                @Html.HiddenFor(model => model.RegisteredBranchId, new { @Value = (int)ViewBag.RegisteredBranchId.Items[0].BranchId })
                                                @Html.LabelFor(model => model.RegisteredBranchId, (string)ViewBag.RegisteredBranchId.Items[0].BranchName, htmlAttributes: new { @class = "form-control text_field_input", id = "RegisteredBranchId" })
                                            }
                                            else {

                                                if (ViewBag.RegisteredBranchId.Items.Count == 1)
                                                {
                                                    @Html.HiddenFor(model => model.RegisteredBranchId, new { @Value = (int)ViewBag.RegisteredBranchId.Items[0].BranchId })
                                                    @Html.LabelFor(model => model.RegisteredBranchId, (string)ViewBag.RegisteredBranchId.Items[0].BranchName, htmlAttributes: new { @class = "form-control text_field_input", style = "border:none;border-radius:none;-webkit-box-shadow:nonr;box-shadow:none;margin-top: 3px;display: block;" })
                                                }
                                                else
                                                {
                                                    @Html.DropDownListFor(model => model.RegisteredBranchId, null, "--Select branch--", htmlAttributes: new { @class = "form-control text_field_input", id = "RegisteredBranchId", @onchange = "javascript:GetNonRegisteredBranches(this.value);" })
                                                }
                                            }
                                        </div>
                                        <div class="err_msg_box">
                                            <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.RegisteredBranchId, "", new { @class = "text-danger" })</p>
                                        </div>
                                    </div>
                                    <div class="form-group new_form_group">
                                        <div class="control-label col-sm-2 lable_style">
                                            @if (ViewBag.ThisCompanyType == "Lender")
                                            {
                                                <label for="RegisteredBranchId">Dealer Branch</label>
                                            }
                                            else {
                                                <label for="RegisteredBranchId">Lender Branch</label>
                                            }
                                        </div>
                                        <span id="loadingSpan" style="display:none">
                                            <img src="~/Images/small_loading.gif" />
                                        </span>

                                        @if (ViewBag.nonRegisteredBranchId.Items.Count == 1)
                {
                                            <div class="col-xs-8 text_field">
                                                @Html.HiddenFor(model => model.nonRegisteredBranchId, new { @Value = (int)ViewBag.nonRegisteredBranchId.Items[0].NonRegBranchId })
                                                @Html.LabelFor(model => model.nonRegisteredBranchId, (string)ViewBag.nonRegisteredBranchId.Items[0].CompanyNameBranchName, htmlAttributes: new { @class = "form-control text_field_input", style = "border:none;border-radius:none;-webkit-box-shadow:nonr;box-shadow:none;margin-top: 3px;display: block;" })
                                            </div>
                                        }
                                        else {

                                            <div class="col-xs-8 text_field">
                                                @Html.DropDownListFor(model => model.nonRegisteredBranchId, null, "--Select branch--", htmlAttributes: new { @class = "form-control text_field_input", id = "NonRegisteredBranchId" })
                                            </div>
                                        }
                                        <div class="err_msg_box">
                                            <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.nonRegisteredBranchId, "", new { @class = "text-danger" })</p>
                                        </div>

                                    </div>

                                    <div class="form-group new_form_group">
                                        <div class="control-label col-sm-2 lable_style">
                                            <label>Loan Number   <span class='icon-help_outline 1'></span></label>
                                        </div>
                                        <div class="col-xs-8 text_field" id="loanNumber" style="display:none;width:290px;">
                                            @Html.EditorFor(model => model.loanNumber, new { htmlAttributes = new { @class = "form-control text-box single-line text_field_input", @id = "loanNumber", maxlength = 30 } })

                                        </div>
                                        <div class="col-xs-8 text_field" id="loanNumberDisplay" style="width:290px;">
                                            @Html.HiddenFor(model => model.loanNumber)
                                            @Html.EditorFor(model => model.loanNumberForDisplay, new { htmlAttributes = new { @class = "form-control text-box single-line text_field_input", @id = "loanNumber", onclick = "$('#loanNumberDisplay').hide();$('#loanNumberForDisplayError').hide();$('#loanNumber').show();$('#loanNumber').children('input').focus();$('#loanNumber').children('input').val($('#loanNumber').children('input').val());" } })
                                        </div>
                                        <div class="err_msg_box">
                                            <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.loanNumber, "", new { @class = "text-danger" }) &nbsp;&nbsp; @Html.ValidationMessageFor(model => model.loanNumberForDisplay, "", new { @class = "text-danger", id = "loanNumberForDisplayError" })</p>
                                        </div>
                                    </div>
                                    <div class="form-group new_form_group">
                                        <div class="control-label col-sm-2 lable_style">
                                            <label>Start Date   <span class='icon-help_outline 2'></span></label>
                                        </div>
                                        <div class="col-xs-8 text_field short_text_field" id="startDateDiv" style="">
                                            @Html.EditorFor(model => model.startDate, new { htmlAttributes = new { @class = "form-control text-box single-line text_field_input", placeholder = "MM/DD/YYYY", @id = "startDate", autocomplete = "off" } })
                                        </div>
                                        <div class="err_msg_box">
                                            <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.startDate, "", new { @class = "text-danger" })</p>
                                        </div>
                                    </div>
                                    <div class="form-group new_form_group">
                                        <div class="control-label col-sm-2 lable_style">
                                            <label>Maturity Date   <span class='icon-help_outline 3'></span></label>
                                        </div>
                                        <div class="col-xs-8 text_field short_text_field" id="maturityDateDiv" style="">
                                            @Html.EditorFor(model => model.maturityDate, new { htmlAttributes = new { @class = "form-control text-box single-line text_field_input", @id = "maturityDate", placeholder = "MM/DD/YYYY", autocomplete = "off" } })
                                        </div>
                                        <div class="err_msg_box">
                                            <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.maturityDate, "", new { @class = "text-danger" })</p>
                                        </div>
                                    </div>

                                    @*<div class="form-group new_form_group">
                                        <div class="control-label col-sm-2 lable_style">
                                            <label>Pay Off Period</label>
                                        </div>
                                        @{
                                            List<SelectListItem> listItems = new List<SelectListItem>();

                                            listItems.Add(new SelectListItem
                                            {
                                                Text = "--Select--",
                                                Value = "-1",
                                                Selected = true

                                            });
                                            listItems.Add(new SelectListItem
                                            {
                                                Text = "Months",
                                                Value = "1"
                                            });
                                            listItems.Add(new SelectListItem
                                            {
                                                Text = "Days",
                                                Value = "0"

                                            });

                                        }
                                        <div class="col-xs-3 text_field short_text_field">
                                            @Html.DropDownListFor(model => model.payOffPeriodType, listItems, htmlAttributes: new { @id = "payOffPeriodType", @class = "form-control text-box single-line text_field_input", onchange = "setPayOffPeriod()" })
                                        </div>
                                        <div class="col-xs-4 text_field short_text_field new_zip" style="margin-left:5px;">
                                            @Html.EditorFor(model => model.payOffPeriod, new { htmlAttributes = new { @class = "form-control text-box single-line text_field_input", min = 1, @id = "payOffPeriod", @onblur = "checkTheRange(this.value)" } })

                                        </div>
                                        <div class="err_msg_box">
                                            <p class="err_msg new_err_msg" id="outOffRangeError" style="color:darkorange" ></p>
                                            <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.payOffPeriodType, "", new { @class = "text-danger" }) &nbsp;&nbsp;&nbsp; @Html.ValidationMessageFor(model => model.payOffPeriod, "", new { @class = "text-danger" })</p>
                                            
                                        </div>
                                    </div>*@

                                    <div class="form-group new_form_group">
                                        <div class="control-label col-sm-2 lable_style" >
                                            <label>Loan Amount   <span class='icon-help_outline 4'></span><span style="float:right;margin-top: -3px;font-size: 18px;">$</span></label>
                                        </div>
                                        <div class="col-xs-8 text_field short_text_field">
                                            @Html.EditorFor(model => model.loanAmount, new { htmlAttributes = new { @class = "form-control text-box single-line text_field_input", @id = "loanAmount", maxlength = 15, style = "text-align:right" } })
                                        </div>
                                        <div class="err_msg_box">
                                            <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.loanAmount, "", new { @class = "text-danger" })</p>
                                        </div>
                                    </div>
                                    <div class="form-group new_form_group">
                                        <div class="control-label col-sm-2 lable_style">
                                            <label>Initial Advance %<span class='icon-help_outline 5'></span></label>
                                        </div>
                                        <div class="col-xs-4 text_field short_text_field new_zip">
                                            @Html.EditorFor(model => model.advancePercentage, new { htmlAttributes = new { @class = "form-control text-box single-line text_field_input", max = 100, maxlength = 3, min = 1, @id = "advancePercentage", @type="text", @style= "text-align: right;" } })
                                        </div>
                                        <div class="err_msg_box">
                                            <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.advancePercentage, "", new { @class = "text-danger" })</p>
                                        </div>
                                    </div>
                                    <div class="form-group new_form_group">
                                        <div class="control-label col-sm-2" style="font-weight:normal;color:#545454;font-size:14px;text-align:left;float:left;width:40%;margin-left:-15px;margin-top:-5px">
                                            <label>Select a Payment Method<span class="optional"> (for reference purposes only)</span></label>
                                        </div>
                                        <div class="col-xs-8 text_field short_text_field" style="width:43.5%">
                                            @Html.DropDownListFor(model => model.paymentMethod, new SelectList(ViewBag.paymentMethods), "--Select a Method--", htmlAttributes: new { @class = "form-control text_field_input" })
                                        </div>
                                        <div class="err_msg_box">
                                            <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.paymentMethod, "", new { @class = "text-danger" })</p>
                                        </div>
                                    </div>
                                    <div class="form-group new_form_group">
                                        <div class="control-label col-sm-2 " style="font-weight:normal;color:#545454;font-size:14px;text-align:left;float:left;margin-left:-15px;margin-top:-5px">
                                            <label>Select types of units to be advanced in this loan   <span class='icon-help_outline 6'></span></label>
                                        </div>
                                        <div class="col-xs-8 new_unit_type">
                                            @for (int i = 0; i < Model.allUnitTypes.Count; i++)
                                            {

                                                <div class="col-xs-7 new_unit_cate" style="font-weight:normal;color:#545454;font-size:14px">
                                                    @Html.HiddenFor(m => m.allUnitTypes[i].unitTypeId)
                                                    @Html.CheckBoxFor(m => m.allUnitTypes[i].isSelected, htmlAttributes: new { @id = "checkedBox_" + i, @onchange = "javascript:showDefaultUnitOption(this.checked," + i + ")" })
                                                    @Html.LabelFor(m => m.allUnitTypes[i].unitTypeName, Model.allUnitTypes[i].unitTypeName, htmlAttributes: new { @style = "height:25px;" })
                                                    <div class="col-xs-5">
                                                        <div class="btn btn-warning option" style="display:none;float:right;" id="radioStyle-@i">
                                                            @Html.RadioButtonFor(model => model.defaultUnitType, Model.allUnitTypes[i].unitTypeId, htmlAttributes: new { @style = "display:none;", @id = "radio-" + i }) Make Default
                                                        </div>
                                                    </div>
                                                </div>
                                            }

                                        </div>
                                        <div class="err_msg_box">
                                            <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.defaultUnitType, "", new { @class = "text-danger", @id = "unitTypeError" })</p>
                                        </div>
                                    </div>

                                    @{
                                        List<SelectListItem> yesOrNoList = new List<SelectListItem>();

                                        yesOrNoList.Add(new SelectListItem
                                        {
                                            Text = "--Select--",
                                            Value = ""
                                        });
                                        yesOrNoList.Add(new SelectListItem
                                        {
                                            Text = "Yes",
                                            Value = "true"
                                        });
                                        yesOrNoList.Add(new SelectListItem
                                        {
                                            Text = "No",
                                            Value = "false"
                                        });

                                        List<SelectListItem> yesOrNoList2 = yesOrNoList;
                                        List<SelectListItem> yesOrNoList3 = new List<SelectListItem>();
                                        yesOrNoList3.Add(new SelectListItem
                                        {
                                            Text = "--Select--",
                                            Value = ""
                                        });
                                        yesOrNoList3.Add(new SelectListItem
                                        {
                                            Text = "Yes",
                                            Value = "true"
                                        });
                                        yesOrNoList3.Add(new SelectListItem
                                        {
                                            Text = "No",
                                            Value = "false"
                                        });
                                    }


                                    <div class="form-group new_form_group">
                                        <div class="col-xs-9 new_label_style">
                                            <label class="new_label_style" style="font-weight:normal;color:#545454;font-size:14px;">
                                                Is the User authorized to change the initial advance amount?   <span class='icon-help_outline 7'></span>
                                            </label>
                                        </div>
                                        <div class="control-label col-sm-2 new_text_field" style="margin-top:-5px">
                                            @Html.DropDownListFor(model => model.isEditAllowable, yesOrNoList, htmlAttributes: new { @class = "form-control text_field_input", @id = "isEditAllowable" })

                                        </div>
                                        <div class="err_msg_box">
                                            <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.isEditAllowable, "", new { @class = "text-danger" })</p>
                                        </div>
                                    </div>
                                    <div class="form-group new_form_group" hidden>
                                        <div class="col-xs-9 new_label_style">
                                            <label class="new_label_style">
                                                Do you want to track the interest
                                                @*<span class="optional">(Optional)</span>*@
                                            </label>
                                        </div>
                                        <div class="control-label col-sm-2 new_text_field">
                                            @Html.DropDownListFor(model => model.isInterestCalculate, yesOrNoList2, htmlAttributes: new { @class = "form-control text_field_input", @id = "isInterestCalculate" })
                                        </div>
                                        <div class="err_msg_box">
                                            <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.isInterestCalculate, "", new { @class = "text-danger" })</p>
                                        </div>
                                    </div>

                                    <div class="form-group new_form_group">
                                        <div class="col-xs-9 new_label_style">
                                            <label class="new_label_style" style="font-weight:normal;color:#545454;font-size:14px;">
                                                Would you like a reminder emailed for the loan renewal?<span class='icon-help_outline 8' style="padding-left:5px;"></span>

                                            </label>
                                        </div>
                                        <div class="control-label col-sm-2 new_text_field" style="margin-top:-10px">
                                            @Html.DropDownListFor(model => model.autoReminder, yesOrNoList3, htmlAttributes: new { @class = "form-control text_field_input", @id = "autoRem", @onchange = "javascript:showAutoReminderEmail(this.value)" })

                                        </div>
                                        <div class="err_msg_box">
                                            <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.autoReminder, "", new { @class = "text-danger" })</p>
                                        </div>
                                    </div>
                                    <div id="AutoReminderEmail" style="display:none">
                                        <div class="form-group new_form_group">
                                            <div class="col-xs-9 new_label_style">
                                                <label class="new_label_style">How many days prior to the Maturity Date should the renewal reminder be sent?</label>
                                            </div>
                                            <div class="col-xs-4 new_text_field">
                                                @Html.EditorFor(model => model.autoReminderPeriod, new { htmlAttributes = new { @id = "emailPeriod", @class = "form-control text-box single-line text_field_input", @onblur = "checkTheEmailRange(this.value)" , min = 1, @type="text", @style="text-align: right" } })

                                            </div>
                                            <div class="err_msg_box">
                                                <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.autoReminderPeriod, "", new { @class = "text-danger" })</p>
                                            </div>
                                        </div>


                                        <div class="form-group new_form_group">
                                            <div class="col-xs-9 new_label_style" style="width:150px">
                                                <label>Email for renewal reminder to be sent to</label>
                                            </div>
                                            <div class="col-xs-8 text_field" style="width:350px">
                                                @Html.EditorFor(model => model.autoReminderEmail, new { htmlAttributes = new { @class = "form-control text-box single-line text_field_input", @id = "AutoEmail", placeholder = "example.example.com" } })
                                            </div>
                                            <div class="err_msg_box">
                                                <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.autoReminderEmail, "", new { @class = "text-danger", @id = "errorAutoEmail" })</p>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="form-group new_form_group clear_next clear_next_bordr">
                                        <div>
                                            <nav>
                                                <div class="pager new_pager">
                                                    <div class="button_box algn_left" style="height:30px;">
                                                    </div>
                                                    <div class="button_box algn_center">
                                                        <input value="Next" id="Next" class="btn btn-primary m-b next_clear_button next_back" style="margin-left:10px" type="submit">
                                                    </div>
                                                    <div class="button_box algn_right">
                                                        <input id="clear" value="Clear" class="btn btn-primary m-b next_clear_button clear_back" style="margin-left: 10px" type="button">
                                                    </div>
                                                    <div style="clear:both"></div>
                                                </div>
                                            </nav>
                                        </div>
                                    </div>


                                </div>
                                        }

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>

<div class="rightPanel">
    @{
        @Html.Partial("Step6help")
    }
</div>

<script language="javascript">

  $(document).ready(function(){
      window.scrollTo(0, 0);
  $('.nav li.active ul').removeClass('in');
  $('.nav li').removeClass('active');
  $('.nav li.loan').addClass('active');
  $('.nav li.active ul').addClass('in');


      // helper Funtionality
  var HelpString = $('.right_panel_box p').html();
  var HelpTitle = $('.right_panel_box h4').html();

  $('#loanNumber , .icon-help_outline.1').click(function () {

      $('.right_panel_box p').html('This number will be used throughout the program to identify the loan. You can use the actual loan number or create a unique ID for the loan between 5 and 30 characters.');
      $('.right_panel_box h4').html('Loan number');


  });

  $('#startDate , .icon-help_outline.2').click(function () {

      $('.right_panel_box p').html('The date the loan started.');
      $('.right_panel_box h4').html('Start date');


  });

  $('#maturityDate , .icon-help_outline.3').click(function () {

      $('.right_panel_box p').html('The date the loan matures. The program limits the functions allowed in a loan after the maturity date (until the loan is renewed). If there is no maturity date for the loan, please select a date far into the future (1 year or more).');
      $('.right_panel_box h4').html('Maturity date');


  });

  $('#loanAmount , .icon-help_outline.4').click(function () {

      $('.right_panel_box p').html('This is the total revolving amount available for this loan.');
      $('.right_panel_box h4').html('Loan amount');


  });

  $('#advancePercentage , .icon-help_outline.5').click(function () {

      $('.right_panel_box p').html('This is the percentage of the unit purchase price which is advanced from the loan. <br></br><i>(example: a unit is purchased by the dealer for $10,000 - if your advance % is 80 then $8,000 will be advanced for that unit.)</i>');
      $('.right_panel_box h4').html('Initial advance percentage');


  });

  $('.new_unit_type input , .icon-help_outline.6').click(function () {

      $('.right_panel_box p').html("Select each unit type which is allowed to be advanced on this loan. If more than one unit type is selected then the type of unit which will be the most commonly advanced should be selected as 'Make Default'. For faster operation the default unit type will be preselected on the advance page.");
      $('.right_panel_box h4').html('Select unit types');


  });

  $('#isEditAllowable , .icon-help_outline.7').click(function () {

      $('.right_panel_box p').html("By selecting 'Yes' here, at the time of advance the user will be allowed to change the advance amount on a specific unit to an amount which is different than the precalculated percentage.<br></br>By selecting 'No' the user will not be allowed to change the precalculated advance amount.");
      $('.right_panel_box h4').html('Allow user to change advance amount');


  });

  $('#autoRem , .icon-help_outline.8').click(function () {

      $('.right_panel_box p').html("By selecting 'Yes' you will be asked to provide an email address where you will receive an email reminder prior to the loan maturity date.");
      $('.right_panel_box h4').html('Send loan renewal reminder');


  });

  $('select:not(#isEditAllowable , #autoRem), span:not(.icon-help_outline.1 , .icon-help_outline.2 , .icon-help_outline.3, .icon-help_outline.4, .icon-help_outline.5, .icon-help_outline.6, .icon-help_outline.7, .icon-help_outline.8), input:not(#loanNumber , #startDate, #maturityDate , #loanAmount, #advancePercentage, [name^="allUnitTypes"] ,[id^="radio"]  )').click(function () {

      $('.right_panel_box p').html(HelpString);
      $('.right_panel_box h4').html(HelpTitle);


  });
  })
</script>

<script>
    $('#clear').click(function () {
        document.getElementsByTagName("form")[0].reset();
        $(".text-danger").html("");
        $("#radioStyle-0").css("background-color", "");
        $("#radioStyle-1").css("background-color", "");
        $("#radioStyle-2").css("background-color", "");
        $("#radioStyle-3").css("background-color", "");
        $("#radioStyle-4").css("background-color", "");
        $("#radioStyle-5").css("background-color", "");
        $("#radioStyle-6").css("background-color", "");
        $("#radioStyle-7").css("background-color", "");
    });

    $('#Next').click(function (e) {
        
        var valid = 0;
        $('.form-horizontal :input[type="text"]').each(function () {
            if ($(this).val() != "") valid += 1;
        });

        $('.form-horizontal :input[type="datetime"]').each(function () {
            if ($(this).val() != "") valid += 1;
        });

        $('.form-horizontal :input[type="number"]').each(function () {
            if ($(this).val() != "") valid += 1;
        });

        $('.form-horizontal select').each(function () {
            if (($(this).val() == "" || $(this).val() < 0)) { } else valid += 1;
        });

       
        if (valid >= 8) {
            if ($("input:checked").length == 0) {
                $("#unitTypeError").text('Please select at least one unit type to be advanced on this loan');
                e.preventDefault();
            }
            //else if ($("#emailReminderError").text().length > 0) {
            //    //alert(valid);
            //    e.preventDefault();

            //}
        } else {
            if ($("input:checked").length == 0) {
                $("#unitTypeError").text('Please select at least one unit type to be advanced on this loan');

            }
        }



    });

    $('#advancePercentage').keypress(function (evt) {
        // preventing to type 'e' or 'E'mmitted - piyumi
        if (evt.keyCode == 101 || evt.keyCode == 69 || $(this).val() > 100) {
            evt.preventDefault();
        }




    });


    $('#AutoEmail').keypress(function (e) {
        var res = CheckMaxLenth(this, this.value, 100);
        if (res === 0) {
            e.preventDefault();
            return;
        }

        var array = ['~', '`', '!', '&', '#', '$', '%', '*', '(', ')', '+', '-', '/', '=', '?', '^', '{', '|', '}', '[', ']', ':', ';', '"', '<', '>', '', ' ', ','];
        res = InvalidCharacters(this, array, e.which);

        if (res === 1) {
            e.preventDefault();
            return;
        }
        else if (e.which === 92 || e.which === 39) {
            //$(this).siblings('div').children('span').text("Invalid character.");
            e.preventDefault();
            return;
        }
    });




    $('#emailPeriod').keypress(function (evt) {
        //only allowed numbers
        if (!(48 <= evt.which && evt.which <= 58))
            evt.preventDefault();

        // preventing to type 'e' or 'E'
        if (evt.keyCode == 101 || evt.keyCode == 69 || evt.keyCode == 45 || evt.keyCode == 43 || evt.keyCode == 46 || $(this).val() > 100) {
            evt.preventDefault();
        }
    });

    $('#advancePercentage').keypress(function (evt) {
        //only allowed numbers
        if (!(48 <= evt.which && evt.which <= 58))
            evt.preventDefault();

        // preventing to type 'e' or 'E'
        if (evt.keyCode == 101 || evt.keyCode == 69 || evt.keyCode == 45 || evt.keyCode == 43 || evt.keyCode == 46 || $(this).val() > 100) {
            evt.preventDefault();
        }
    });

    //$('#payOffPeriod').keypress(function (evt) {
    //    // preventing to type 'e' or 'E'
    //    if (evt.keyCode == 101 || evt.keyCode == 69 || evt.keyCode == 45 || evt.keyCode == 43 || evt.keyCode == 46 || $(this).val() > 100) {
    //        evt.preventDefault();
    //    }
    //});

    //add place holder
    $('#AutoEmail').blur(function (e) {
        if (this.value === '') {
            $("#AutoEmail").attr('placeholder', 'example.example.com');
        }
    });

    $(document).ready(function () {

        $('#loanNumber').keypress(function (e) {

            var charCode = !e.charCode ? e.which : e.charCode;

            if ((charCode > 46 && charCode < 59) || charCode == 45 || charCode == 95 || (charCode > 96 && charCode < 122) || (charCode > 64 && charCode < 91)) { }
            else
                e.preventDefault();

        });

        $('#loanAmount').keypress(function (e) {

            var charCode = !e.charCode ? e.which : e.charCode;

            if ((charCode > 47 && charCode < 58) || charCode == 127 || charCode == 44 || charCode == 46 || charCode == 8) { }
            else
                e.preventDefault();

        });
        $('#clear').click(function () {

            document.getElementsByTagName("form")[0].reset();
            for (var i = 0 ; i < 8; i++) {
                if ($(':input[type="checkbox"]:checked').length == 1) {
                    break;
                }

                if ($("#checkedBox_" + i).is(':checked')) {

                    $("#radioStyle-" + i).show();
                    $("#radio-" + i).show();
                } else {
                    $("#radio-" + i).prop("checked", false);
                    $("#radio-" + i).hide();
                    $("#radioStyle-" + i).hide();

                }


            }

            $('input').next('span').children('span').text('');
            $('select').next('span').children('span').text('');
            $('input').closest("div").siblings('div').children("p").children("span").text("");
            $('input').next("div").children("p").children("span").text("");
            $('select').closest("div").siblings('div').children("p").children("span").text("");
            $('select').next("div").children("p").children("span").text("");
            $("#unitTypeError").text('');
            $('#loanNumberForDisplayError').hide();
            //$("#outOffRangeError").text('');
            //$("#payOffPeriod").removeClass('input-validation-error');

            @if(Model.loanNumber == null){
                <text>
            $('#loanAmount').val('');
            $('#advancePercentage').val('');
            $('#startDate').val('');
            $('#maturityDate').val('');
            //$('#payOffPeriod').val('');
            //$('#payOffPeriodType').val('-1');
            $('#isEditAllowable').val('');
            $('#isInterestCalculate').val('');
            $('#autoRem').val('');

            </text>
            }

            @if(Model.autoReminderEmail == null || Model.autoReminderEmail == "")
        {

             <text>$("#AutoEmail").val("");</text>
            <text>$("#AutoReminderEmail").hide();</text>
            <text>$("#emailPeriod").val("");</text>
        <text>$("#errorAutoEmail").text("");</text>

        }
        else
        {
             <text>$('#autoRem').val("true");</text>
        <text> showAutoReminderEmail("true");</text>
        }


        });
    });
</script>


<style type="text/css">
    .webGrid {
        margin: 4px;
        border-collapse: collapse;
        width: 500px;
        font-family: Tahoma;
        font-size: small;
    }

    .grid-header {
        background-color: #990000;
        font-weight: bold;
        color: White !important;
    }

    .webGrid th a {
        color: White;
        text-decoration:none;
    }

    .webGrid th, .webGrid td {
        border: 1px solid black;
        padding: 5px;
    }

    .alt {
        background-color: #F4EFEF;
    }

    .webGrid th a:hover {
        text-decoration: underline;
    }

    .to-the-right {
        text-align: right;
    }

    /*#outOffRangeError {
        top: 50%;
    }*/

    .pika-single {
        z-index: 10005 !important;
    }
</style>


<script>

    $('input:radio').click(function () {
        $("#radioStyle-0").css("background-color", "");
        $("#radioStyle-1").css("background-color", "");
        $("#radioStyle-2").css("background-color", "");
        $("#radioStyle-3").css("background-color", "");
        $("#radioStyle-4").css("background-color", "");
        $("#radioStyle-5").css("background-color", "");
        $("#radioStyle-6").css("background-color", "");
        $("#radioStyle-7").css("background-color", "");

        if ($(this).is(":checked")) {
            $(this).closest("div").css("background-color", "green");
        }
    });



    $(function () {

        $('#loanAmount').blur(function () {

            var val = $.trim($(this).val());

            if (val.indexOf(',') > -1) {
                val = val.replace(',', '');
            }
            //if (val.indexOf('$') > -1) {
            //    val = val.replace('$', '');
            //}
            var num = parseFloat(val);
            var num = num.toFixed(2);
            if (isNaN(num)) {
                num = '';
            }


            $(this).val(num);
        });

    });

    function showDefaultUnitOption(checked, value) {
        if (checked) {
            //$("#radioStyle-" + value).show();
            //$("#radio-" + value).show();

            // if($(this).children().length == 1))

            //  $("#radio-" + value).closest('.col-xs-7').siblings().children('.col-xs-5').find('input')
            if ($(':input[type="checkbox"]:checked').length == 1) {
                $("#radio-" + value).prop("checked", true);
                
                $("#unitTypeError").text('');

                //$("#radioStyle-" + value).hide();
                //$("#radio-" + value).hide();
            } else if ($(':input[type="checkbox"]:checked').length == 2) {
                $(':input[type="radio"]').prop("checked", false);
                $(':input[type="checkbox"]:checked').parent().children('.col-xs-5').children('div').show().children().show().prop("checked", false);

            } else {
                $("#radioStyle-" + value).show();
                $("#radio-" + value).show();

            }

        } else {
            $("#radio-" + value).prop("checked", false);
            $("#radio-" + value).hide();
            $("#radioStyle-" + value).hide();

            if ($(':input[type="checkbox"]:checked').length == 1) {
                $(':input[type="checkbox"]:checked').parent().children('.col-xs-5').find('input').prop("checked", true);
                $(':input[type="checkbox"]:checked').parent().children('.col-xs-5').children('div').hide().children().hide();
            }

        }


    }
    $("#emailPeriod").click(function () {
        if ($(this).val() == 0) {
            $(this).val('');
        }
    });
    function showAutoReminderEmail(value) {
        if (value == "true") {
            $("#AutoReminderEmail").show();
            //$("#emailPeriod").val("");
            $("#AutoEmail").attr('placeholder', 'example.example.com');




        } else {
            $("#AutoEmail").val("");
            $("#AutoReminderEmail").hide();
            $("#emailPeriod").val("");
            $("#errorAutoEmail").text("");

            $('span[data-valmsg-for="autoReminderPeriod"').children('span').remove();
            $('#emailPeriod').removeClass('input-validation-error');

            $('span[data-valmsg-for="autoReminderEmail"').children('span').remove();
            $('#AutoEmail').removeClass('input-validation-error');
        }

    }

    //function setPayOffPeriod() {

    //    $("#payOffPeriod").val("");
    //    $("#outOffRangeError").text('');
    //    $("#payOffPeriod").removeClass('input-validation-error');
    //}

   // function checkTheRange(value) {


   //     var oneDay = 24 * 60 * 60 * 1000;	// hours*minutes*seconds*milliseconds
   //     var firstDate = new Date($("#startDate").val());
   //     var secondDate = new Date($("#maturityDate").val());
   //     var type = $("#payOffPeriodType").val();

   //     if (type == 0) {
   //         var diffDays = Math.abs((firstDate.getTime() - secondDate.getTime()) / (oneDay));
   //         if (value > diffDays) {
   //             $("#outOffRangeError").text('pay off period is beyond the loan maturity date');
   //             //$("#payOffPeriod").addClass('input-validation-error').removeClass('valid');

   //         } else {
   //             $("#outOffRangeError").text('');
   //             $("#payOffPeriod").removeClass('input-validation-error');
   //         }

   //     } else {
   //         var diffMonths = (secondDate.getMonth() - firstDate.getMonth()
   //+ (12 * (secondDate.getFullYear() - firstDate.getFullYear())));
   //         if (value > diffMonths) {
   //             $("#outOffRangeError").text('pay off period is beyond the loan maturity date');
   //             //$("#payOffPeriod").addClass('input-validation-error').removeClass('valid');

   //         } else {
   //             $("#outOffRangeError").text('');
   //             $("#payOffPeriod").removeClass('input-validation-error');
   //         }
   //     }


   // }

    function checkTheEmailRange(value) {


        var oneDay = 24 * 60 * 60 * 1000;	// hours*minutes*seconds*milliseconds
        var firstDate = new Date($("#startDate").val());
        var secondDate = new Date($("#maturityDate").val());



        var diffDays = Math.abs((firstDate.getTime() - secondDate.getTime()) / (oneDay));
        //if (value > diffDays) {
        //    $("#emailReminderError").text("Out of Range");
        //    $("#emailPeriod").addClass("input-validation-error").removeClass('valid');

        //} else {
        //    $("#emailReminderError").text("");
        //    $("#emailPeriod").removeClass("input-validation-error");



        //}




    }






    Progress(6);


</script>

@if (ViewBag.userroleName != "Admin")
{
    <script>
        $("#loanNumber").attr("disabled", "disabled");

        function GetNonRegisteredBranches(_regBranchId) {
            if (_regBranchId == 0) {
                $("#loanNumber").attr("disabled", "disabled");
                return;
            }
            //$('#loadingSpan').show();
            var procemessage = "<option value='0'> Please wait...</option>";
            $("#ddlcity").html(procemessage).show();
            var url = "/SetupProcess/getNonRegBranchesByRegBranchId/";

            $.ajax({
                url: url,
                data: { regBranchId: _regBranchId },
                cache: false,
                type: "POST",
                success: function (data) {
                    var markup = "<option value='0'>--Select Branch--</option>";
                    for (var x = 0; x < data.length; x++) {
                        markup += "<option value=" + data[x].Value + ">" + data[x].Text + "</option>";
                    }
                    $("#NonRegisteredBranchId").html(markup).show();
                    //$('#loadingSpan').hide();
                    $("#loanNumber").removeAttr("disabled");
                },
                error: function (reponse) {
                   // $('#loadingSpan').hide();
                    alert("error : " + reponse);
                }
            });


        }
    </script>
}
@{
    if (Model.loanNumber != null)
    {
        <script>
            $('#clear').prop('value', 'Reset');
        </script>


        if (Model.autoReminderEmail != "")
        {
            <script>
                $('#autoRem').val("true");
                showAutoReminderEmail("true");
            </script>
        }
        if (Model.selectedUnitTypes.Count != 1)
        {
            foreach (UnitType UnitType in (List<UnitType>)Model.selectedUnitTypes)
            {
                
                <script>
                    $("#radioStyle-@(UnitType.unitTypeId-1)").show();
                    $("#radio-@(UnitType.unitTypeId - 1)").show();

                </script>
                if (Model.defaultUnitType == UnitType.unitTypeId)
                {
                    <script>
                    
                        $("#radio-@(UnitType.unitTypeId - 1)").closest("div").css("background-color", "green");

                    </script>
                }
            }
        }
    }
    else
    {
        <script>
            $('#loanAmount').val('');
            $('#advancePercentage').val('');
            $('#startDate').val('');
            $('#maturityDate').val('');
            //$('#payOffPeriod').val('');
            //$('#payOffPeriodType').val('-1');
            $('#isEditAllowable').val('');
            $('#isInterestCalculate').val('');
            $('#autoRem').val('');
            $('#emailPeriod').val('');
        </script>
    }

}
<script>
    $('#startDate').focusout(function () {
        $(this).attr('placeholder', 'MM/DD/YYYY');
    });
    $('#maturityDate').focusout(function () {
        $(this).attr('placeholder', 'MM/DD/YYYY');
    });
</script>
<script>

    var startDate,
     endDate,
     updateStartDate = function () {
         startPicker.setStartRange(startDate);
         endPicker.setStartRange(startDate);
         var minNextDate = new Date(startDate);
         //alert(minNextDate);
         minNextDate.setDate(startDate.getDate() + 1);

         if ($('#maturityDate').val() == '') {
             endPicker.gotoDate(minNextDate);
         }

         endPicker.setMinDate(minNextDate);
     },
updateEndDate = function () {
    startPicker.setEndRange(endDate);

    var maxNextDate = new Date(endDate);
    //alert(minNextDate);
    maxNextDate.setDate(endDate.getDate() - 1);
    startPicker.setMaxDate(maxNextDate);

    if ($('#startDate').val() == '') {
        startPicker.gotoDate(maxNextDate);
    }
    endPicker.setEndRange(endDate);
},
startPicker = new Pikaday({
    field: document.getElementById('startDate'),
    format: 'l',
    bound: true,

    onSelect: function () {
        startDate = this.getDate();
        //$("#payOffPeriod").val("");
        //$("#outOffRangeError").text('');
        //$("#payOffPeriod").removeClass('input-validation-error');
        updateStartDate();


    }
}),
endPicker = new Pikaday({
    field: document.getElementById('maturityDate'),
    format: 'l',

    onSelect: function () {
        endDate = this.getDate();
        //$("#payOffPeriod").val("");
        //$("#outOffRangeError").text('');
        //$("#payOffPeriod").removeClass('input-validation-error');
        updateEndDate();
    }
}),
_startDate = startPicker.getDate(),
     _endDate = endPicker.getDate();

    if (_startDate) {
        startDate = _startDate;
        updateStartDate();
    }

    if (_endDate) {
        endDate = _endDate;
        updateEndDate();
    }
</script>
