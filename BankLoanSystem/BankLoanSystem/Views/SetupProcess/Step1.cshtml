@model BankLoanSystem.Models.Company
@{
    ViewBag.Title = "Step1";
    if (ViewBag.AjaxRequest == null)
    {
        Layout = "~/Views/Shared/_SetupProcess.cshtml";
    }
}

<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>

<div class="form-horizontal">

    <div id="page-wrapper" class="gray-bg sidebar-content companySetupWrapper companysetup_border">
        <div class="ibox float-e-margins">
            <div class="ibox-title">
                <div class="container body-content">

                    <div class="row">
                        <div class="container body-content new_container">
                            <div class="setupImage"><img src="~/Images/companySetupImage.png" width="100" alt=""></div>
                            <div class="setupTitle">
                                <h2>Create Company</h2>
                            </div>
                            <div style="clear:both;"></div>

                            @using (Ajax.BeginForm("Step1", "SetupProcess", new AjaxOptions()
                            {

                                OnFailure = "handleErrorMsg",
                                HttpMethod = "POST",
                                InsertionMode = InsertionMode.Replace,
                                UpdateTargetId = "changeContainer",
                                LoadingElementId = "loadingDiv"
                            }, new { id = "form" }))
                            {
                                @Html.AntiForgeryToken()

                                <div class="form-horizontal new_form_horizontal">

                                    <p class="err_msg">@Html.ValidationSummary(true, "", new { @class = "text-danger" })</p>
                                    @if (ViewBag.SuccessMsg != null)
                                    {
                                        <p class="err_msg">@ViewBag.SuccessMsg</p>
                                    }
                                    else if (@ViewBag.ErrorMsg != null)
                                    {
                                        <p class="err_msg">@ViewBag.ErrorMsg</p>
                                    }

                                    <div class="form-group new_form_group">
                                        <div class="control-label col-sm-2 lable_style">
                                            <label for="TypeId">Company Type</label>
                                        </div>
                                        <div class="col-xs-8 text_field short_text_field" style="width:41%">
                                            @Html.DropDownListFor(model => model.TypeId, null, "--Select Company Type--", htmlAttributes: new { @class = "form-control text_field_input", id = "TypeId" })

                                        </div>
                                        <div class="err_msg_box">
                                            <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.TypeId, "", new { @class = "text-danger" })</p>
                                        </div>
                                    </div>

                                    <div class="form-group new_form_group">
                                        <div class="control-label col-sm-2 lable_style">
                                            <label for="CompanyName">Company Name</label>
                                        </div>
                                        <div class="col-xs-8 text_field">
                                            @Html.EditorFor(model => model.CompanyName, new { htmlAttributes = new { @class = "form-control text-box single-line text_field_input first_letter_capital", @id = "txtCompanyName" } })
                                            @*<div id="customError" ><span class="text-danger"></span></div>*@
                                        </div>
                                        <div class="err_msg_box">
                                            <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.CompanyName, "", new { @class = "text-danger" })</p>
                                        </div>
                                    </div>
                                    <div class="form-group new_form_group">
                                        <div class="control-label col-sm-2 lable_style">
                                            <label for="CompanyAddress1">Street Address 1</label>
                                        </div>
                                        <div class="col-xs-8 text_field">
                                            @Html.EditorFor(model => model.CompanyAddress1, new { htmlAttributes = new { @class = "form-control text-box single-line text_field_input first_letter_capital", @id = "txtCompanyAddress1" } })
                                        </div>
                                        <div class="err_msg_box">
                                            <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.CompanyAddress1, "", new { @class = "text-danger" })</p>
                                        </div>
                                    </div>
                                    <div class="form-group new_form_group">
                                        <div class="control-label col-sm-2 lable_style">
                                            <label for="CompanyAddress2">
                                                Street Address 2<br>
                                                <span class="optional">(Optional)</span>
                                            </label>
                                        </div>
                                        <div class="col-xs-8 text_field">
                                            @Html.EditorFor(model => model.CompanyAddress2, new { htmlAttributes = new { @class = "form-control text-box single-line text_field_input first_letter_capital", @id = "txtCompanyAddress2" } })
                                        </div>
                                        <div class="err_msg_box">
                                            <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.CompanyAddress2, "", new { @class = "text-danger" })</p>
                                        </div>
                                    </div>
                                    <div class="form-group new_form_group">
                                        <div class="control-label col-sm-2 lable_style">
                                            <label for="City">City</label>
                                        </div>
                                        <div class="col-xs-8 text_field short_text_field">
                                            @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control text-box single-line text_field_input first_letter_capital", @id = "txtCity" } })
                                        </div>
                                        <div class="err_msg_box">
                                            <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })</p>
                                        </div>
                                    </div>
                                    <div class="form-group new_form_group">
                                        <div class="control-label col-sm-2 lable_style">
                                            <label for="StateId">State</label>
                                        </div>
                                        <div class="col-xs-8 text_field short_text_field">
                                            @Html.DropDownListFor(model => model.StateId, null, "--Select State--", htmlAttributes: new { @class = "form-control text-box single-line text_field_input", id = "StateId" })
                                        </div>
                                        <div class="err_msg_box">
                                            <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.StateId, "", new { @class = "text-danger" })</p>
                                        </div>
                                    </div>
                                    <div class="form-group new_form_group">
                                        <div class="control-label col-sm-2 lable_style">
                                            <label for="ZipPre">Zip Code</label>
                                        </div>
                                        <div class="col-xs-4 text_field new_zip">
                                            @Html.EditorFor(model => model.ZipPre, new { htmlAttributes = new { @class = "form-control text-box single-line text_field_input", placeholder = "Zip Code", @id = "txtZipPre", style = "width: 80px;" } })
                                        </div>
                                        <span class="glyphicons glyphicon-minus" style="float:left;margin-top:6px;margin-left:-5px;margin-right:5px;"></span>
                                        <div class="col-xs-4 text_field new_zip">
                                            @Html.EditorFor(model => model.Extension, new { htmlAttributes = new { @class = "form-control text-box single-line text_field_input", placeholder = "Extension", @id = "txtExtension", style = "width: 83px;" } })
                                        </div>
                                        <div class="err_msg_box">
                                            <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.ZipPre, "", new { @class = "text-danger" }) &nbsp;&nbsp;@Html.ValidationMessageFor(model => model.Extension, "", new { @class = "text-danger" })</p>
                                        </div>
                                    </div>
                                    <div class="form-group new_form_group">
                                        <div class="control-label col-sm-2 lable_style">
                                            <label for="PhoneNum1">Phone Number 1</label>
                                        </div>
                                        <div class="col-xs-8 text_field short_text_field">
                                            @Html.EditorFor(model => model.PhoneNum1, new { htmlAttributes = new { @class = "form-control text-box single-line text_field_input", @id = "txtPhoneNum1" } })
                                        </div>
                                        <div class="err_msg_box">
                                            <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.PhoneNum1, "", new { @class = "text-danger" })</p>
                                        </div>
                                    </div>
                                    <div class="form-group new_form_group">
                                        <div class="control-label col-sm-2 lable_style">
                                            <label for="PhoneNum2">
                                                Phone Number 2<br>
                                                <span class="optional">(Optional)</span>
                                            </label>
                                        </div>
                                        <div class="col-xs-8 text_field short_text_field">
                                            @Html.EditorFor(model => model.PhoneNum2, new { htmlAttributes = new { @class = "form-control text-box single-line text_field_input", @id = "txtPhoneNum2" } })
                                        </div>
                                        <div class="err_msg_box">
                                            <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.PhoneNum2, "", new { @class = "text-danger" })</p>
                                        </div>
                                    </div>
                                    <div class="form-group new_form_group">
                                        <div class="control-label col-sm-2 lable_style">
                                            <label for="PhoneNum3">
                                                Phone Number 3<br>
                                                <span class="optional">(Optional)</span>
                                            </label>
                                        </div>
                                        <div class="col-xs-8 text_field short_text_field">
                                            @Html.EditorFor(model => model.PhoneNum3, new { htmlAttributes = new { @class = "form-control text-box single-line text_field_input", @id = "txtPhoneNum3" } })
                                        </div>
                                        <div class="err_msg_box">
                                            <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.PhoneNum3, "", new { @class = "text-danger" })</p>
                                        </div>
                                    </div>
                                    <div class="form-group new_form_group">
                                        <div class="control-label col-sm-2 lable_style">
                                            <label for="Fax">
                                                Fax Number <br>
                                                <span class="optional">(Optional)</span>
                                            </label>
                                        </div>
                                        <div class="col-xs-8 text_field short_text_field">
                                            @Html.EditorFor(model => model.Fax, new { htmlAttributes = new { @class = "form-control text-box single-line text_field_input", @id = "txtFax" } })
                                        </div>
                                        <div class="err_msg_box">
                                            <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.Fax, "", new { @class = "text-danger" })</p>
                                        </div>
                                    </div>
                                    <div class="form-group new_form_group">
                                        <div class="control-label col-sm-2 lable_style">
                                            <label for="Email">
                                                Email<br>
                                                <span class="optional">(Optional)</span>
                                            </label>
                                        </div>
                                        <div class="col-xs-8 text_field">
                                            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control text-box single-line text_field_input", @id = "txtEmail" } })
                                        </div>
                                        <div class="err_msg_box">
                                            <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })</p>
                                        </div>
                                    </div>
                                    <div class="form-group new_form_group">
                                        <div class="control-label col-sm-2 lable_style">
                                            <label for="WebsiteUrl">
                                                Website<br>
                                                <span class="optional">(Optional)</span>
                                            </label>
                                        </div>
                                        <div class="col-xs-8 text_field">
                                            @Html.EditorFor(model => model.WebsiteUrl, new { htmlAttributes = new { @class = "form-control text-box single-line text_field_input", @id = "txtWebsiteUrl" } })
                                        </div>
                                        <div class="err_msg_box">
                                            <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.WebsiteUrl, "", new { @class = "text-danger" })</p>
                                        </div>
                                    </div>
                                   
                                    <div class="form-group new_form_group clear_next clear_next_bordr">
                                        <div>
                                            <nav>
                                                <div class="pager new_pager">
                                                    <div class="button_box algn_left">
                                                        <!--<input value="Back" name="subBack" id="btnPreStep2" class="btn btn-primary m-b cancel next_clear_button back_back" style="margin-left: 10px" type="button">-->&nbsp;
                                                    </div>
                                                    <div class="button_box algn_center">
                                                        <input value="Next" class="btn btn-primary m-b next_clear_button next_back" style="margin-left 10px" type="submit">
                                                    </div>
                                                    <div class="button_box algn_right">
                                                        <input id="clear" value="Clear" class="btn btn-primary m-b next_clear_button clear_back" style="margin-left: 10px" type="button">
                                                    </div>
                                                    <div style="clear:both"></div>
                                                </div>
                                            </nav>
                                        </div>
                                    </div>

                                </div>
                            }

                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>

</div>

<div class="rightPanel">
    @{
        @Html.Partial("Step1help")
    }
</div>


<script src="~/scripts/CommonFunctions.js"></script>

<script language="javascript">

  $(document).ready(function(){

  $('.nav li.active ul').removeClass('in');
  $('.nav li').removeClass('active');
  $('.nav li.company').addClass('active');
  $('.nav li.active ul').addClass('in');
  })
</script>


<script>
    $('#clear').click(function () {
        document.getElementsByTagName("form")[0].reset();
    });

    $(".tab.1").parent("li").addClass("active").siblings().removeClass('active');


    // change to title case

    $('#txtCompanyAddress1, #txtCompanyAddress2, #txtCity , #txtCompanyName').blur(function (e) {

            ToTitleCase(this.id, this.value);
    });



    $('#txtCompanyAddress1, #txtCompanyAddress2').keypress(function (e) {
        var res = CheckMaxLenth(this, this.value, 50);
        if (res === 0) {
            e.preventDefault();
            return;
        }

        var array = ['~', '`', '!', '#', '$', '%', '*', '(', ')', '+', '=', '?', '^', '{', '|', '}', '[', ']', ':', ';', '"', '<', '>'];
        res = InvalidCharacters(this, array, e.which);

        if (res === 1) {
            e.preventDefault();
            return;
        }
        else if (e.which === 92) {
            //$(this).siblings('div').children('span').text("Invalid character.");
            e.preventDefault();
            return;
        }
    });
    //Check maximum length
    $('#txtCompanyName, #txtCity').keypress(function (e) {
        //alert('CheckMaxLenth');
        var res = CheckMaxLenth(this, this.value, 50);
        if (res === 0) {
            e.preventDefault();
            return;
        }

        var array = ['~', '`', '!', '#', '$', '%', '*', '(', ')', '+', '/', '=', '?', '^', '{', '|', '}', '[', ']', ':', ';', '"', '<', '>', '@@', '.'];
        res = InvalidCharacters(this, array, e.which);

        if (res === 1) {
            e.preventDefault();
            return;
        }
        else if (e.which === 92) {
            //$(this).siblings('div').children('span').text("Invalid character.");
            e.preventDefault();
            return;
        }
    });

    $('#txtZipPre').keypress(function (e) {
        //alert(e.which);
        var res = CheckMaxLenth(this, this.value, 4);
        if (res === 0) {
            $("#txtExtension").focus();
        }
        res = AllowNumbers(this, e.which);
        if (res === 0) {
            e.preventDefault();
            return;
        }
    });

    $('#txtExtension').keypress(function (e) {
        var res = CheckMaxLenth(this, this.value, 4);
        if (res === 0) {
            e.preventDefault();
            return;
        }
        res = AllowNumbers(this, e.which);
        if (res === 0) {
            e.preventDefault();
            return;
        }
    });



    //Check maximum length for email address and valid characters
    $('#txtEmail').keypress(function (e) {
        var res = CheckMaxLenth(this, this.value, 100);
        if (res === 0) {
            e.preventDefault();
            return;
        }

        var array = ['~', '`', '!', '#', '$', '%', '*', '(', ')', '+', '-', '/', '=', '?', '^', '{', '|', '}', '[', ']', ':', ';', '"', '<', '>', '', ' ', ','];
        res = InvalidCharacters(this, array, e.which);

        if (res === 1) {
            e.preventDefault();
            return;
        }
        else if (e.which === 92 || e.which === 39) {
            //$(this).siblings('div').children('span').text("Invalid character.");
            e.preventDefault();
            return;
        }
    });

    $('#txtPhoneNum1, #txtPhoneNum2, #txtPhoneNum3, #txtFax').keypress(function (e) {
        var res = PhoneNumber(this, e.which);
        if (res === 0) {
            e.preventDefault();
            return;
        }

        res = CheckMaxLenth(this, this.value, 15);
        if (res === 0) {
            e.preventDefault();
            return;
        }
    });

    //$('#txtFirstName, #txtLastName').keypress(function (e) {
    //    //var array = [' ', '/', '`', '~', '!'];
    //    var array = ['~', '`', '!', '#', '$', '%', '*', '(', ')', '+', '-', '/', '=', '?', '^', '{', '|', '}', '[', ']', ':', ';', '"', '<', '>', ' '];
    //    var res = InvalidCharacters(this, array, e.which);

    //    if (res === 1) {
    //        e.preventDefault();
    //        return;
    //    }
    //});

    $('input').keypress(function (e) {
        var array = [' '];
        if (this.value.length === 0) {
            var res = InvalidCharacters(this, array, e.which);

            if (res === 1) {
                e.preventDefault();
                return;
            }
        }
    });

    $('input').prop('autocomplete', 'off');

    Progress(1);

    $('#txtZipPre').focusout(function () {
        $(this).attr('placeholder', 'Zip Code');
    });
    $('#txtExtension').focusout(function () {
        $(this).attr('placeholder', 'Extension');
    });
</script>
