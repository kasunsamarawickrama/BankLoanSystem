@model BankLoanSystem.Models.CompanyViewModel

@{
    ViewBag.Title = "Step4";
    if (ViewBag.AjaxRequest == null)
    {
        Layout = "~/Views/Shared/_SetupProcess.cshtml";
    }
}



@*<script>
        progress(4);


    </script>*@
<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>



<h2>Create @ViewBag.ThisCompanyType Company</h2>

@if (ViewBag.SuccessMsg != null)
            {
    @ViewBag.SuccessMsg
}
else if (@ViewBag.ErrorMsg != null)
{
    @ViewBag.ErrorMsg
}

@using (Ajax.BeginForm("Step4", "SetupProcess", new AjaxOptions()
{

    OnFailure = "handleErrorMsg",
    HttpMethod = "POST",
    InsertionMode = InsertionMode.Replace,
    UpdateTargetId = "changeContainer",
    LoadingElementId = "loadingDiv"
}, new { id = "form" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @*@if (ViewBag.SuccessMsg == null)
            {*@

        <div class="form-group">
            @if (Model.Companies.Count > 0)
            {
                <table>
                    <tr>
                        <td class="control-label col-sm-2">
                            @Html.Label("Company Name")
                        </td>
                        <td class="control-label col-sm-2">
                            @Html.Label("Company Address1")
                        </td>

                    </tr>

                    @for (var i = 0; i < Model.Companies.Count; i++)
                    {
                        <tr>
                            <td class="control-label col-sm-2">
                                @Html.DisplayFor(x => x.Companies[i].CompanyName)
                            </td>
                            <td class="control-label col-sm-2">
                                @Html.DisplayFor(x => x.Companies[i].CompanyAddress1)
                            </td>

                            <td class="control-label col-sm-2">
                                <a onclick="EditCompany(@i)" id="CompanyIndex">Edit</a>
                            </td>
                            <td class="control-label col-sm-2">
                                <a>Delete</a>
                            </td>
                        </tr>
                    }
                </table>
            }
        </div>



        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        @if (Model.Companies.Count > 0)
                {
            <div class="form-group">
                <div class="control-label col-sm-2">
                    <a onclick="CreateNewCompany()">create new company</a>
                </div>
            </div>
        }

        <input id="companyCode" name="companyCode" type="hidden" value="" />
        <div class="form-group">
            <div class="control-label col-sm-2">
                @Html.LabelFor(model => model.Company.CompanyName, htmlAttributes: new { })<span style="color: red">*</span>
            </div>
            <div class="col-xs-8">
                @Html.EditorFor(model => model.Company.CompanyName, new { htmlAttributes = new { @class = "form-control", @id = "CompanyName" } })
                @Html.ValidationMessageFor(model => model.Company.CompanyName, "", new { @class = "text-danger" })
                <div id="customError"><span class="text-danger"></span></div>
            </div>
        </div>

        <div class="form-group">
            <div class="control-label col-sm-2">
                @Html.LabelFor(model => model.Company.CompanyAddress1, htmlAttributes: new { })<span style="color: red">*</span>
            </div>
            <div class="col-xs-8">
                @Html.EditorFor(model => model.Company.CompanyAddress1, new { htmlAttributes = new { @class = "form-control", @id = "CompanyAddress1" } })
                @Html.ValidationMessageFor(model => model.Company.CompanyAddress1, "", new { @class = "text-danger" })
                <div id="customError"><span class="text-danger"></span></div>
            </div>
        </div>

        <div class="form-group">
            <div class="control-label col-sm-2">
                @Html.LabelFor(model => model.Company.CompanyAddress2, htmlAttributes: new { })
            </div>
            <div class="col-xs-8">
                @Html.EditorFor(model => model.Company.CompanyAddress2, new { htmlAttributes = new { @class = "form-control", @id = "CompanyAddress2" } })
                @Html.ValidationMessageFor(model => model.Company.CompanyAddress2, "", new { @class = "text-danger" })
                <div id="customError"><span class="text-danger"></span></div>
            </div>
        </div>

        <div class="form-group">
            <div class="control-label col-sm-2">
                @Html.LabelFor(model => model.Company.City, htmlAttributes: new { })<span style="color: red">*</span>
            </div>
            <div class="col-xs-8">
                @Html.EditorFor(model => model.Company.City, new { htmlAttributes = new { @class = "form-control", @id = "City" } })
                @Html.ValidationMessageFor(model => model.Company.City, "", new { @class = "text-danger" })
                <div id="customError"><span class="text-danger"></span></div>
            </div>
        </div>

        <div class="form-group">
            <div class="control-label col-sm-2">
                @Html.LabelFor(model => model.StateId, htmlAttributes: new { })<span style="color: red">*</span>
            </div>
            <div class="col-xs-8">
                @Html.DropDownListFor(model => model.StateId, null, "Select state", htmlAttributes: new { @class = "form-control", id = "StateId" })
                @Html.ValidationMessageFor(model => model.StateId, "", new { @class = "text-danger" })
                <div id="customError"><span class="text-danger"></span></div>
            </div>
        </div>

        <div class="form-group">
            <div class="control-label col-sm-2">
                @Html.LabelFor(model => model.Company.ZipPre, htmlAttributes: new { })<span style="color: red">*</span>
            </div>

            <div class="col-xs-4" style="width:32.2%">
                @Html.EditorFor(model => model.Company.Extension, new { htmlAttributes = new { @class = "form-control", placeholder = "Extension", @id = "Extension" } })
                @Html.ValidationMessageFor(model => model.Company.Extension, "", new { @class = "text-danger" })
                <div id="customError"><span class="text-danger"></span></div>
            </div>
            <span class="glyphicons glyphicon-minus" style="float:right;margin-top:20px"></span>
            <div class="col-xs-4">
                @Html.EditorFor(model => model.Company.ZipPre, new { htmlAttributes = new { @class = "form-control", placeholder = "Zip Code", @id = "ZipPre" } })
                @Html.ValidationMessageFor(model => model.Company.ZipPre, "", new { @class = "text-danger" })
                <div id="customError"><span class="text-danger"></span></div>

            </div>
        </div>

        <div class="form-group">
            <div class="control-label col-sm-2">
                @Html.LabelFor(model => model.Company.PhoneNum1, htmlAttributes: new { })<span style="color: red">*</span>
            </div>
            <div class="col-xs-8">
                @Html.EditorFor(model => model.Company.PhoneNum1, new { htmlAttributes = new { @class = "form-control", @id = "PhoneNum1" } })
                @Html.ValidationMessageFor(model => model.Company.PhoneNum1, "", new { @class = "text-danger" })
                <div id="customError"><span class="text-danger"></span></div>
            </div>
        </div>

        <div class="form-group">
            <div class="control-label col-sm-2">
                @Html.LabelFor(model => model.Company.PhoneNum2, htmlAttributes: new { })
            </div>
            <div class="col-xs-8">
                @Html.EditorFor(model => model.Company.PhoneNum2, new { htmlAttributes = new { @class = "form-control", @id = "PhoneNum2" } })
                @Html.ValidationMessageFor(model => model.Company.PhoneNum2, "", new { @class = "text-danger" })
                <div id="customError"><span class="text-danger"></span></div>
            </div>
        </div>

        <div class="form-group">
            <div class="control-label col-sm-2">
                @Html.LabelFor(model => model.Company.PhoneNum3, htmlAttributes: new { })
            </div>
            <div class="col-xs-8">
                @Html.EditorFor(model => model.Company.PhoneNum3, new { htmlAttributes = new { @class = "form-control", @id = "PhoneNum3" } })
                @Html.ValidationMessageFor(model => model.Company.PhoneNum3, "", new { @class = "text-danger" })
                <div id="customError"><span class="text-danger"></span></div>
            </div>
        </div>

        <div class="form-group">
            <div class="control-label col-sm-2">
                @Html.LabelFor(model => model.Company.Fax, htmlAttributes: new { })
            </div>
            <div class="col-xs-8">
                @Html.EditorFor(model => model.Company.Fax, new { htmlAttributes = new { @class = "form-control", @id = "Fax" } })
                @Html.ValidationMessageFor(model => model.Company.Fax, "", new { @class = "text-danger" })
                <div id="customError"><span class="text-danger"></span></div>
            </div>
        </div>

        <div class="form-group">
            <div class="control-label col-sm-2">
                @Html.LabelFor(model => model.Company.Email, htmlAttributes: new { })
            </div>
            <div class="col-xs-8">
                @Html.EditorFor(model => model.Company.Email, new { htmlAttributes = new { @class = "form-control", @id = "Email" } })
                @Html.ValidationMessageFor(model => model.Company.Email, "", new { @class = "text-danger" })
                <div id="customError"><span class="text-danger"></span></div>
            </div>
        </div>

        <div class="form-group">
            <div class="control-label col-sm-2">
                @Html.LabelFor(model => model.Company.WebsiteUrl, htmlAttributes: new { })
            </div>
            <div class="col-xs-8">
                @Html.EditorFor(model => model.Company.WebsiteUrl, new { htmlAttributes = new { @class = "form-control", @id = "WebsiteUrl" } })
                @Html.ValidationMessageFor(model => model.Company.WebsiteUrl, "", new { @class = "text-danger" })
                <div id="customError"><span class="text-danger"></span></div>
            </div>
        </div>

        <div class="form-group">

            <div class="button-panel">
                <input type="button" value="Back" name="subBack" id="btnPreStep4" class="btn btn-default left-button" />


                <input type="submit" value="Next" class="btn btn-primary btn-next" style="left:40%" />
                <input type="button" id="clear" value="Clear" class="btn btn-default right-button" />

            </div>


        </div>


    </div>
}

<script src="~/scripts/CommonFunctions.js"></script>

<script type="text/javascript">

    // Capitalize first letter
    $('#CompanyName, #CompanyAddress1, #CompanyAddress2, #City').keypress(function (e) {
        ToTitleCase(this.id, this.value);
    });

    //Check maximum length
    $('#CompanyName, #CompanyAddress1, #CompanyAddress2, #City').keypress(function (e) {
        var res = CheckMaxLenth(this, this.value, 50);
        if (res === 0) {
            e.preventDefault();
            return;
        }

        var array = ['~', '`', '!', '#', '$', '%', '*', '(', ')', '+', '/', '=', '?', '^', '{', '|', '}', '[', ']', ':', ';', '"', '<', '>'];
        res = InvalidCharacters(this, array, e.which);

        if (res === 1) {
            e.preventDefault();
            return;
        }
        else if (e.which === 92) {
            //$(this).siblings('div').children('span').text("Invalid character.");
            e.preventDefault();
            return;
        }
    });

    $('#ZipPre').keypress(function (e) {
        var res = CheckMaxLenth(this, this.value, 5);
        if (res === 0) {
            e.preventDefault();
            return;
        }
        res = AllowNumbers(this, e.which);
        if (res === 0) {
            e.preventDefault();
            return;
        }
    });

    $('#Extension').keypress(function (e) {
        var res = CheckMaxLenth(this, this.value, 4);
        if (res === 0) {
            e.preventDefault();
            return;
        }
        res = AllowNumbers(this, e.which);
        if (res === 0) {
            e.preventDefault();
            return;
        }
    });

    //Check maximum length for email address and valid characters
    $('#Email').keypress(function (e) {
        var res = CheckMaxLenth(this, this.value, 100);
        if (res === 0) {
            e.preventDefault();
            return;
        }

        var array = ['~', '`', '!', '#', '$', '%', '*', '(', ')', '+', '-', '/', '=', '?', '^', '{', '|', '}', '[', ']', ':', ';', '"', '<', '>', '', ' ', ','];
        res = InvalidCharacters(this, array, e.which);

        if (res === 1) {
            e.preventDefault();
            return;
        }
        else if (e.which === 92 || e.which === 39) {
            //$(this).siblings('div').children('span').text("Invalid character.");
            e.preventDefault();
            return;
        }
    });

    $('#PhoneNum1, #txtPhoneNum2, #txtPhoneNum3, #txtFax').keypress(function (e) {
        var res = PhoneNumber(this, e.which);
        if (res === 0) {
            e.preventDefault();
            return;
        }

        res = CheckMaxLenth(this, this.value, 15);
        if (res === 0) {
            e.preventDefault();
            return;
        }
    });

    //$('#txtFirstName, #txtLastName').keypress(function (e) {
    //    //var array = [' ', '/', '`', '~', '!'];
    //    var array = ['~', '`', '!', '#', '$', '%', '*', '(', ')', '+', '-', '/', '=', '?', '^', '{', '|', '}', '[', ']', ':', ';', '"', '<', '>', ' '];
    //    var res = InvalidCharacters(this, array, e.which);

    //    if (res === 1) {
    //        e.preventDefault();
    //        return;
    //    }
    //});

    $('input').keypress(function (e) {
        var array = [' '];
        if (this.value.length === 0) {
            var res = InvalidCharacters(this, array, e.which);

            if (res === 1) {
                e.preventDefault();
                return;
            }
        }
    });

    $('#clear').click(function () {
        document.getElementsByTagName("form")[0].reset();
    });

    Progress(4);


    $(function() {
        $('#btnPreStep4').click(function() {

            $('#loadingDiv').show();
            $.ajax({
                url: '@Url.Action("step3", "SetupProcess")',
                type: 'GET',
                data: { edit: 1 },

                success: function(partialView) {
                    $('#loadingDiv').hide();
                    $('#changeContainer').html(partialView);
                    $('#changeContainer').show();

                },
                error: function(request, status, error) {
                    handleErrorMsg(request.responseText);

                }
            });
        });
    });
</script>

<script type="text/javascript">
    function EditCompany(index) {

        var model = @Html.Raw(Json.Encode(Model));
        console.log(model);
        console.log(index);
        document.getElementById("CompanyName").value = model.Companies[index].CompanyName;
        document.getElementById("CompanyAddress1").value = model.Companies[index].CompanyAddress1;
        document.getElementById("CompanyAddress2").value = model.Companies[index].CompanyAddress2;
        document.getElementById("City").value = model.Companies[index].City;
        document.getElementById("StateId").value = model.Companies[index].StateId;
        document.getElementById("ZipPre").value = model.Companies[index].ZipPre;
        document.getElementById("Extension").value = model.Companies[index].Extension;
        document.getElementById("PhoneNum1").value = model.Companies[index].PhoneNum1;
        document.getElementById("PhoneNum2").value = model.Companies[index].PhoneNum2;
        document.getElementById("PhoneNum3").value = model.Companies[index].PhoneNum3;
        document.getElementById("Fax").value = model.Companies[index].Fax;
        document.getElementById("Email").value = model.Companies[index].Email;
        document.getElementById("WebsiteUrl").value = model.Companies[index].WebsiteUrl;
        document.getElementById("companyCode").value = model.Companies[index].CompanyCode;
    };

    function CreateNewCompany(){
        document.getElementById("CompanyName").value = "";
        document.getElementById("CompanyAddress1").value = "";
        document.getElementById("CompanyAddress2").value = "";
        document.getElementById("City").value = "";
        document.getElementById("StateId").value = "";
        document.getElementById("ZipPre").value = "";
        document.getElementById("Extension").value = "";
        document.getElementById("PhoneNum1").value = "";
        document.getElementById("PhoneNum2").value = "";
        document.getElementById("PhoneNum3").value = "";
        document.getElementById("Fax").value = "";
        document.getElementById("Email").value = "";
        document.getElementById("WebsiteUrl").value = "";
        document.getElementById("companyCode").value = "";
    }


</script>