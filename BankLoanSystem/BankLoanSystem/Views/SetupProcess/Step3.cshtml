@model BankLoanSystem.Models.User
@{
    ViewBag.Title = "Step3";
    if (ViewBag.AjaxRequest == null)
    {
        Layout = "~/Views/Shared/_SetupProcess.cshtml";
}
}

@*<script>
        progress(3);


    </script>*@
<style>

      .form-control{
        display:inline;
    }
    .form-group{
        margin:auto;
        margin-bottom: 10px;
    }

    .col-xs-11{
    
    width:60%;
}

    .col-xs-10 {
    float: unset;
}
    .col-xs-11>input{
    /*width:60%;*/
}

        .col-xs-9{
           
    
}
    .col-xs-9>input , .col-xs-9>select{
    width:28%;
}

</style>


<div class="form-group">
    <div class="control-label col-sm-5">
        <h2>Create User</h2>
    </div>
    @if (ViewBag.SuccessMsg == null)
    {
        <div class="col-xs-7">
            <span></span> <input type="button" id="skip" value="Skip" class="btn btn-info right-button" />
        </div>

    }
</div>

@if (ViewBag.SuccessMsg != null && ViewBag.SuccessMsg.ToString().Equals("User Successfully Created"))
{
    using (Ajax.BeginForm("Step3", "SetupProcess", new AjaxOptions()
    {

        OnFailure = "handleErrorMsg",
        HttpMethod = "POST",
        InsertionMode = InsertionMode.Replace,
        UpdateTargetId = "changeContainer",
        LoadingElementId = "loadingDiv"
    }, new { id = "form", style= "clear: both;" }))
    {
        @Html.AntiForgeryToken()
        <span class="text-success">@ViewBag.SuccessMsg</span>
        <div class="form-group" >

            <div class="button-panel">

                <input type="button" id="createNewUser" value="Create a New User" class="btn btn-info left-button" />

                <input type="button" id="step4" value="Next" class="btn btn-primary btn-next" style="left:30%" />


            </div>


        </div>
    }

    <script>
        $(function () {
            $('#createNewUser').click(function () {

                $('#loadingDiv').show();
                $.ajax({
                    url: '@Url.Action("Step3")',
                    type: 'GET',


                    success: function (partialView) {
                        $('#loadingDiv').hide();
                        $('#changeContainer').html(partialView);
                        $('#changeContainer').show();
                    },

                    error: function (request, status, error) {
                        //handleErrorMsg(request.responseText);

                    }
                });


            });

            $(function () {
                $('#step4').click(function () {

                    $('#loadingDiv').show();
                    $.ajax({
                        url: '@Url.Action("Step4")',
                        type: 'GET',


                        success: function (partialView) {
                            $('#loadingDiv').hide();
                            $('#changeContainer').html(partialView);
                            $('#changeContainer').show();
                            Progress(4);
                        },
                        error: function (request, status, error) {
                            //handleErrorMsg(request.responseText);

                        }
                    });
                });
            });
        });

    </script>


}

else
{

    using (Ajax.BeginForm("Step3", "SetupProcess", new AjaxOptions()
    {

        OnFailure = "handleErrorMsg",
        HttpMethod = "POST",
        InsertionMode = InsertionMode.Replace,
        UpdateTargetId = "changeContainer",
        LoadingElementId = "loadingDiv"
    }, new { id = "form" }))
    {
        @Html.AntiForgeryToken()



        <div class="form-horizontal">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                <div class="control-label col-sm-3" style="clear:both">
                    @Html.LabelFor(model => model.UserName, htmlAttributes: new { })<span style="color:red">*</span>
                </div>

                <div class="col-xs-11">
                    @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control", @id = "txtUserName" } })
                    @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
                    <div id="customError"><span id="spnUserName" class="text-danger"></span></div>
                </div>
            </div>

            <div class="form-group">
                <div class="control-label col-sm-3">
                    @Html.LabelFor(model => model.Password, htmlAttributes: new { })<span style="color: red">*</span>
                </div>

                <div class="col-xs-11">
                    @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control", @id = "txtPassword" } })
                    @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                    <div id="customError"><span class="text-danger"></span></div>
                </div>
            </div>

            <div class="form-group">
                <div class="control-label col-sm-3">
                    @Html.LabelFor(model => model.ConfirmPassword, htmlAttributes: new { })<span style="color:red">*</span>
                </div>

                <div class="col-xs-11">
                    @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "form-control", @id = "txtConfirmPassword" } })
                    @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                    <div id="customError"><span class="text-danger"></span></div>
                </div>
            </div>

            <div class="form-group">
                <div class="control-label col-sm-3">
                    @Html.LabelFor(model => model.FirstName, htmlAttributes: new { })<span style="color:red">*</span>
                </div>

                <div class="col-xs-11">
                    @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", @id = "txtFirstName" } })
                    @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                    <div id="customError"><span class="text-danger"></span></div>
                </div>
            </div>

            <div class="form-group">
                <div class="control-label col-sm-3">
                    @Html.LabelFor(model => model.LastName, htmlAttributes: new { })<span style="color:red">*</span>
                </div>

                <div class="col-xs-11">
                    @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control", @id = "txtLastName" } })
                    @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                    <div id="customError"><span class="text-danger"></span></div>
                </div>
            </div>

            <div class="form-group">
                <div class="control-label col-sm-3">
                    @Html.LabelFor(model => model.NewEmail, htmlAttributes: new { })<span style="color:red">*</span>
                </div>

                <div class="col-xs-11">
                    @Html.EditorFor(model => model.NewEmail, new { htmlAttributes = new { @class = "form-control", @id = "txtNewEmail" } })
                    @Html.ValidationMessageFor(model => model.NewEmail, "", new { @class = "text-danger" })
                    <div id="customError"><span class="text-danger"></span></div>
                </div>
            </div>

            <div class="form-group">
               
            </div>

            <div class="form-group">
                <div class="control-label col-sm-3">
                    @Html.LabelFor(model => model.RoleId, htmlAttributes: new { })<span style="color:red">*</span>
                </div>

                <div class="col-xs-9">
                    @Html.DropDownListFor(model => model.RoleId, null, "--Select Role--", htmlAttributes: new { @class = "form-control", id = "RoleId" })
                    @Html.ValidationMessageFor(model => model.RoleId, "", new { @class = "text-danger", @id = "RoleIdValidate", style = "left:2%;bottom:-40%;" })
                    @*<div id="customError"><span class="text-danger"></span></div>*@
               
                    @Html.LabelFor(model => model.PhoneNumber, htmlAttributes: new { style = "margin-left:3%" })<span style="color: red">*</span>
               
                    @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control", @id = "txtPhoneNumber" } })
                    @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" , style = "left:51%;bottom:-50%;" })
                    <div id="customError"><span class="text-danger"></span></div>
                </div>
            </div>

            <div id="branchDiv" hidden>
            @if (ViewBag.CurrUserRoleType != 2)
                    {
                <div class="form-group">
                    <div class="control-label col-sm-3">
                            @Html.LabelFor(model => model.BranchId, htmlAttributes: new { })<span style="color: red">*</span>
                    </div>
                        @if (ViewBag.BranchId.Items.Count == 1)
                        {
                            <div class="control-label col-sm-3">
                                @Html.HiddenFor(model => model.BranchId, new { @Value = (int)ViewBag.BranchId.Items[0].BranchId })
                                @Html.LabelFor(model => model.BranchId, (string)ViewBag.BranchId.Items[0].BranchName, htmlAttributes: new { @class = "form-control", id = "RegisteredBranchId", style = "border:none;border-radius:none;-webkit-box-shadow:nonr;box-shadow:none;margin-top: 3px;display: block;" })
                                </div>
                                }
                                else {
                                <div class="col-xs-3">
                                    @Html.DropDownListFor(model => model.BranchId, null, "--Select Branch--", htmlAttributes: new { @class = "form-control", id = "BranchId" })
                                    @Html.ValidationMessageFor(model => model.BranchId, "", new { @class = "text-danger" })
                                    <div id="customError"><span class="text-danger"></span></div>
                                </div>
                                }
                            </div>
                        }
            </div>


            <div class="form-group">

                <div class="button-panel">
                    <input type="button" value="Back" name="subBack" id="btnPreStep3" class="btn btn-default left-button" />


                    <input type="submit" value="Create" class="btn btn-primary btn-next" style="left:40%" />
                    <input type="button" id="clear" value="Clear" class="btn btn-default right-button" />

                </div>

            </div>
        </div>

    }

    <div>

    </div>

}



<script src="~/scripts/CommonFunctions.js"></script>



<script>

    $("#clear").click(function () {
        $('#branchDiv').hide();

    });

    $(function () {
        $('#skip').click(function () {

            $('#loadingDiv').show();
            $.ajax({
                url: '@Url.Action("Step4")',
                type: 'GET',


                success: function (partialView) {
                    $('#loadingDiv').hide();
                    $('#changeContainer').html(partialView);
                    $('#changeContainer').show();
                    Progress(4);
                },
                error: function (request, status, error) {
                    //handleErrorMsg(request.responseText);

                }
            });
        });
    });
</script>

<script type="text/javascript">
    $(function () {
        $('#btnPreStep3').click(function () {

            $('#loadingDiv').show();
            $.ajax({
                url: '@Url.Action("step2", "SetupProcess")',
                type: 'GET',
                data: { edit: 1 },

                success: function (partialView) {
                    $('#loadingDiv').hide();
                    $('#changeContainer').html(partialView);
                    $('#changeContainer').show();

                },
                error: function (request, status, error) {
                    //handleErrorMsg(request.responseText);

                }
            });
        });
    });

    $(".tab.3").parent("li").addClass("active").siblings().removeClass('active');


    $('#RoleId').change(function () {
        var val = document.getElementById("RoleId").value;
        if (val == '2' || val == '3') {
            $('#branchDiv').show();
        }
        else {
            $('#branchDiv').hide();
        }
    });

    //Validation

    // User name validate
    $('#txtUserName').keypress(function (e) {
        var code = e.which;
        if (this.value.length === 0 && (48 <= code && code <= 57)) {
            //$("#customError span[id^='spnUserName']").text("User name can't be start with numbers");
            this.focus();
            e.preventDefault();
            return;
        }

        var res = BlockText(e.which);
        if (res === 1) {
            //$("#customError span[id^='spnUserName']").text("Please use only letters (a-z) and numbers.");
            e.preventDefault();
            return;
        }
    });

    // change to title case
    $('#txtFirstName, #txtLastName').keyup(function (e) {
        ToTitleCase(this.id, this.value);
    });

    //Check maximum length
    $('#txtUserName, #txtFirstName, #txtLastName, #txtPassword, #txtConfirmPassword').keypress(function (e) {
        var res = CheckMaxLenth(this, this.value, 30);
        if (res === 0) {
            e.preventDefault();
            return;
        }
    });

    $('#txtPassword, #txtConfirmPassword').keypress(function (e) {
        if (this.value.length === 0 && e.which === 32) {
            e.preventDefault();
            return;
        }
        var array = ['~', '`', '!', '#', '$', '%', '*', '&', '(', ')', '+', '/', '=', '?', '^', '{', '|', '}', '[', ']', ':', ';', '"', '<', '>'];
        var res = InvalidCharacters(this, array, e.which);

        if (res === 1) {
            e.preventDefault();
            return;
        }
        else if (e.which === 92) {
            //$(this).siblings('div').children('span').text("Invalid character.");
            e.preventDefault();
            return;
        }
    });

    //Check maximum length for email address and valid characters
    $('#txtNewEmail').keypress(function (e) {
        var res = CheckMaxLenth(this, this.value, 100);
        if (res === 0) {
            e.preventDefault();
            return;
        }

        var array = ['~', '`', '!', '#', '$', '%', '*', '(', ')', '+', '-', '/', '=', '?', '^', '{', '|', '}', '[', ']', ':', ';', '"', '<', '>', '', ' ', ','];
        res = InvalidCharacters(this, array, e.which);

        if (res === 1) {
            e.preventDefault();
            return;
        }
        else if (e.which === 92 || e.which === 39) {
            //$(this).siblings('div').children('span').text("Invalid character.");
            e.preventDefault();
            return;
        }
    });

    $('#txtFirstName, #txtLastName').keypress(function (e) {
        //var array = [' ', '/', '`', '~', '!'];
        var array = ['~', '`', '!', '#', '$', '%', '&', '*', '(', ')', '+', '-', '/', '=', '?', '^', '{', '|', '}', '[', ']', ':', ';', '"', '<', '>', ' '];
        var res = InvalidCharacters(this, array, e.which);

        if (res === 1) {
            e.preventDefault();
            return;
        }
    });

    $('#txtPhoneNumber').keypress(function (e) {
        var res = PhoneNumber(this, e.which);
        if (res === 0) {
            e.preventDefault();
            return;
        }

        res = CheckMaxLenth(this, this.value, 15);
        if (res === 0) {
            e.preventDefault();
            return;
        }
    });

</script>

<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>

@*<script type="text/javascript">
        function editUser(index) {

            var model = @Html.Raw(Json.Encode(Model));
            console.log(model);
            console.log(index);

            document.getElementById("EditableUserName").value = model.Users[index].UserName;
            //document.getElementById("password").value = model.Users[index].Password;
            //document.getElementById("confirmPassword").value = model.Users[index].ConfirmPassword;
            document.getElementById("firstName").value = model.Users[index].FirstName;
            document.getElementById("lastName").value = model.Users[index].LastName;
            document.getElementById("EditableEmail").value = model.Users[index].NewEmail;
            document.getElementById("phone").value = model.Users[index].PhoneNumber;
            document.getElementById("BranchId").value = model.Users[index].BranchId;
            document.getElementById("RoleId").value = model.Users[index].RoleId;
            document.getElementById("editUserId").value = model.Users[index].UserId;
        };

        function CreateNewUser(){
            document.getElementById("EditableUserName").value = "";
            document.getElementById("password").value = "";
            document.getElementById("confirmPassword").value = "";
            document.getElementById("firstName").value = "";
            document.getElementById("lastName").value = "";
            document.getElementById("EditableEmail").value = "";
            document.getElementById("phone").value = "";
            document.getElementById("BranchId").value = "";
            document.getElementById("RoleId").value = "";
            document.getElementById("editUserId").value = "";
        }

    </script>*@
