@model BankLoanSystem.Models.CurtailmentModel
@{
    ViewBag.Title = "Step5";
    if (ViewBag.AjaxRequest == null)
    {
        Layout = "~/Views/Shared/_SetupProcess.cshtml";
    }
}

<style>

    .new_form_group{
        width: 548px;
    }
</style>
<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>

@if (ViewBag.Redirect == 1)
{
    <script>

        $(location).attr('href', '/UserManagement/UserDetails');
    </script>
}
<div id="page-wrapper" class="gray-bg sidebar-content companySetupWrapper lonesetup_border" style="min-height:inherit;">
    <div class="ibox float-e-margins">
        <div class="ibox-title">
            <div class="container body-content">

                <div class="row">
                    <div class="container body-content new_container">
                        <div class="setupImage"><img src="~/Images/loanSetupImage.png" width="100" alt=""></div>
                        <div class="setupTitle"><h2>Curtailment</h2></div>
                        <div style="clear:both;"></div>

                        @if (ViewBag.SuccessMsg == "Loan setup is completed")
                        {
                            @*@section JavaScript
                                {
                                    <script type="text/javascript">
                                        Progress(0);
                                    </script>
                                }*@
                            <span class="text-success">@ViewBag.SuccessMsg</span>
                            <div class="form-group">
                                <div class="button-panel">
                                    Click <a href="/UserManagement/UserDetails">here</a> to go dashboard.
                                    <input type="button" id="dashBoard" value="Dashboard" class="btn btn-primary  btn-next" style="left: 30%" />
                                </div>
                            </div>
                        }
                        else
                        {
                            List<SelectListItem> listItems = new List<SelectListItem>();
                            using (Ajax.BeginForm("Step10", "SetupProcess", new AjaxOptions()
                            {

                                OnFailure = "handleError",
                                HttpMethod = "POST",
                                InsertionMode = InsertionMode.Replace,
                                UpdateTargetId = "changeContainer",
                                LoadingElementId = "loadingDiv"
                            }, new { id = "form" }))
                            {
                                @Html.AntiForgeryToken()

                                <div class="topErrors">
                                    <p class="err_msg">.</p>
                                </div>

                                <div class="form-horizontal">
                                    @if (ViewBag.SuccessMsg != null)
                                    {
                                        <span style="color: green">
                                            @ViewBag.SuccessMsg
                                        </span>
                                    }
                                    else if (ViewBag.ErrorMsg != null)
                                    {
                                        <span style="color: red">
                                            @ViewBag.ErrorMsg
                                        </span>
                                    }
                                    <input type="hidden" id="cal" name="cal" />

                                    <div class="form-group new_form_group">
                                        <table width="">
                                            <tr>
                                                <td width="55%"><label>Is the curtailment calculated from the original purchase price or the advanced amount?   <span class='icon-help_outline 1'></span></label></td>
                                                <td width="40%">
                                                    @*@Html.RadioButtonFor(m => m.CalculationBase, "Full payment", new { @id = "rdFullPayment", @class = "payment" })
                                                        Full payment
                                                        @Html.RadioButtonFor(m => m.CalculationBase, "Advance", new { @id = "rdAdvance", @class = "payment" })
                                                        Advance*@
                                                    @if (Model.CalculationBase == "Full payment")
                                                    {
                                                        @Html.RadioButtonFor(m => m.CalculationBase, "Full payment", new { @id = "rdFullPayment", @class = "payment", @checked = true })
                                                        <text>Original Price</text>
                                                        @Html.RadioButtonFor(m => m.CalculationBase, "Advance", new { @id = "rdAdvance", @class = "payment" })
                                                        <text>Advance Amount</text>
                                                    }
                                                    else if (Model.CalculationBase == "Advance")
                                                    {
                                                        @Html.RadioButtonFor(m => m.CalculationBase, "Full payment", new { @id = "rdFullPayment", @class = "payment" })
                                                        <text>Original Price</text>
                                                        @Html.RadioButtonFor(m => m.CalculationBase, "Advance", new { @id = "rdAdvance", @class = "payment", @checked = true })
                                                        <text>Advance Amount</text>
                                                    }
                                                    else
                                                    {
                                                        @Html.RadioButtonFor(m => m.CalculationBase, "Full payment", new { @id = "rdFullPayment", @class = "payment" })
                                                        <text>Original Price</text>
                                                        @Html.RadioButtonFor(m => m.CalculationBase, "Advance", new { @id = "rdAdvance", @class = "payment" })
                                                        <text>Advance Amount</text>
                                                    }
                                                </td>
                                            </tr>
                                            <tr>
                                                <td></td>
                                                <td>
                                                    <div id="customErrorCalBase"><span class="text-danger"></span></div>
                                                </td>
                                            </tr>
                                        </table>
                                        <div>
                                            @Html.ValidationMessageFor(model => model.CalculationBase, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group new_form_group">
                                        <table width="100%">
                                            <tr>
                                                <td width="55%"><label>Do the curtailments become due over the course of Months or Days?   <span class="icon-help_outline 3"></span></label></td> 
                                                <td width="40%">
                                                    @Html.RadioButtonFor(m => m.TimeBase, "Months", new { @id = "rdMonths", @class = "timeBase" })Months
                                                    @Html.RadioButtonFor(m => m.TimeBase, "Days", new { @id = "rdDays", @class = "timeBase" })Days
                                                </td>
                                            </tr>
                                            <tr>
                                                <td></td>
                                                <td>
                                                    <div id="customErrorTimeBase"><span class="text-danger"></span></div>
                                                </td>
                                            </tr>
                                        </table>
                                        <div>
                                            @Html.ValidationMessageFor(model => model.CalculationBase, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group new_form_group">
                                        @if (Model.RemainingPercentage >= 0)
                                        {
                                            <span id="spnremainPt">
                                            </span>
                                            <span style="color: green" id="spnremainPtComplete"></span>
                                            <span style="color: red" id="spnremainPtError"></span>
                                            <br />
                                            <span>
                                                Advance Percentage: @Html.DisplayFor(m => m.AdvancePt, new { htmlAttributes = new { @id = "remainingPercentage" } })
                                            </span>



                                        }
                                        <br />
                                        @*<span>
                                                Vehicle must be paid off within the @Html.DisplayFor(m => m.RemainingTime, new { htmlAttributes = new { @id = "remainingTime" } }) @Model.TimeBase
                                            </span>*@
                                    </div>
                                    <br />
                                   
                                    
                                    <div id="CurtailmentGrid">
                                        <div class="form-group new_form_group">
                                            <div style="text-align: center;" id="divTbl">
                                                <table id="tblGrid" cellpadding="3" cellspacing="0" border="1" style="border-color: Black;color:black; border-collapse: collapse; text-align: center; width: 60%;float:left">
                                                    <tr style="font-weight: bold; background-color: darkgray; height: 15px;">
                                                        <th style="width: 10%; text-align: center" height="30px">
                                                            <p id="cuId"> Curt#</p>
                                                        </th>
                                                        <th style="width: 35%; text-align: center" height="30px">
                                                            <p id="time"></p>
                                                        </th>
                                                        <th style="width: 35%; text-align: center" height="30px">
                                                            <p id="pecentage">Percentage(%)</p>
                                                        </th>
                                                        <th style="width: 20%;" height="30px">
                                                        </th>
                                                    </tr>
                                                    @for (int a = 0; a < Model.InfoModel.Count; a++)
                                                    {
                                                        <tr>
                                                            <td style="width: 10%;"><label id="lblCur">@Model.InfoModel[a].CurtailmentId</label></td>
                                                            <td style="width: 35%;">
                                                                @*<input class="clstimePeriod" id="timePeriod" type="text" value="" disabled="disabled" style="text-align: right">*@
                                                                @Html.TextBoxFor(m => m.InfoModel[a].TimePeriod, "{0:#.#}", new { @id = "timePeriod", @class = "clstimePeriod", @disabled = "disabled", @style = "text-align: right", @tabindex = "-1" })
                                                                <span class="field-validation-valid text-danger" data-valmsg-replace="true"></span>
                                                            </td>
                                                            <td style="width: 35%;">
                                                                @*<input class="clsaddCuirtailment" id="percentage" type="text" value="" disabled="disabled" style="text-align: right">*@
                                                                @Html.TextBoxFor(m => m.InfoModel[a].Percentage, "{0:#.#}", new { @id = "percentage", @class = "clsaddCuirtailment", @disabled = "disabled", @style = "text-align: right" })
                                                                <span class="field-validation-valid text-danger" data-valmsg-replace="true"></span>
                                                            </td>
                                                            <td style="width: 20%;">
                                                                @*@if (a != 0)
                                                                    {*@
                                                                <input type="button" class="btnDeleteRow" name="" value="Delete" title="Delete Row" style="width: 60px; height: 25px" tabindex="-1" />
                                                                @*}*@
                                                            </td>
                                                        </tr>
                                                    }
                                                </table>
                                                <span class="icon-help_outline 4" style="float:left"></span>
                                                
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-group new_form_group">
                                        <div id="customErrorTable"><span class="text-danger"></span></div>
                                        <br />
                                        <div id="spnremainTimeError"><span class="text-danger"></span></div>
                                    </div>
                                    <br />
                                    
                                    <div class="form-group new_form_group">
                                        <table width="100%">
                                            <tr>
                                                <td width="60%">@Html.LabelFor(model => model.LoanStatus, htmlAttributes: new { })</td>
                                                <td width="40%">
                                                    @if (Model.LoanStatus == "Yes")
                                                    {
                                                        @Html.RadioButtonFor(m => m.LoanStatus, "Yes", new { @id = "rdYes", @class = "Active", @checked = true })
                                                        <text>Yes</text>
                                                        @Html.RadioButtonFor(m => m.LoanStatus, "No", new { @id = "rdNo", @class = "Active" })
                                                        <text>No</text>
                                                    }
                                                    else if (Model.LoanStatus == "No")
                                                    {
                                                        @Html.RadioButtonFor(m => m.LoanStatus, "Yes", new { @id = "rdYes", @class = "Active" })
                                                        <text>Yes</text>
                                                        @Html.RadioButtonFor(m => m.LoanStatus, "No", new { @id = "rdNo", @class = "Active", @checked = true })
                                                        <text>No</text>
                                                    }
                                                    else
                                                    {
                                                        @Html.RadioButtonFor(m => m.LoanStatus, "Yes", new { @id = "rdYes", @class = "Active" })
                                                        <text>Yes</text>
                                                        @Html.RadioButtonFor(m => m.LoanStatus, "No", new { @id = "rdNo", @class = "Active" })
                                                        <text>No</text>
                                                    }
                                                </td>
                                            </tr>
                                            <tr>
                                                <td></td>
                                                <td>
                                                    <div id="customErrorLoanStatus"><span class="text-danger"></span></div>
                                                </td>
                                            </tr>
                                        </table>

                                        
                                    </div>
                                           
                                    <div class="form-group new_form_group">
                                        <table width="100%">
                                            <tr>
                                                <td width="60%">What day of the month are the curtailments due?   <span class="icon-help_outline 5"></span></td>
                                                <td width="40%">
                                                    
                                                    @{
                                                        for (var i = 1; i < 29; i++)
                                                        {
                                                            listItems.Add(new SelectListItem { Text = i.ToString(), Value = i.ToString() });
                                                        }
                                                        listItems.Add(new SelectListItem { Text = "EoM", Value = "EoM" });
                                                    }
                                                    @Html.DropDownListFor(model => model.DueDate, listItems, "-- select a date --", new { @class = "form-control text-box single-line text_field_input short_text_field", @id = "CurtailmentDueDate" })
                                                </td>
                                            </tr>
                                            <tr>
                                                <td></td>
                                                <td>
                                                    <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.DueDate, "", new { @class = "text-danger" })</p>
                                                    <div id="customErrorDueDate"><span class="text-danger"></span></div>
                                                </td>
                                            </tr>
                                        </table>

                                        @*<div class="control-label col-sm-3 mLable">
                                                <label>What day of the month are the curtailments due?</label>
                                            </div>
                                            <div class="col-xs-8 text_field short_text_field" style="padding-left: 140px;">
                                                @{
                                                    for (var i = 1; i < 29; i++)
                                                    {
                                                        listItems.Add(new SelectListItem { Text = i.ToString(), Value = i.ToString() });
                                                    }
                                                    listItems.Add(new SelectListItem { Text = "EoM", Value = "EoM" });
                                                }
                                                @Html.DropDownListFor(model => model.DueDate, listItems, "-- select a date --", new { @class = "form-control text-box single-line text_field_input short_text_field", @id = "CurtailmentDueDate" })
                                            </div>
                                            <div class="err_msg_box  mErrMsgBox">
                                                <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.DueDate, "", new { @class = "text-danger" })</p>
                                                <div id="customErrorDueDate"><span class="text-danger"></span></div>
                                            </div>*@
                                    </div>
                                    <div class="form-group new_form_group">

                                        <table width="100%">
                                            <tr>
                                                <td width="60%">
                                                    <label>
                                                        Would you like a reminder email sent when curtailments are due?   <span class="icon-help_outline 6"></span><br>
                                                        <span class="optional">(Optional)</span>
                                                    </label>
                                                </td>
                                                <td width="40%">
                                                    
                                                    @Html.EditorFor(model => model.AutoRemindEmail, new { htmlAttributes = new { @class = "form-control text-box single-line text_field_input", @id = "curtailmentDueEmail", placeholder = "example.example.com" } })
                                                </td>
                                            </tr>
                                            <tr>
                                                <td></td>
                                                <td>
                                                    <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.AutoRemindEmail, "", new { @class = "text-danger" })</p>
                                                </td>
                                            </tr>
                                        </table>

                                        @*<div class="control-label col-sm-2 mLable">
                                                <label>
                                                    Would you like a reminder email sent when curtailments are due?<br>
                                                    <span class="optional">(Optional)</span>
                                                </label>
                                            </div>
                                            <div class="col-xs-8 text_field short_text_field" style="width:335px;">
                                                @Html.EditorFor(model => model.AutoRemindEmail, new { htmlAttributes = new { @class = "form-control text-box single-line text_field_input", @id = "curtailmentDueEmail" } })
                                            </div>
                                            <div class="err_msg_box  mErrMsgBox">
                                                <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.AutoRemindEmail, "", new { @class = "text-danger" })</p>
                                            </div>*@
                                    </div>
                                <div class="form-group new_form_group">

                                    <table width="100%">
                                        <tr>
                                            <td width="60%">
                                                <label>
                                                    How many days prior to the curtailment due date would you like a reminder emailed?<br>
                                                    <span class="optional">(Optional)</span>
                                                </label>
                                            </td>
                                            <td width="40%">
                                                @Html.EditorFor(model => model.EmailRemindPeriod, new { htmlAttributes = new { @class = "form-control text-box single-line text_field_input short_text_field", @id = "curtailmentDueEmailRemindPeriod", placeholder = "Number of Days", @type = "text", min = 1, max=3, @style="text-align: right" } })
                                            </td>
                                        </tr>
                                        <tr>
                                            <td></td>
                                            <td>
                                                <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.EmailRemindPeriod, "", new { @class = "text-danger" })</p>
                                                <div id="customErrorPeriod"><span class="text-danger"></span></div>
                                            </td>
                                        </tr>
                                    </table>

                                    @*<div class="control-label col-sm-2 mLable">
                                            <label>
                                                How many days prior to the curtailment due date would you like a reminder emailed?<br>
                                                <span class="optional">(Optional)</span>
                                            </label>
                                        </div>
                                        <div class="col-xs-8 text_field short_text_field" style="width:335px;">
                                            @Html.EditorFor(model => model.EmailRemindPeriod, new { htmlAttributes = new { @class = "form-control text-box single-line text_field_input short_text_field", @id = "curtailmentDueEmailRemindPeriod", placeholder = "Number of Days", @type = "text", min = 1 } })
                                        </div>
                                        <div class="err_msg_box  mErrMsgBox">
                                            <p class="err_msg new_err_msg">@Html.ValidationMessageFor(model => model.EmailRemindPeriod, "", new { @class = "text-danger" })</p>
                                            <div id="customErrorPeriod"><span class="text-danger"></span></div>
                                        </div>*@
                                </div>
                                    <div class="form-group new_form_group clear_next clear_next_bordr">
                                        <div>
                                            <nav>
                                                <div class="pager new_pager">
                                                    <div class="button_box algn_left">
                                                        <input value="Back" name="subBack" id="btnPreStep10" class="btn btn-primary m-b cancel next_clear_button back_back" style="margin-left: 10px" type="button" tabindex="-1">
                                                    </div>
                                                    <div class="button_box algn_center">
                                                        <input value="Create" id="btnCreate" class="btn btn-primary m-b next_clear_button next_back" style="margin-left:10px" type="button">
                                                    </div>
                                                    <div class="button_box algn_right">
                                                        <input id="clear" value="Clear" class="btn btn-primary m-b next_clear_button clear_back" style="margin-left: 10px" type="button" onclick="clearFunction()" tabindex="-1">
                                                    </div>
                                                    <div style="clear:both"></div>
                                                </div>
                                            </nav>
                                        </div>
                                    </div>


                                </div>
                                                            }
                                                        }


                    </div>
                </div>
            </div>

        </div>

    </div>



</div>

<div class="rightPanel">
    @{
        @Html.Partial("Step10help")
    }
</div>

@*Grid view*@
<script src="~/scripts/CommonFunctions.js"></script>

<script language="javascript">
    
    $(document).ready(function(){
        window.scrollTo(0, 0);

        $('.nav li.active ul').removeClass('in');
        $('.nav li').removeClass('active');
        $('.nav li.loan').addClass('active');
        $('.nav li.active ul').addClass('in');

        // helper Funtionality
        var HelpString = $('.right_panel_box p').html();
        var HelpTitle = $('.right_panel_box h4').html();

        $('input[name="CalculationBase"] , .icon-help_outline.1').click(function () {

            $('.right_panel_box p').html("Select if the curtailments will be calculated from the original price/cost of the unit or if they will be calculated from the advanced amount. <br></br><i>(example: If the advance percent is 80% and the original price was $10,000 then the advanced amount is $8,000. The first curtailment is 25%. If you chose 'Original price' then the curtailment amount would be $2,500. If you chose 'Advance amount' then the curtailment amount would be $2,000.)</i>");
            $('.right_panel_box h4').html('Curtailment calculation base');


        });

        $('input[name="TimeBase"] , .icon-help_outline.3').click(function () {

            $('.right_panel_box p').html("Specify if the curtailment schedule will follow months or days. <br></br><i>(example: If you have a curtailment which is due in 45 days you will need to select 'days' and then convert all curtailments to days. You will not be able to select months and then use 1.5 months. If you chose months then you will only be able to specify whole months.)</i>");
            $('.right_panel_box h4').html('Curtailment schedule setup');


        });

        $(document).on('click', '.icon-help_outline.2', function(){
            $('.right_panel_box p').html("This shows the percentage remaining to pay off. It is supplied for informational purposes to help create an accurate curtailment schedule below.");
            $('.right_panel_box h4').html('Percentage to payoff');
        
        }); 

        $(document).on('click', '.icon-help_outline.4', function(){
            $('.right_panel_box p').html("In this table you can enter all curtailments. You need to specify when the curtailment is due (months/days) and what percentage is due for that curtailment. If you specified months above you will need to enter all curtailments as whole months. If you specified days above you will need to enter all curtailments as days. <br></br><i>(example: Curt #1 - 2 months (from advance date) - 30%, Curt #2 - 4 months (from advance date) - 40%, Curt #3 - 5 months (from advance date) - 10%.)</i>");
            $('.right_panel_box h4').html('Curtailment schedule');
        
        }); 

        $('#CurtailmentDueDate , .icon-help_outline.5').click(function () {

            $('.right_panel_box p').html("Specify which day of each month the curtailments are paid. The system will calculate all units which had a curtailment come due since the last curtailment was paid.");
            $('.right_panel_box h4').html('Curtailment due date');


        });

        $('#curtailmentDueEmail , .icon-help_outline.6').click(function () {

            $('.right_panel_box p').html("Specify an email address if you would like a reminder to be sent out prior to the curtailment becoming due.");
            $('.right_panel_box h4').html('Curtailment due reminder email');


        });
        

        $('select:not(#CurtailmentDueDate), span:not(.icon-help_outline.1, .icon-help_outline.3, .icon-help_outline.2, .icon-help_outline.4, .icon-help_outline.5, .icon-help_outline.6), input:not([name="CalculationBase"], [name="TimeBase"], #curtailmentDueEmail) ').click(function () {

            $('.right_panel_box p').html(HelpString);
            $('.right_panel_box h4').html(HelpTitle);


        });

        $(document).on('click', 'input[class="clstimePeriod"]', function(){
            $('.right_panel_box p').html("In this table you can enter all curtailments. You need to specify when the curtailment is due (months/days) and what percentage is due for that curtailment. If you specified months above you will need to enter all curtailments as whole months. If you specified days above you will need to enter all curtailments as days. <br></br><i>(example: Curt #1 - 2 months (from advance date) - 30%, Curt #2 - 4 months (from advance date) - 40%, Curt #3 - 5 months (from advance date) - 10%.)</i>");
            $('.right_panel_box h4').html('Curtailment schedule');
        
        }); 


    })
</script>

<script type="text/javascript">

    $(document).ready(function() {
        document.getElementById("curtailmentDueEmailRemindPeriod").value = "";
    });

    $('#curtailmentDueEmail').blur(function (e) {
        if (this.value === '') {
            $("#curtailmentDueEmail").attr('placeholder', 'example.example.com');
        }
    });

    $('#curtailmentDueEmailRemindPeriod').blur(function (e) {
        if (this.value === '') {
            $("#curtailmentDueEmailRemindPeriod").attr('placeholder', 'Number of Days');
        }
    });

    var initialTbl = '<table id="tblGrid" cellpadding="3" cellspacing="0" border="1" style="border-color: Black;color:black; border-collapse: collapse; text-align: center; width: 60%;">' +
        '<tbody><tr style="font-weight: bold; background-color: darkgray; height: 15px;">' +
        '<th style="width: 10%; text-align: center" height="30px">' +
        '<p id="cuId"> Curt#</p>' +
        '</th>' +
        '<th style="width: 35%; text-align: center" height="30px">' +
        '<p id="time"></p>' +
        '</th>' +
        '<th style="width: 35%; text-align: center" height="30px">' +
        '<p id="pecentage">Percentage(%)</p>' +
        '</th>' +
        '<th style="width: 20%;" height="30px">' +
        '</th>' +
        '</tr>' +
        '<tr>' +
        '<td style="width: 10%;"><label id="lblCur">1</label></td>' +
        '<td style="width: 35%;">' +
        '<input class="clstimePeriod" data-val="true" data-val-number="The field Time period must be a number." data-val-regex="Invalid" data-val-regex-pattern="^[1-9][0-9]*$" disabled="disabled" id="timePeriod" name="InfoModel[0].TimePeriod" style="text-align: right" tabindex="-1" type="text" value="">' +
        '<span class="field-validation-valid text-danger" data-valmsg-replace="true"></span>' +
        '</td>' +
        '<td style="width: 35%;">' +
        '<input class="clsaddCuirtailment" data-val="true" data-val-number="The field Percentage must be a number." data-val-range="Invalid" data-val-range-max="100" data-val-range-min="1" disabled="disabled" id="percentage" name="InfoModel[0].Percentage" style="text-align: right" type="text" value="">' +
        '<span class="field-validation-valid text-danger" data-valmsg-replace="true"></span>' +
        '</td>' +
        '<td style="width: 20%;">' +
        '<input type="button" class="btnDeleteRow" name="" value="Delete" title="Delete Row" style="width: 60px; height: 25px" tabindex="-1">' +
        '</td>' +
        '</tr>' +
        '</tbody></table>';

    $('#curtailmentDueEmail').keypress(function (e) {
        var res = CheckMaxLenth(this, this.value, 100);
        if (res === 0) {
            e.preventDefault();
            return;
        }

        var array = ['~', '`', '!', '#', '$', '%', '*', '(', ')', '+', '-', '/', '=', '?', '^', '{', '|', '}', '[', ']', ':', ';', '"', '<', '>', '', ' ', ','];
        res = InvalidCharacters(this, array, e.which);

        if (res === 1) {
            e.preventDefault();
            return;
        }
        else if (e.which === 92 || e.which === 39) {
            //$(this).siblings('div').children('span').text("Invalid character.");
            e.preventDefault();
            return;
        }
    });

    $('#curtailmentDueEmail, #curtailmentDueEmailRemindPeriod').click(function (e) {
        $('#customErrorPeriod').children('span').text("");
    });

    $('curtailmentDueEmailRemindPeriod').keypress(function(e) {
        if (!(48 <= e.which && e.which <= 58))
            e.preventDefault();
    });

    $('curtailmentDueEmailRemindPeriod').click(function(e) {
        if (!(48 <= e.which && e.which <= 58))
            e.preventDefault();
    });

    $('#dashBoard').click(function () {
        window.location.replace('@Url.Action("UserDetails", "UserManagement")');
    });

    function clearFunction() {
        //unchecked all selected radio button
        $(this).find("input:radio:checked").prop('checked',false);

        //remove all custom messages
        $('#customErrorCalBase').children('span').text("");
        $('#customErrorTimeBase').children('span').text("");
        $('#customErrorTable').children('span').text("");
        $('#customErrorLoanStatus').children('span').text("");
        $('#customErrorDueDate').children('span').text("");
        $('#customErrorPeriod').children('span').text("");
        $('#spnremainPtComplete').text("");
        $('#spnremainPtError').text("");
        $('#spnremainTimeError').children('span').text("");
        $('.text-danger field-validation-error').children('span').text("");
        $('#spnremainPt').html("");
        
        
        //set curtailment shedule grid as initial
        $('#tblGrid').remove();
        $('#divTbl').append(initialTbl);
        initializeData();
        window.scrollTo(0, 0);

        $("#curtailmentDueEmailRemindPeriod").attr('placeholder', 'Number of Days');
        $("#curtailmentDueEmail").attr('placeholder', 'example.example.com');
        
    }

    //Assign model details to global variable
    var model = @Html.Raw(Json.Encode(Model));

    //
    var remainingPt = parseInt(model.RemainingPercentage);
    var difPercentage = parseInt(100) - parseInt(model.AdvancePt);
    var id = $('#tblGrid tr:last').find("#lblCur").html();
    var payPercentage = 0;
    var isFirst = true;
    var advancePt = parseInt(model.AdvancePt);

    var list = { currentList: [] };

    function initializeData() {
        remainingPt = parseInt(model.RemainingPercentage);
        difPercentage = parseInt(100) - parseInt(model.AdvancePt);
        id = $('#tblGrid tr:last').find("#lblCur").html();
        payPercentage = 0;
        isFirst = true;
        advancePt = parseInt(model.AdvancePt);

        list = { currentList: [] };
    }

    function createTableRow(id) {
        return '<tr>' +
            '<td style="width: 10%;"><label id="lblCur">' +
            id +
            '</label></td>' +
            '<td style="width: 35%;">' +
            '<input class="clstimePeriod" id="timePeriod" type="text" value="" style="text-align: right" autofocus>' +
            '<span class="field-validation-valid text-danger" data-valmsg-replace="true"></span>' +
            '</td>' +
            '<td style="width: 35%;">' +
            '<input class="clsaddCuirtailment" id="percentage" type="text" value="" style="text-align: right">' +
            '<span class="field-validation-valid text-danger" data-valmsg-replace="true"></span>' +
            '</td>' +
            '<td style="width: 20%;">' +
            '<input type="button" class="btnDeleteRow" name="" value="Delete" title="Delete Row" style="width: 60px; height: 25px" tabindex="-1"/>' +
            '</td>' +
            '</tr>';
    }

    $(document).on('click', '.clsaddCuirtailment', function (e) {
        $('#customErrorTable').children('span').text("");
    });

    $(document).on('click', '.clstimePeriod', function (e) {
        $('#spnremainTimeError').children('span').text("");
        $('#customErrorTable').children('span').text("");
    });

    // allow to enter only numbers
    $(document).on('keypress', '.clsaddCuirtailment, .clstimePeriod', function (e) {
        var res = AllowNumbers(this, e.which);
        if (res === 0) {
            e.preventDefault();
            return;
        }

        res = CheckMaxLenth(this, this.value, 4);
        if (res === 0) {
            e.preventDefault();
            return;
        }
    });

    var isErrorTime = false;
    $(document).on('blur', '.clstimePeriod', function (e) {

        //var tr = $(this).parents('tr:first');

        //var curid = tr.find("#lblCur").html();
        //var timePeriod = tr.find("#timePeriod").val();
        //var previousTime = 0;

        //if(curid > 1)
        //    previousTime = list.currentList[curid - 2].TimePeriod;

        //if (timePeriod > remainingTime) {
        //    $('#spnremainTimeError').children('span').text("You entered time should be less than paid off period");
        //    isErrorTime = true;
        //} else if (timePeriod <= previousTime && timePeriod > 0) {
        //    $('#spnremainTimeError').children('span').text("You entered time should be greater than previous time");
        //    isErrorTime = true;
        //}
        //    //else if(timePeriod < previousTime){
        //    //    $('#spnremainTimeError').text('You entered time should be greater than previous time');
        //    //}
        //else {
        //    isErrorTime = false;
        //    $('#spnremainTimeError').children('span').text("");
        //}

        //var tblLength = $('table#tblGrid > tbody > tr').not(':first').length;

        //alert(tblLength);
        if (this.value === '0') {
            $('#spnremainTimeError').children('span').text("Time must be greater than 0");
            return;
        }
        var index = 0;

        $('table#tblGrid > tbody > tr').not(':first').each(function() {

            var curid = $(this).find("#lblCur").html();
            var timePeriod = $(this).find("#timePeriod").val();
            var percentage = $(this).find("#percentage").val();
            var previousTime = 0;

            if (parseInt(curid) > 1) {
                previousTime = list.currentList[curid - 2].TimePeriod;
            }

            var currentListLenght = Object.keys(list.currentList).length;
            if (parseInt(curid) > 1 && parseInt(currentListLenght) > parseInt(index)) {
                // update list
                list.currentList[index].TimePeriod = timePeriod;
                //list.currentList[index].Percentage = percentage;
            }

            index = parseInt(index) + parseInt(1);
            //alert('curid: ' + curid + ' timePeriod: ' + timePeriod + ' previousTime: ' + previousTime);

            //if (parseInt(timePeriod) > parseInt(remainingTime)) {
            //    $('#spnremainTimeError').children('span').text("You entered time should be less than paid off period");
            //    isErrorTime = true;
            //    return;
            //}else
            if (parseInt(timePeriod) <= parseInt(previousTime) && parseInt(timePeriod) > 0) {

                $('#spnremainTimeError').children('span').text("You entered time should be greater than previous time");
                isErrorTime = true;
                return;
            }
            else {
                isErrorTime = false;
                $('#spnremainTimeError').children('span').text("");
            }
        });
        //alert(isErrorTime);

        //currentListLenght = Object.keys(list.currentList).length;
        //for (var j = 0; j < currentListLenght; j++) {
        //    alert('curid:' + list.currentList[j].CurtailmentId + ' timePeriod:' + list.currentList[j].TimePeriod + ' percentage:' + list.currentList[j].Percentage);
        //}
    });

    $(document).on('blur', '.clsaddCuirtailment', function(e) {

        //if (isErrorTime === false) {
        var tr = $(this).parents('tr:first');

        var curid = tr.find("#lblCur").html();
        var timePeriod = tr.find("#timePeriod").val();
        var percentage = tr.find("#percentage").val();

        var isNewRow = false;

        //alert('curid:' + curid + ' timePeriod:' + timePeriod + ' percentage:' + percentage);

        var currentListLenght = Object.keys(list.currentList).length;

        //for (var j = 0; j < currentListLenght; j++) {
        //    alert('curid:' + list.currentList[j].CurtailmentId + ' timePeriod:' + list.currentList[j].TimePeriod + ' percentage:' + list.currentList[j].Percentage);
        //}

        // Add curtailment schedule details to liast
        if (parseInt(currentListLenght) === (parseInt(curid) - parseInt(1)) && timePeriod !== '' && percentage !== '') {

            list.currentList.push({ CurtailmentId: curid, TimePeriod: timePeriod, Percentage: percentage });
        } else if ((parseInt(currentListLenght) > (parseInt(curid) - parseInt(1))) && timePeriod !== '' && percentage !== '') { // update percentage

            var index = (parseInt(curid) - parseInt(1));
            var prePercen = list.currentList[index].Percentage;
            list.currentList[index].Percentage = percentage;

            isNewRow = true;
            remainingPt = parseInt(remainingPt) + parseInt(prePercen) - parseInt(percentage);

            if (parseInt(remainingPt) > 0) {
                $('#spnremainPt').html('Percentage remaining to pay off :  <span class="icon-help_outline 2"></span> ' + remainingPt);
                $('#spnremainPtComplete').text('');
                $('#spnremainPtError').text('');
            } else if (parseInt(remainingPt) === 0) {
                $('#spnremainPt').html('');
                $('#spnremainPtComplete').text('Curtailment schedule Completed.');
                $('#spnremainPtError').text('');
                document.getElementById("tblGrid").style.borderColor = "green";
            } else {
                $('#spnremainPt').html('');
                $('#spnremainPtComplete').text('');
                $('#spnremainPtError').text('Error percentage found');
            }
        }

        //alert('Cur list: ' + currentListLenght + ' curid: ' + (parseInt(curid) - parseInt(1)));

        if (parseInt(curid) === parseInt(id) && timePeriod !== '' && percentage !== '') {

            if (isNewRow === false) {
                remainingPt = parseInt(remainingPt) - parseInt(percentage);
            }

            isFirst = false;

            $('#spnremainPt').html('Percentage remaining to pay off :  <span class="icon-help_outline 2"></span> ' + remainingPt);
            if (parseInt(remainingPt) > 0) {

                if (isErrorTime === false) {
                    var intId = parseInt(id);
                    id = isNaN(intId) ? 0 : intId;
                    id = id + 1;

                    var strTr = createTableRow(id);
                    $('#tblGrid').append(strTr);
                    //alert($('#tblGrid tr:last').find("#timePeriod").html());
                    $('#tblGrid tr:last').find("#timePeriod").focus();
                }

            }
            else if (parseInt(remainingPt) === 0) {

                if (isErrorTime === false) {
                    $('#spnremainPt').html('');
                    $('#spnremainPtComplete').text('Curtailment schedule Completed.');
                    $('#spnremainPtError').text('');
                } else {
                    $('#spnremainPt').text('Problem in time period!');
                    $('#spnremainPtComplete').text('');
                    $('#spnremainPtError').text('');
                }

            } else {
                $('#spnremainPt').html('');
                $('#spnremainPtComplete').text('');
                $('#spnremainPtError').text('Error percentage found');
            }
        }
        //}
        //currentListLenght = Object.keys(list.currentList).length;
        //for (var j = 0; j < currentListLenght; j++) {
        //    alert('curid:' + list.currentList[j].CurtailmentId + ' timePeriod:' + list.currentList[j].TimePeriod + ' percentage:' + list.currentList[j].Percentage);
        //}
    });

    //$('.clsaddCuirtailment').bind('enterKey', function(e) {
    //    alert('enterkey');
    //});

    //$('.clsaddCuirtailment').keypress(function (e) {
    //    //alert('enterkey');
    //    var key = e.which;
    //    if(key === 13)  // the enter key code
    //    {
    //        alert('enterkey');
    //    }
    //});

    var isSelectCalcType = false;
    var isSelectTime = false;
    var isRowAdded = false;
    var isFullFirst = true;
    //update Percentage remaining to pay off
    $('.payment').change(function() {
        $('#customErrorCalBase').children('span').text("");
        //$('#customErrorTable').children('span').text("");
        isSelectCalcType = true;

        //enable textboxes
        if (isSelectCalcType === true && isSelectTime === true) {
            $('.clstimePeriod').prop("disabled", false);
            $('.clsaddCuirtailment').prop("disabled", false);
        }

        var calcMode = $(this).filter(':checked').val();

        // track first time
        if (isFirst === true) {
            isFirst = false;

            if(calcMode === 'Full payment') {
                payPercentage = parseInt(model.AdvancePt);
                remainingPt = parseInt(remainingPt);

            }
            else if (calcMode === 'Advance') {

                payPercentage = parseInt(100);
                remainingPt = parseInt(remainingPt) + parseInt(difPercentage);
            }
        } else {
            if(calcMode === 'Full payment') {

                payPercentage = parseInt(model.AdvancePt);
                remainingPt = parseInt(remainingPt) - parseInt(difPercentage);

                //if (isFullFirst === true) {
                //    isFullFirst = false;
                //} else {
                //    alert('false');
                //    remainingPt = parseInt(remainingPt) - parseInt(difPercentage);
                //}
            }
            else if (calcMode === 'Advance') {
                payPercentage = parseInt(100);
                isFullFirst = false;
                remainingPt = parseInt(remainingPt) + parseInt(difPercentage);
            }
        }

        if(parseInt(remainingPt) > 0)
        {
            var val = document.getElementById('spnremainPtComplete').innerHTML;

            $('#spnremainPt').html('Percentage remaining to pay off :  <span class="icon-help_outline 2"></span> ' + remainingPt);
            $('#spnremainPtComplete').text('');
            $('#spnremainPtError').text('');

            if (val === 'Curtailment schedule Completed.' && isRowAdded === false) {

                var newId = parseInt(id) + parseInt(1);
                var strTr = createTableRow(newId);
                $('#tblGrid').append(strTr);
                isRowAdded = true;
                id = parseInt(newId);
                $('#tblGrid tr:last').find("#timePeriod").focus();
            }
        }
        else if (parseInt(remainingPt) === 0) {
            $('#spnremainPt').html('');
            $('#spnremainPtComplete').text('Curtailment schedule Completed.');
            $('#spnremainPtError').text('');
        } else {
            $('#spnremainPt').html('');
            $('#spnremainPtComplete').text('');
            $('#spnremainPtError').text('Error percentage found');
        }
    });

    $('.timeBase').change(function() {
        var time = $(this).filter(':checked').val();
        $('#time').text(time);

        isSelectTime = true;
        //enable textboxes
        if (isSelectCalcType === true && isSelectTime === true) {
            $('.clstimePeriod').prop("disabled", false);
            $('.clsaddCuirtailment').prop("disabled", false);
        }

    });

    ////delete row
    //$(document).on('click', '.btnDeleteRow', function () {
    //    //alert('delete');
    //    var tblLength = $('table#tblGrid > tbody > tr').not(':first').length;
    //    $('#customErrorTable').children('span').text("");
    //    if(tblLength > 1) {
    //        //alert('if');
    //        var tr = $(this).parents('tr:first');

    //        var curid = tr.find("#lblCur").html();
    //        var timePeriod = tr.find("#timePeriod").val();
    //        var percentage = tr.find("#percentage").val();

    //        if (percentage !== '') {
    //            var gridTable = document.getElementById('tblGrid');
    //            gridTable.deleteRow(curid);
    //            id = id - 1;

    //            for (var k = curid; k < id + 1; k++) {
    //                gridTable.rows[k].cells[0].innerHTML = '<label id="lblCur">' + k + '</label>';
    //            }

    //            var removeIndex = (parseInt(curid) - parseInt(1));

    //            list.currentList.splice(removeIndex, 1);
    //            var currentListLenght = Object.keys(list.currentList).length;

    //            for (var i = removeIndex; i < currentListLenght; i++) {
    //                list.currentList[i].CurtailmentId = removeIndex + 1;
    //            }

    //            //if(isErrorTime === true){}

    //            //for (var j = 0; j < currentListLenght; j++) {
    //            //    alert('curid:' + list.currentList[j].CurtailmentId + ' timePeriod:' + list.currentList[j].TimePeriod + ' percentage:' + list.currentList[j].Percentage);
    //            //}

    //            //if(isErrorTime !== true)
    //            remainingPt = parseInt(remainingPt) + parseInt(percentage);

    //            //alert(isErrorTime);

    //            if(parseInt(remainingPt) > 0)
    //            {
    //                var val = document.getElementById('spnremainPtComplete').innerHTML;

    //                $('#spnremainPt').text('Percentage remaining to pay off:' + remainingPt);
    //                $('#spnremainPtComplete').text('');
    //                $('#spnremainPtError').text('');
    //            }
    //            else if (parseInt(remainingPt) === 0) {
    //                $('#spnremainPt').text('');
    //                $('#spnremainPtComplete').text('Curtailment schedule Completed.');
    //                $('#spnremainPtError').text('');
    //            } else {
    //                $('#spnremainPt').text('');
    //                $('#spnremainPtComplete').text('');
    //                $('#spnremainPtError').text('Error percentage found');
    //            }
    //        }

    //    }

    //
    //var index = 0;

    //$('table#tblGrid > tbody > tr').not(':first').each(function() {

    //    var curid = $(this).find("#lblCur").html();
    //    var timePeriod = $(this).find("#timePeriod").val();
    //    var percentage = $(this).find("#percentage").val();
    //    var previousTime = 0;

    //    if(curid > 1)
    //        previousTime = list.currentList[curid - 2].TimePeriod;

    //    //alert('curid: ' + curid + ' timePeriod: ' + timePeriod);
    //    if (parseInt(timePeriod) > parseInt(remainingTime)) {
    //        $('#spnremainTimeError').children('span').text("You entered time should be less than paid off period");
    //        isErrorTime = true;
    //    }else if (parseInt(timePeriod) <= parseInt(previousTime) && parseInt(timePeriod) > 0) {
    //        $('#spnremainTimeError').children('span').text("You entered time should be greater than previous time");
    //        isErrorTime = true;
    //    }
    //    else {
    //        isErrorTime = false;
    //        $('#spnremainTimeError').children('span').text("");
    //    }

    //    // update list
    //    list.currentList[index].TimePeriod = timePeriod;
    //    list.currentList[index].Percentage = percentage;
    //    index = parseInt(index) + parseInt(1);
    //});

    //    var index = 0;

    //    $('table#tblGrid > tbody > tr').not(':first').each(function() {

    //        var curid = $(this).find("#lblCur").html();
    //        var timePeriod = $(this).find("#timePeriod").val();
    //        var percentage = $(this).find("#percentage").val();
    //        var previousTime = 0;

    //        if (parseInt(curid) > 1) {
    //            previousTime = list.currentList[curid - 2].TimePeriod;
    //        }

    //        var currentListLenght = Object.keys(list.currentList).length;
    //        if (parseInt(curid) > 1 && parseInt(currentListLenght) > parseInt(index)) {
    //            // update list
    //            list.currentList[index].TimePeriod = timePeriod;
    //            //list.currentList[index].Percentage = percentage;
    //        }

    //        index = parseInt(index) + parseInt(1);
    //        //alert('curid: ' + curid + ' timePeriod: ' + timePeriod + ' previousTime: ' + previousTime);

    //        if (parseInt(timePeriod) > parseInt(remainingTime)) {
    //            $('#spnremainTimeError').children('span').text("You entered time should be less than paid off period");
    //            isErrorTime = true;
    //            return;
    //        }else if (parseInt(timePeriod) <= parseInt(previousTime) && parseInt(timePeriod) > 0) {

    //            $('#spnremainTimeError').children('span').text("You entered time should be greater than previous time");
    //            isErrorTime = true;
    //            return;
    //        }
    //        else {
    //            isErrorTime = false;
    //            $('#spnremainTimeError').children('span').text("");
    //        }
    //    });

    //    //alert('curid:' + curid + ' timePeriod:' + timePeriod + ' percentage:' + percentage);
    //});

    //$('#curtailmentDueEmail').change(function() {
    //    alert('hi');
    //});

    $('#btnCreate').click(function() {

        $('#customErrorTable').children('span').text("");
        var calBase = $('.payment').filter(':checked').val();

        if (calBase === 'Full payment' || calBase === 'Advance') {
            $('#customErrorCalBase').children('span').text("");
        } else {
            $('#customErrorCalBase').children('span').text("Please select how the curtailments will be calculated.");
        }

        var timeBase = $('.timeBase').filter(':checked').val();

        if (timeBase === 'Months' || timeBase === 'Days') {
            $('#customErrorTimeBase').children('span').text("");
        } else {
            $('#customErrorTimeBase').children('span').text("Please select how the curtailments become due over the course.");
        }


        var loanStatus = $('.Active').filter(':checked').val();
        if (loanStatus === 'Yes' || loanStatus === 'No') {
            $('#customErrorLoanStatus').children('span').text("");
        } else {
            $('#customErrorLoanStatus').children('span').text("Please select if the loan should be activated at this time.");
        }

        //var dueDate = $('#CurtailmentDueDate').val();
        if (remainingPt === advancePt) {
            $('#customErrorTable').children('span').text("Please complete the curtailment schedule.");
        } else {
            $('#customErrorTable').children('span').text("");
        }

        var dueDate = document.getElementById('CurtailmentDueDate').value;

        if (dueDate === '') {
            $('#customErrorDueDate').children('span').text("Please select what day of the month curtailments are due.");
        } else {
            $('#customErrorDueDate').children('span').text("");
        }
        //alert(dueDate);

        var isErrorReminder = false;
        var email = document.getElementById('curtailmentDueEmail').value;

        var emailRemindPeriod = document.getElementById('curtailmentDueEmailRemindPeriod').value;

        if (email !== '' && emailRemindPeriod === '') {
            isErrorReminder = true;
            $('#customErrorPeriod').children('span').text("email remind period is required.");
        } else {
            isErrorReminder = false;
            $('#customErrorPeriod').children('span').text("");
        }

        if(remainingPt === 0 && (calBase === 'Full payment' || calBase === 'Advance') && (timeBase === 'Months' || timeBase === 'Days') && isErrorReminder === false && (loanStatus === 'Yes' || loanStatus === 'No') && isErrorTime === false && dueDate !== '')
        {
            var curtaiulmentModel = {
                LoanStatus: loanStatus,
                CalculationBase: calBase,
                TimeBase: timeBase,
                DueDate: dueDate,
                AutoRemindEmail: email,
                EmailRemindPeriod: emailRemindPeriod
            };

            var data = { curtailmentList: [], curtaiulmentModel};
            $('table#tblGrid > tbody > tr').not(':first').each(function() {
                var curid = $(this).find("#lblCur").html();
                var timePeriod = $(this).find("#timePeriod").val();
                var percentage = $(this).find("#percentage").val();
                if (timePeriod !== '' && percentage !== '') {
                    data.curtailmentList.push({CurtailmentId: curid, TimePeriod: timePeriod, Percentage: percentage});
                }

            });

            $.ajax({
                url: '/SetupProcess/AddCurtailment/',
                data: JSON.stringify(data),
                type: 'POST',
                contentType: 'application/json; charset=utf-8',
                success: function (partialView) {
                    $('#changeContainer').html(partialView);

                    $('#changeContainer').show();
                }
            });
        }
        if (remainingPt > 0 && (calBase === 'Full payment' || calBase === 'Advance') && (loanStatus === 'Yes' || loanStatus === 'No')) {
            var currentListLenght = Object.keys(list.currentList).length;
            var totatlPercentage = 0;
            for (var j = 0; j < currentListLenght; j++) {
                totatlPercentage = parseInt(totatlPercentage) + parseInt(list.currentList[j].Percentage);
            }

            $('#customErrorTable').children('span').text("Total curtailment % equals " + totatlPercentage + " but should be equal to " + payPercentage + ". Please adjust the curtailment schedule.");
        }
    });

    //set loan status
    $('.Active').change(function () {
        $('#customErrorLoanStatus').children('span').text("");
    });

    //due date
    $('#CurtailmentDueDate').change(function() {
        //alert($(this).val());
        var val = $(this).val();
        if (val === '') {
            $('#customErrorDueDate').children('span').text("Please select.");
        } else {
            $('#customErrorDueDate').children('span').text("");
        }
    });

    function AllowNumbers(id, code) {
        if (48 <= code && code <= 58)
            return 1;
        return 0;
    }

    function CheckMaxLenth(id, val, maxLenght) {
        if (val.length < maxLenght) {
            return 1;
        }
        return 0;
    }

    $('#btnPreStep10').click(function () {
        $('#loadingDiv').show();
        $.ajax({
            url: '@Url.Action("Step9", "SetupProcess")',
            type: 'GET',

            success: function (partialView) {
                $('#loadingDiv').hide();
                $('#changeContainer').html(partialView);
                $('#changeContainer').show();
            },
            error: function (request, status, error) {
                handleErrorMsg(request.responseText);
            }
        });
    });

    Progress(10);

    @if ((Session["isInterest"] != null ) && Convert.ToBoolean(Session["isInterest"]) == false)
    {
        <text>
    $(".right_arrw.7").children("img").remove();
    $(".right_arrw.7").parent('li').css("pointer-events", "auto").css("cursor", "pointer");
    $(".right_arrw.7").css('background-image', 'none');
    $(".right_arrw.7").prepend('<img id="theImg" src="/Images/lockIco.png" />');

    </text>

    }
</script>
