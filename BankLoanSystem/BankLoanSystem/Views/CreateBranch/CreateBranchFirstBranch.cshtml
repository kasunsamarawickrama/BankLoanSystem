@model BankLoanSystem.Models.UserCompanyModel

@{
    ViewBag.Title = "CreateBranchFirstBranch";
    Layout = "~/Views/Shared/_EmployeeLayout.cshtml";
}

<link href="~/Content/style.css" rel="stylesheet">

<h2>Main Branch Details</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            <div class="control-label col-sm-2">
                @Html.Label("Same details as company", htmlAttributes: new { })
                </div>
            <div class = "control-label col-sm-2" >
                @Html.CheckBox("Previous", new { @id = "Previous"})
            </div>
                
            </div>
        <div class="form-group">
            <div class = "control-label col-sm-2">
                @Html.LabelFor(model => model.Branch.BranchName, htmlAttributes: new { })<span style="color:red">*</span>
            </div>
           
            <div class="col-xs-8">
                @Html.EditorFor(model => model.Branch.BranchName, new { htmlAttributes = new { @class = "form-control", @id = "branchName" } })

                @Html.ValidationMessageFor(model => model.Branch.BranchName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class = "control-label col-sm-2" >
                @Html.LabelFor(model => model.Branch.BranchAddress1, htmlAttributes: new { })<span style="color:red">*</span>
            </div>
            
            <div class="col-xs-8">
                @Html.EditorFor(model => model.Branch.BranchAddress1, new { htmlAttributes = new { @class = "form-control", @id = "branchAddress1" } })
                @Html.ValidationMessageFor(model => model.Branch.BranchAddress1, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="control-label col-sm-2">
                @Html.LabelFor(model => model.Branch.BranchAddress2, htmlAttributes: new { })
            </div>

            <div class="col-xs-8">
                @Html.EditorFor(model => model.Branch.BranchAddress2, new { htmlAttributes = new { @class = "form-control", @id = "branchAddress2" } })
                @Html.ValidationMessageFor(model => model.Branch.BranchAddress2, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="control-label col-sm-2">
                @Html.LabelFor(model => model.Branch.BranchCity, htmlAttributes: new {})<span style="color: red">*</span>
            </div>

            <div class="col-xs-8">
                @Html.EditorFor(model => model.Branch.BranchCity, new {htmlAttributes = new {@class = "form-control", @id = "branchCity"}})
                @Html.ValidationMessageFor(model => model.Branch.BranchCity, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            <div class="control-label col-sm-2">
                @Html.LabelFor(model => model.StateId, htmlAttributes: new {})<span style="color: red">*</span>
            </div>

            <div class="col-xs-8">
                @Html.DropDownListFor(model => model.StateId, null, "Select state", htmlAttributes : new {@class = "form-control", @id = "StateId"})
                @Html.ValidationMessageFor(model => model.StateId, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            <div class="control-label col-sm-2">
                @Html.LabelFor(model => model.Branch.ZipPre, htmlAttributes: new {})<span style="color: red">*</span>
            </div>

            <div class="col-xs-4">
                @Html.EditorFor(model => model.Branch.Extention, new {htmlAttributes = new {@class = "form-control", @id = "branchZipExten" } })
                @Html.ValidationMessageFor(model => model.Branch.Extention, "", new {@class = "text-danger"})
            </div>
            <div class="col-xs-4">
                @Html.EditorFor(model => model.Branch.ZipPre, new {htmlAttributes = new {@class = "form-control", @id = "branchZipPre" } })
                @Html.ValidationMessageFor(model => model.Branch.ZipPre, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            <div class = "control-label col-sm-2" >
                @Html.LabelFor(model => model.Branch.BranchEmail, htmlAttributes: new { })
            </div>
            
            <div class="col-xs-8">
                @Html.EditorFor(model => model.Branch.BranchEmail, new { htmlAttributes = new { @class = "form-control", @id = "branchEmail" } })
                @Html.ValidationMessageFor(model => model.Branch.BranchEmail, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class = "control-label col-sm-2" >
                @Html.LabelFor(model => model.Branch.BranchPhoneNum1, htmlAttributes: new { })<span style="color:red">*</span>
            </div>
           
            <div class="col-xs-8">
                @Html.EditorFor(model => model.Branch.BranchPhoneNum1, new { htmlAttributes = new { @class = "form-control", @id = "branchPhoneNum1" } })
                @Html.ValidationMessageFor(model => model.Branch.BranchPhoneNum1, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="control-label col-sm-2">
                @Html.LabelFor(model => model.Branch.BranchPhoneNum2, htmlAttributes: new { })
            </div>

            <div class="col-xs-8">
                @Html.EditorFor(model => model.Branch.BranchPhoneNum2, new { htmlAttributes = new { @class = "form-control", @id = "branchPhoneNum2" } })
                @Html.ValidationMessageFor(model => model.Branch.BranchPhoneNum2, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="control-label col-sm-2">
                @Html.LabelFor(model => model.Branch.BranchPhoneNum3, htmlAttributes: new { })
            </div>

            <div class="col-xs-8">
                @Html.EditorFor(model => model.Branch.BranchPhoneNum3, new { htmlAttributes = new { @class = "form-control", @id = "branchPhoneNum3" } })
                @Html.ValidationMessageFor(model => model.Branch.BranchPhoneNum3, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class = "control-label col-sm-2" >
                @Html.LabelFor(model => model.Branch.BranchFax, htmlAttributes: new { })
            </div>
           
            <div class="col-xs-8">
                @Html.EditorFor(model => model.Branch.BranchFax, new { htmlAttributes = new { @class = "form-control", @id = "branchFax" } })
                @Html.ValidationMessageFor(model => model.Branch.BranchFax, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div>
                <nav>
                    <ul class="pager">
                        <li><input type="submit" value="Create" class="btn btn-primary m-b" style="float:left"  /></li>
                        <li><input type="button" value="Clear" class="btn btn-primary m-b" style="float:left;margin-left:10px"  onclick="location.href='@Url.Action("CreateBranchFirstBranch", "CreateBranch")'" /></li>
                    </ul>
                </nav>
                
                
            </div>
        </div>
    </div>
}

<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>


<script type="text/javascript">
    $(function () {
        $('#Previous').on('change', function () {
            if ($(this).is(':checked')) {
                var model = @Html.Raw(Json.Encode(Model));
                document.getElementById("branchName").value = model.Company.City;
                document.getElementById("branchAddress1").value = model.Company.CompanyAddress1;
                document.getElementById("branchAddress2").value = model.Company.CompanyAddress2;
                document.getElementById("StateId").value = model.Company.StateId;
                document.getElementById("branchCity").value = model.Company.City;
                document.getElementById("branchZipPre").value = model.Company.ZipPre;
                document.getElementById("branchZipExten").value = model.Company.Extension;
                document.getElementById("branchEmail").value = model.Company.Email;
                document.getElementById("branchPhoneNum1").value = model.Company.PhoneNum1;
                document.getElementById("branchPhoneNum2").value = model.Company.PhoneNum2;
                document.getElementById("branchPhoneNum3").value = model.Company.PhoneNum3;
                document.getElementById("branchFax").value = model.Company.Fax;
            }
            else {
                document.getElementById("branchName").value = "";
                document.getElementById("branchAddress1").value = "";
                document.getElementById("branchAddress2").value = "";
                document.getElementById("StateId").value = "";
                document.getElementById("branchCity").value = "";
                document.getElementById("branchZipPre").value = "";
                document.getElementById("branchZipExten").value = "";
                document.getElementById("branchEmail").value = "";
                document.getElementById("branchPhoneNum1").value = "";
                document.getElementById("branchPhoneNum2").value = "";
                document.getElementById("branchPhoneNum3").value = "";
                document.getElementById("branchFax").value = "";
            }
        });
    });
</script>